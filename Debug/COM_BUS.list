
COM_BUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b388  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a74  0800b4c8  0800b4c8  0001b4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf3c  0800bf3c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf3c  0800bf3c  0001bf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf44  0800bf44  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf44  0800bf44  0001bf44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf48  0800bf48  0001bf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800bf4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ac  20000064  0800bfb0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  0800bfb0  00020810  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022094  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ea5  00000000  00000000  00042165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ef0  00000000  00000000  00047010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000178f  00000000  00000000  00048f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022386  00000000  00000000  0004a68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000228f0  00000000  00000000  0006ca15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4496  00000000  00000000  0008f305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008448  00000000  00000000  0015379c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b4b0 	.word	0x0800b4b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	0800b4b0 	.word	0x0800b4b0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <updatePacket>:
#define AX_25_LENGTH	(103)

uint8_t info_packet[INFO_LENGTH];
extern uint8_t tx_cmd[AX_25_LENGTH];

void updatePacket(uint8_t *OBC_Rx_buffer) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	info_packet[0] = OBC_Rx_buffer[1];  	// Packet Type
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	785a      	ldrb	r2, [r3, #1]
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <updatePacket+0x98>)
 800052a:	701a      	strb	r2, [r3, #0]
	int j = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	61fb      	str	r3, [r7, #28]
	int k = 3;
 8000530:	2303      	movs	r3, #3
 8000532:	61bb      	str	r3, [r7, #24]
	int len_of_payload = OBC_Rx_buffer[2];
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3302      	adds	r3, #2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	60fb      	str	r3, [r7, #12]
	myDebug("\nlen_of_payload: %d\r\n", len_of_payload + 1);
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	3301      	adds	r3, #1
 8000540:	4619      	mov	r1, r3
 8000542:	481d      	ldr	r0, [pc, #116]	; (80005b8 <updatePacket+0x9c>)
 8000544:	f000 f978 	bl	8000838 <myDebug>
	for (int i = 0; i < len_of_payload; i++) {
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	e011      	b.n	8000572 <updatePacket+0x56>
		info_packet[j] = OBC_Rx_buffer[k];
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	4413      	add	r3, r2
 8000554:	7819      	ldrb	r1, [r3, #0]
 8000556:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <updatePacket+0x98>)
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	4413      	add	r3, r2
 800055c:	460a      	mov	r2, r1
 800055e:	701a      	strb	r2, [r3, #0]
		j++;
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	3301      	adds	r3, #1
 8000564:	61fb      	str	r3, [r7, #28]
		k++;
 8000566:	69bb      	ldr	r3, [r7, #24]
 8000568:	3301      	adds	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len_of_payload; i++) {
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	3301      	adds	r3, #1
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	429a      	cmp	r2, r3
 8000578:	dbe9      	blt.n	800054e <updatePacket+0x32>
	}
	myDebug("info_packet: 0x%x\r\n", info_packet);
 800057a:	490e      	ldr	r1, [pc, #56]	; (80005b4 <updatePacket+0x98>)
 800057c:	480f      	ldr	r0, [pc, #60]	; (80005bc <updatePacket+0xa0>)
 800057e:	f000 f95b 	bl	8000838 <myDebug>
	for (int i = 0; i < sizeof(info_packet); i++) {
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	e00a      	b.n	800059e <updatePacket+0x82>
		myDebug("%02x ", info_packet[i]);
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <updatePacket+0x98>)
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	4413      	add	r3, r2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <updatePacket+0xa4>)
 8000594:	f000 f950 	bl	8000838 <myDebug>
	for (int i = 0; i < sizeof(info_packet); i++) {
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	3301      	adds	r3, #1
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	2b50      	cmp	r3, #80	; 0x50
 80005a2:	d9f1      	bls.n	8000588 <updatePacket+0x6c>
	}
	myDebug("\r\n");
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <updatePacket+0xa8>)
 80005a6:	f000 f947 	bl	8000838 <myDebug>
}
 80005aa:	bf00      	nop
 80005ac:	3720      	adds	r7, #32
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000080 	.word	0x20000080
 80005b8:	0800b4c8 	.word	0x0800b4c8
 80005bc:	0800b4e0 	.word	0x0800b4e0
 80005c0:	0800b4f4 	.word	0x0800b4f4
 80005c4:	0800b4fc 	.word	0x0800b4fc

080005c8 <AX_25PacketFormation>:

int AX_25PacketFormation(uint8_t *OBC_Rx_buffer) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0a6      	sub	sp, #152	; 0x98
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

	updatePacket(OBC_Rx_buffer);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff ffa3 	bl	800051c <updatePacket>
	uint8_t buf_packet[96];
	uint8_t buff_head[17];
	// AX.25 Packet header
	tx_cmd[0] = 0x73;
 80005d6:	4b85      	ldr	r3, [pc, #532]	; (80007ec <AX_25PacketFormation+0x224>)
 80005d8:	2273      	movs	r2, #115	; 0x73
 80005da:	701a      	strb	r2, [r3, #0]

	// destination callsign
	tx_cmd[1] = 0x40;    // callsign  space 0x20 -> 1bit leftshift 0x40
 80005dc:	4b83      	ldr	r3, [pc, #524]	; (80007ec <AX_25PacketFormation+0x224>)
 80005de:	2240      	movs	r2, #64	; 0x40
 80005e0:	705a      	strb	r2, [r3, #1]
	tx_cmd[2] = 0x40;	//callsign	N
 80005e2:	4b82      	ldr	r3, [pc, #520]	; (80007ec <AX_25PacketFormation+0x224>)
 80005e4:	2240      	movs	r2, #64	; 0x40
 80005e6:	709a      	strb	r2, [r3, #2]
	tx_cmd[3] = 0x40;	//callsign	2
 80005e8:	4b80      	ldr	r3, [pc, #512]	; (80007ec <AX_25PacketFormation+0x224>)
 80005ea:	2240      	movs	r2, #64	; 0x40
 80005ec:	70da      	strb	r2, [r3, #3]
	tx_cmd[4] = 0x40;	//callsign	S
 80005ee:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <AX_25PacketFormation+0x224>)
 80005f0:	2240      	movs	r2, #64	; 0x40
 80005f2:	711a      	strb	r2, [r3, #4]
	tx_cmd[5] = 0x40;	//callsign	I
 80005f4:	4b7d      	ldr	r3, [pc, #500]	; (80007ec <AX_25PacketFormation+0x224>)
 80005f6:	2240      	movs	r2, #64	; 0x40
 80005f8:	715a      	strb	r2, [r3, #5]
	tx_cmd[6] = 0x40;	// callsign space
 80005fa:	4b7c      	ldr	r3, [pc, #496]	; (80007ec <AX_25PacketFormation+0x224>)
 80005fc:	2240      	movs	r2, #64	; 0x40
 80005fe:	719a      	strb	r2, [r3, #6]
	tx_cmd[7] = 0xE0;	// destination SSID
 8000600:	4b7a      	ldr	r3, [pc, #488]	; (80007ec <AX_25PacketFormation+0x224>)
 8000602:	22e0      	movs	r2, #224	; 0xe0
 8000604:	71da      	strb	r2, [r3, #7]

	// source callsign					39 4E 32 53 49
	tx_cmd[8] = 0x72;    // callsign 9
 8000606:	4b79      	ldr	r3, [pc, #484]	; (80007ec <AX_25PacketFormation+0x224>)
 8000608:	2272      	movs	r2, #114	; 0x72
 800060a:	721a      	strb	r2, [r3, #8]
	tx_cmd[9] = 0x9C;	//callsign	N
 800060c:	4b77      	ldr	r3, [pc, #476]	; (80007ec <AX_25PacketFormation+0x224>)
 800060e:	229c      	movs	r2, #156	; 0x9c
 8000610:	725a      	strb	r2, [r3, #9]
	tx_cmd[10] = 0x64;	//callsign	2
 8000612:	4b76      	ldr	r3, [pc, #472]	; (80007ec <AX_25PacketFormation+0x224>)
 8000614:	2264      	movs	r2, #100	; 0x64
 8000616:	729a      	strb	r2, [r3, #10]
	tx_cmd[11] = 0xA6;	//callsign	S
 8000618:	4b74      	ldr	r3, [pc, #464]	; (80007ec <AX_25PacketFormation+0x224>)
 800061a:	22a6      	movs	r2, #166	; 0xa6
 800061c:	72da      	strb	r2, [r3, #11]
	tx_cmd[12] = 0x92;	//callsign	I
 800061e:	4b73      	ldr	r3, [pc, #460]	; (80007ec <AX_25PacketFormation+0x224>)
 8000620:	2292      	movs	r2, #146	; 0x92
 8000622:	731a      	strb	r2, [r3, #12]
	tx_cmd[13] = 0x40;	// callsign space
 8000624:	4b71      	ldr	r3, [pc, #452]	; (80007ec <AX_25PacketFormation+0x224>)
 8000626:	2240      	movs	r2, #64	; 0x40
 8000628:	735a      	strb	r2, [r3, #13]
	tx_cmd[14] = 0x36;	// source SSID
 800062a:	4b70      	ldr	r3, [pc, #448]	; (80007ec <AX_25PacketFormation+0x224>)
 800062c:	2236      	movs	r2, #54	; 0x36
 800062e:	739a      	strb	r2, [r3, #14]

	// control field
	tx_cmd[15] = 0x03;
 8000630:	4b6e      	ldr	r3, [pc, #440]	; (80007ec <AX_25PacketFormation+0x224>)
 8000632:	2203      	movs	r2, #3
 8000634:	73da      	strb	r2, [r3, #15]

	// PID control bit
	tx_cmd[16] = 0xF0;
 8000636:	4b6d      	ldr	r3, [pc, #436]	; (80007ec <AX_25PacketFormation+0x224>)
 8000638:	22f0      	movs	r2, #240	; 0xf0
 800063a:	741a      	strb	r2, [r3, #16]

	for (int a = 0; a < 17; a++) {
 800063c:	2300      	movs	r3, #0
 800063e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000642:	e010      	b.n	8000666 <AX_25PacketFormation+0x9e>
		buff_head[a] = tx_cmd[a];
 8000644:	4a69      	ldr	r2, [pc, #420]	; (80007ec <AX_25PacketFormation+0x224>)
 8000646:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800064a:	4413      	add	r3, r2
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000656:	4413      	add	r3, r2
 8000658:	460a      	mov	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < 17; a++) {
 800065c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000660:	3301      	adds	r3, #1
 8000662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000666:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800066a:	2b10      	cmp	r3, #16
 800066c:	ddea      	ble.n	8000644 <AX_25PacketFormation+0x7c>
	}

	uint16_t crc = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	crc = calc_CRC(buff_head, sizeof(buff_head));
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2111      	movs	r1, #17
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f987 	bl	800098e <calc_CRC>
 8000680:	4603      	mov	r3, r0
 8000682:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	tx_cmd[17] = (crc >> 8);
 8000686:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800068a:	0a1b      	lsrs	r3, r3, #8
 800068c:	b29b      	uxth	r3, r3
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b56      	ldr	r3, [pc, #344]	; (80007ec <AX_25PacketFormation+0x224>)
 8000692:	745a      	strb	r2, [r3, #17]
	tx_cmd[18] = crc;
 8000694:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b54      	ldr	r3, [pc, #336]	; (80007ec <AX_25PacketFormation+0x224>)
 800069c:	749a      	strb	r2, [r3, #18]

	tx_cmd[19] = OBC_Rx_buffer[1];  // packet type
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	785a      	ldrb	r2, [r3, #1]
 80006a2:	4b52      	ldr	r3, [pc, #328]	; (80007ec <AX_25PacketFormation+0x224>)
 80006a4:	74da      	strb	r2, [r3, #19]

	// information field
	int i = 20;
 80006a6:	2314      	movs	r3, #20
 80006a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	for (int k = 1; k < sizeof(info_packet); k++) {
 80006ac:	2301      	movs	r3, #1
 80006ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006b2:	e014      	b.n	80006de <AX_25PacketFormation+0x116>
		tx_cmd[i] = info_packet[k];
 80006b4:	4a4e      	ldr	r2, [pc, #312]	; (80007f0 <AX_25PacketFormation+0x228>)
 80006b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006ba:	4413      	add	r3, r2
 80006bc:	7819      	ldrb	r1, [r3, #0]
 80006be:	4a4b      	ldr	r2, [pc, #300]	; (80007ec <AX_25PacketFormation+0x224>)
 80006c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006c4:	4413      	add	r3, r2
 80006c6:	460a      	mov	r2, r1
 80006c8:	701a      	strb	r2, [r3, #0]
		i++;
 80006ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006ce:	3301      	adds	r3, #1
 80006d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	for (int k = 1; k < sizeof(info_packet); k++) {
 80006d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006d8:	3301      	adds	r3, #1
 80006da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006e2:	2b50      	cmp	r3, #80	; 0x50
 80006e4:	d9e6      	bls.n	80006b4 <AX_25PacketFormation+0xec>
	}

	int j = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	for (int k = 19; k < 100; k++) {
 80006ec:	2313      	movs	r3, #19
 80006ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80006f2:	e015      	b.n	8000720 <AX_25PacketFormation+0x158>
		buf_packet[j] = tx_cmd[k];
 80006f4:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <AX_25PacketFormation+0x224>)
 80006f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006fa:	4413      	add	r3, r2
 80006fc:	7819      	ldrb	r1, [r3, #0]
 80006fe:	f107 021c 	add.w	r2, r7, #28
 8000702:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000706:	4413      	add	r3, r2
 8000708:	460a      	mov	r2, r1
 800070a:	701a      	strb	r2, [r3, #0]
		j++;
 800070c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000710:	3301      	adds	r3, #1
 8000712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	for (int k = 19; k < 100; k++) {
 8000716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800071a:	3301      	adds	r3, #1
 800071c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000724:	2b63      	cmp	r3, #99	; 0x63
 8000726:	dde5      	ble.n	80006f4 <AX_25PacketFormation+0x12c>
	}
	// Calculate CRC-CCITT for the packet data starting from packet[1]
	crc = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	crc = calculateCRC_CCITT_AX25(buf_packet, j - 1);
 800072e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000732:	3b01      	subs	r3, #1
 8000734:	461a      	mov	r2, r3
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f8e7 	bl	8000910 <calculateCRC_CCITT_AX25>
 8000742:	4603      	mov	r3, r0
 8000744:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	// Store CRC result in the packet array (from packet[1] to end of for loop)
	tx_cmd[i] = (crc >> 8) & 0xFF; // Most significant byte
 8000748:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	b29b      	uxth	r3, r3
 8000750:	b2d9      	uxtb	r1, r3
 8000752:	4a26      	ldr	r2, [pc, #152]	; (80007ec <AX_25PacketFormation+0x224>)
 8000754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000758:	4413      	add	r3, r2
 800075a:	460a      	mov	r2, r1
 800075c:	701a      	strb	r2, [r3, #0]
	i++;
 800075e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000762:	3301      	adds	r3, #1
 8000764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	tx_cmd[i] = crc & 0xFF;        // Least significant byte
 8000768:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800076c:	b2d9      	uxtb	r1, r3
 800076e:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <AX_25PacketFormation+0x224>)
 8000770:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000774:	4413      	add	r3, r2
 8000776:	460a      	mov	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
	i++;
 800077a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800077e:	3301      	adds	r3, #1
 8000780:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	// AX.25 Packet footer
	tx_cmd[i] = 0x73;				// i=102
 8000784:	4a19      	ldr	r2, [pc, #100]	; (80007ec <AX_25PacketFormation+0x224>)
 8000786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800078a:	4413      	add	r3, r2
 800078c:	2273      	movs	r2, #115	; 0x73
 800078e:	701a      	strb	r2, [r3, #0]
	myDebug("\npacket_len: %d\r\n", i + 1);
 8000790:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000794:	3301      	adds	r3, #1
 8000796:	4619      	mov	r1, r3
 8000798:	4816      	ldr	r0, [pc, #88]	; (80007f4 <AX_25PacketFormation+0x22c>)
 800079a:	f000 f84d 	bl	8000838 <myDebug>
	myDebug("packet: 0x%x\r\n", tx_cmd);
 800079e:	4913      	ldr	r1, [pc, #76]	; (80007ec <AX_25PacketFormation+0x224>)
 80007a0:	4815      	ldr	r0, [pc, #84]	; (80007f8 <AX_25PacketFormation+0x230>)
 80007a2:	f000 f849 	bl	8000838 <myDebug>
	for (int j = 0; j <= i; j++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80007ac:	e00d      	b.n	80007ca <AX_25PacketFormation+0x202>
		myDebug("%02x ", tx_cmd[j]);
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <AX_25PacketFormation+0x224>)
 80007b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	4810      	ldr	r0, [pc, #64]	; (80007fc <AX_25PacketFormation+0x234>)
 80007bc:	f000 f83c 	bl	8000838 <myDebug>
	for (int j = 0; j <= i; j++) {
 80007c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007c4:	3301      	adds	r3, #1
 80007c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80007ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80007ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007d2:	429a      	cmp	r2, r3
 80007d4:	ddeb      	ble.n	80007ae <AX_25PacketFormation+0x1e6>
	}
	myDebug("\r\n");
 80007d6:	480a      	ldr	r0, [pc, #40]	; (8000800 <AX_25PacketFormation+0x238>)
 80007d8:	f000 f82e 	bl	8000838 <myDebug>
	return i + 1;
 80007dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007e0:	3301      	adds	r3, #1
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3798      	adds	r7, #152	; 0x98
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200001cc 	.word	0x200001cc
 80007f0:	20000080 	.word	0x20000080
 80007f4:	0800b500 	.word	0x0800b500
 80007f8:	0800b514 	.word	0x0800b514
 80007fc:	0800b4f4 	.word	0x0800b4f4
 8000800:	0800b4fc 	.word	0x0800b4fc

08000804 <delay_us>:
 */


#include "com_debug.h"

void delay_us(uint32_t us) {
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <delay_us+0x30>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000814:	e002      	b.n	800081c <delay_us+0x18>
		delay_counter_disp++;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3301      	adds	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <delay_us+0x30>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	d8f6      	bhi.n	8000816 <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	200002cc 	.word	0x200002cc

08000838 <myDebug>:

void myDebug(const char *fmt, ...) {
 8000838:	b40f      	push	{r0, r1, r2, r3}
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	2164      	movs	r1, #100	; 0x64
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <myDebug+0x40>)
 800084e:	f00a f99f 	bl	800ab90 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <myDebug+0x40>)
 8000854:	f000 f814 	bl	8000880 <bufferSize>
 8000858:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	b29a      	uxth	r2, r3
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	4905      	ldr	r1, [pc, #20]	; (8000878 <myDebug+0x40>)
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <myDebug+0x44>)
 8000866:	f004 ff53 	bl	8005710 <HAL_UART_Transmit>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000874:	b004      	add	sp, #16
 8000876:	4770      	bx	lr
 8000878:	200000d4 	.word	0x200000d4
 800087c:	2000031c 	.word	0x2000031c

08000880 <bufferSize>:
	va_end(args);
	int len = bufferSize(temp);
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
}

int bufferSize(char *buffer) {
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 800088c:	e002      	b.n	8000894 <bufferSize+0x14>
		i++;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3301      	adds	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	1c5a      	adds	r2, r3, #1
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f6      	bne.n	800088e <bufferSize+0xe>
	return i;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4013      	ands	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d0:	68fb      	ldr	r3, [r7, #12]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008e0:	2004      	movs	r0, #4
 80008e2:	f7ff ffe3 	bl	80008ac <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff ffe0 	bl	80008ac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	200b      	movs	r0, #11
 80008f2:	f001 fd60 	bl	80023b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008f6:	200b      	movs	r0, #11
 80008f8:	f001 fd77 	bl	80023ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	200c      	movs	r0, #12
 8000902:	f001 fd58 	bl	80023b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000906:	200c      	movs	r0, #12
 8000908:	f001 fd6f 	bl	80023ea <HAL_NVIC_EnableIRQ>

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <calculateCRC_CCITT_AX25>:
 */

#include "error_detection.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 8000910:	b480      	push	{r7}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 800091a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800091e:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 8000920:	f241 0321 	movw	r3, #4129	; 0x1021
 8000924:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	e026      	b.n	800097a <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	4413      	add	r3, r2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b21a      	sxth	r2, r3
 8000938:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800093c:	4053      	eors	r3, r2
 800093e:	b21b      	sxth	r3, r3
 8000940:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e012      	b.n	800096e <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 8000948:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800094c:	2b00      	cmp	r3, #0
 800094e:	da08      	bge.n	8000962 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 8000950:	8afb      	ldrh	r3, [r7, #22]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	b21a      	sxth	r2, r3
 8000956:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800095a:	4053      	eors	r3, r2
 800095c:	b21b      	sxth	r3, r3
 800095e:	82fb      	strh	r3, [r7, #22]
 8000960:	e002      	b.n	8000968 <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 8000962:	8afb      	ldrh	r3, [r7, #22]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3301      	adds	r3, #1
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2b07      	cmp	r3, #7
 8000972:	dde9      	ble.n	8000948 <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	3301      	adds	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	429a      	cmp	r2, r3
 8000980:	d3d4      	bcc.n	800092c <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000982:	8afb      	ldrh	r3, [r7, #22]
}
 8000984:	4618      	mov	r0, r3
 8000986:	371c      	adds	r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <calc_CRC>:


uint16_t calc_CRC(const uint8_t *data, size_t length) {
 800098e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000992:	b08b      	sub	sp, #44	; 0x2c
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	466b      	mov	r3, sp
 800099c:	4618      	mov	r0, r3

	uint16_t crcReg = 0xFFFF;	// Initialize the CRC register with 0xFFFF
 800099e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t calc = 0x8408;		// Polynomial for CRC-16
 80009a4:	f248 4308 	movw	r3, #33800	; 0x8408
 80009a8:	837b      	strh	r3, [r7, #26]
	uint16_t w;
	int i, j;
	uint8_t calc_data[length];  // in length bytes, actual_size are data bytes for CRC
 80009aa:	6839      	ldr	r1, [r7, #0]
 80009ac:	460b      	mov	r3, r1
 80009ae:	3b01      	subs	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	2300      	movs	r3, #0
 80009b4:	4688      	mov	r8, r1
 80009b6:	4699      	mov	r9, r3
 80009b8:	f04f 0200 	mov.w	r2, #0
 80009bc:	f04f 0300 	mov.w	r3, #0
 80009c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009cc:	2300      	movs	r3, #0
 80009ce:	460c      	mov	r4, r1
 80009d0:	461d      	mov	r5, r3
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	f04f 0300 	mov.w	r3, #0
 80009da:	00eb      	lsls	r3, r5, #3
 80009dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009e0:	00e2      	lsls	r2, r4, #3
 80009e2:	1dcb      	adds	r3, r1, #7
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	ebad 0d03 	sub.w	sp, sp, r3
 80009ec:	466b      	mov	r3, sp
 80009ee:	3300      	adds	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]

	// Copy data into calc_data
	for (i = 0; i < length; i++) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
 80009f6:	e034      	b.n	8000a62 <calc_CRC+0xd4>
		calc_data[i] = data[i];
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	7819      	ldrb	r1, [r3, #0]
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	6a3b      	ldr	r3, [r7, #32]
 8000a04:	4413      	add	r3, r2
 8000a06:	460a      	mov	r2, r1
 8000a08:	701a      	strb	r2, [r3, #0]
		// Iterate over each byte of data
		for (j = 0; j < 8; j++) {
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
 8000a0e:	e022      	b.n	8000a56 <calc_CRC+0xc8>
			w = (crcReg ^ calc_data[i]) & 0x0001; // XOR the LSB of crcReg with the LSB of calc_data
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	4413      	add	r3, r2
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a1c:	4053      	eors	r3, r2
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	81fb      	strh	r3, [r7, #14]
			crcReg = crcReg >> 1;			// Right-shift the crcReg by 1 bit
 8000a26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (w == 1) {
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d103      	bne.n	8000a3a <calc_CRC+0xac>
				crcReg = crcReg ^ calc;	// If w is 1, XOR the crcReg with the polynomial
 8000a32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a34:	8b7b      	ldrh	r3, [r7, #26]
 8000a36:	4053      	eors	r3, r2
 8000a38:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			calc_data[i] = calc_data[i] >> 1;// Right-shift the data byte by 1 bit
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
 8000a3e:	4413      	add	r3, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	085b      	lsrs	r3, r3, #1
 8000a44:	b2d9      	uxtb	r1, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	6a3b      	ldr	r3, [r7, #32]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	3301      	adds	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	2b07      	cmp	r3, #7
 8000a5a:	ddd9      	ble.n	8000a10 <calc_CRC+0x82>
	for (i = 0; i < length; i++) {
 8000a5c:	6a3b      	ldr	r3, [r7, #32]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
 8000a62:	6a3b      	ldr	r3, [r7, #32]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d8c6      	bhi.n	80009f8 <calc_CRC+0x6a>
		}
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
 8000a6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	84fb      	strh	r3, [r7, #38]	; 0x26
	return crcReg;
 8000a70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a72:	4685      	mov	sp, r0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	372c      	adds	r7, #44	; 0x2c
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000a7e:	4770      	bx	lr

08000a80 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f7ff ffdb 	bl	8000a80 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2002      	movs	r0, #2
 8000acc:	f7ff ffd8 	bl	8000a80 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	2004      	movs	r0, #4
 8000ad2:	f7ff ffd5 	bl	8000a80 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000adc:	481f      	ldr	r0, [pc, #124]	; (8000b5c <MX_GPIO_Init+0xac>)
 8000ade:	f002 f981 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2138      	movs	r1, #56	; 0x38
 8000ae6:	481e      	ldr	r0, [pc, #120]	; (8000b60 <MX_GPIO_Init+0xb0>)
 8000ae8:	f002 f97c 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000aec:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000af0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afa:	2302      	movs	r3, #2
 8000afc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4816      	ldr	r0, [pc, #88]	; (8000b5c <MX_GPIO_Init+0xac>)
 8000b04:	f002 f80e 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000b08:	2338      	movs	r3, #56	; 0x38
 8000b0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4810      	ldr	r0, [pc, #64]	; (8000b60 <MX_GPIO_Init+0xb0>)
 8000b1e:	f002 f801 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000b22:	2303      	movs	r3, #3
 8000b24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f001 fff4 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000b3c:	2340      	movs	r3, #64	; 0x40
 8000b3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_GPIO_Init+0xb0>)
 8000b50:	f001 ffe8 	bl	8002b24 <HAL_GPIO_Init>

}
 8000b54:	bf00      	nop
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48000800 	.word	0x48000800

08000b64 <EOM>:
void EOM();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void EOM() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	//add ACK and Latest mission FM address
	end_msn[0] = 0x53;
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <EOM+0xa4>)
 8000b6c:	2253      	movs	r2, #83	; 0x53
 8000b6e:	701a      	strb	r2, [r3, #0]
	end_msn[1] = 0x03;
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <EOM+0xa4>)
 8000b72:	2203      	movs	r2, #3
 8000b74:	705a      	strb	r2, [r3, #1]
	end_msn[2] = 0x45;
 8000b76:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <EOM+0xa4>)
 8000b78:	2245      	movs	r2, #69	; 0x45
 8000b7a:	709a      	strb	r2, [r3, #2]
	end_msn[3] = 0x4F;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <EOM+0xa4>)
 8000b7e:	224f      	movs	r2, #79	; 0x4f
 8000b80:	70da      	strb	r2, [r3, #3]

	end_msn[4] = 0x4D;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <EOM+0xa4>)
 8000b84:	224d      	movs	r2, #77	; 0x4d
 8000b86:	711a      	strb	r2, [r3, #4]

	end_msn[5] = 0x7E;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <EOM+0xa4>)
 8000b8a:	227e      	movs	r2, #126	; 0x7e
 8000b8c:	715a      	strb	r2, [r3, #5]

	BEACON_COUNT = 2;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <EOM+0xa8>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	601a      	str	r2, [r3, #0]
	OBC_HANDSHAKE_FLAG = 0;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <EOM+0xac>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
	OBC_SUCCESS_DATA_RX_FLAG = 0;
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <EOM+0xb0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
	DIGIPEATER_STATUS = 0;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <EOM+0xb4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
	DIGIPEATER_FLAG = 0;
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <EOM+0xb8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]

	// END of Mission
	if (HAL_UART_Transmit(&huart2, end_msn, sizeof(end_msn), 2000) == HAL_OK) {
 8000bac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bb0:	2206      	movs	r2, #6
 8000bb2:	4915      	ldr	r1, [pc, #84]	; (8000c08 <EOM+0xa4>)
 8000bb4:	481a      	ldr	r0, [pc, #104]	; (8000c20 <EOM+0xbc>)
 8000bb6:	f004 fdab 	bl	8005710 <HAL_UART_Transmit>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d11e      	bne.n	8000bfe <EOM+0x9a>
		myDebug("### Sent End of mission to OBC: ");
 8000bc0:	4818      	ldr	r0, [pc, #96]	; (8000c24 <EOM+0xc0>)
 8000bc2:	f7ff fe39 	bl	8000838 <myDebug>
		for (int i = 0; i < sizeof(end_msn); i++) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	e00a      	b.n	8000be2 <EOM+0x7e>
			myDebug("%x", end_msn[i]);
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <EOM+0xa4>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4814      	ldr	r0, [pc, #80]	; (8000c28 <EOM+0xc4>)
 8000bd8:	f7ff fe2e 	bl	8000838 <myDebug>
		for (int i = 0; i < sizeof(end_msn); i++) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3301      	adds	r3, #1
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b05      	cmp	r3, #5
 8000be6:	d9f1      	bls.n	8000bcc <EOM+0x68>
		}
		myDebug("\n");
 8000be8:	4810      	ldr	r0, [pc, #64]	; (8000c2c <EOM+0xc8>)
 8000bea:	f7ff fe25 	bl	8000838 <myDebug>
		myDebug("--> COM Mission_Execution Complete.\r\n");
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <EOM+0xcc>)
 8000bf0:	f7ff fe22 	bl	8000838 <myDebug>
		memset(end_msn, '\0', sizeof(end_msn));
 8000bf4:	2206      	movs	r2, #6
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <EOM+0xa4>)
 8000bfa:	f009 ffd7 	bl	800abac <memset>
	}

}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000258 	.word	0x20000258
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000168 	.word	0x20000168
 8000c14:	2000016c 	.word	0x2000016c
 8000c18:	20000170 	.word	0x20000170
 8000c1c:	20000174 	.word	0x20000174
 8000c20:	200003b0 	.word	0x200003b0
 8000c24:	0800b524 	.word	0x0800b524
 8000c28:	0800b548 	.word	0x0800b548
 8000c2c:	0800b54c 	.word	0x0800b54c
 8000c30:	0800b550 	.word	0x0800b550

08000c34 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c3a:	f001 fa79 	bl	8002130 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c3e:	f000 f979 	bl	8000f34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c42:	f7ff ff35 	bl	8000ab0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000c46:	f7ff fe49 	bl	80008dc <MX_DMA_Init>
	MX_SubGHz_Phy_Init();
 8000c4a:	f009 fbf0 	bl	800a42e <MX_SubGHz_Phy_Init>
	MX_TIM1_Init();
 8000c4e:	f000 ff33 	bl	8001ab8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000c52:	f000 ff85 	bl	8001b60 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000c56:	f001 f8b5 	bl	8001dc4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000c5a:	f001 f8ff 	bl	8001e5c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000c5e:	488e      	ldr	r0, [pc, #568]	; (8000e98 <main+0x264>)
 8000c60:	f004 f918 	bl	8004e94 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat SATELLITE COM: BEGIN ##########\r\n");
 8000c64:	488d      	ldr	r0, [pc, #564]	; (8000e9c <main+0x268>)
 8000c66:	f7ff fde7 	bl	8000838 <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 8000c6a:	488d      	ldr	r0, [pc, #564]	; (8000ea0 <main+0x26c>)
 8000c6c:	f7ff fde4 	bl	8000838 <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 8000c70:	488c      	ldr	r0, [pc, #560]	; (8000ea4 <main+0x270>)
 8000c72:	f7ff fde1 	bl	8000838 <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz and UPLINK FREQ: %lu Hz\r\n",
 8000c76:	4a8c      	ldr	r2, [pc, #560]	; (8000ea8 <main+0x274>)
 8000c78:	498c      	ldr	r1, [pc, #560]	; (8000eac <main+0x278>)
 8000c7a:	488d      	ldr	r0, [pc, #564]	; (8000eb0 <main+0x27c>)
 8000c7c:	f7ff fddc 	bl	8000838 <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 8000c80:	488c      	ldr	r0, [pc, #560]	; (8000eb4 <main+0x280>)
 8000c82:	f7ff fdd9 	bl	8000838 <myDebug>
	myDebug(
 8000c86:	230e      	movs	r3, #14
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2104      	movs	r1, #4
 8000c90:	4889      	ldr	r0, [pc, #548]	; (8000eb8 <main+0x284>)
 8000c92:	f7ff fdd1 	bl	8000838 <myDebug>
			"POWER CONFIG:::- \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Operation Starts ##########\r\n");
 8000c96:	4889      	ldr	r0, [pc, #548]	; (8000ebc <main+0x288>)
 8000c98:	f7ff fdce 	bl	8000838 <myDebug>
	myDebug("________________Waiting Handshake Command____________\r\n");
 8000c9c:	4888      	ldr	r0, [pc, #544]	; (8000ec0 <main+0x28c>)
 8000c9e:	f7ff fdcb 	bl	8000838 <myDebug>

	WAIT_FOR_HANDSHAKE();
 8000ca2:	f000 fd11 	bl	80016c8 <WAIT_FOR_HANDSHAKE>

	HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8000ca6:	4b87      	ldr	r3, [pc, #540]	; (8000ec4 <main+0x290>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	4986      	ldr	r1, [pc, #536]	; (8000ec8 <main+0x294>)
 8000cb0:	4886      	ldr	r0, [pc, #536]	; (8000ecc <main+0x298>)
 8000cb2:	f004 fe77 	bl	80059a4 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		delay_us(500000);
 8000cb6:	4886      	ldr	r0, [pc, #536]	; (8000ed0 <main+0x29c>)
 8000cb8:	f7ff fda4 	bl	8000804 <delay_us>

		if (OBC_SUCCESS_DATA_RX_FLAG) {
 8000cbc:	4b85      	ldr	r3, [pc, #532]	; (8000ed4 <main+0x2a0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f000 80dd 	beq.w	8000e80 <main+0x24c>
			packetLen = 0;
 8000cc6:	4b84      	ldr	r3, [pc, #528]	; (8000ed8 <main+0x2a4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
			packetLen = AX_25PacketFormation(OBC_UART_RX);
 8000ccc:	487e      	ldr	r0, [pc, #504]	; (8000ec8 <main+0x294>)
 8000cce:	f7ff fc7b 	bl	80005c8 <AX_25PacketFormation>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a80      	ldr	r2, [pc, #512]	; (8000ed8 <main+0x2a4>)
 8000cd6:	6013      	str	r3, [r2, #0]
			myDebug("\nAX.25 packet_buffer: 0x%x\r\n", tx_cmd);
 8000cd8:	4980      	ldr	r1, [pc, #512]	; (8000edc <main+0x2a8>)
 8000cda:	4881      	ldr	r0, [pc, #516]	; (8000ee0 <main+0x2ac>)
 8000cdc:	f7ff fdac 	bl	8000838 <myDebug>
			myDebug("Tx_Buffer Length: %d\r\n", packetLen);
 8000ce0:	4b7d      	ldr	r3, [pc, #500]	; (8000ed8 <main+0x2a4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	487f      	ldr	r0, [pc, #508]	; (8000ee4 <main+0x2b0>)
 8000ce8:	f7ff fda6 	bl	8000838 <myDebug>
			for (int i = 0; i < packetLen; i++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	e00a      	b.n	8000d08 <main+0xd4>
				myDebug("%02x ", tx_cmd[i]);
 8000cf2:	4a7a      	ldr	r2, [pc, #488]	; (8000edc <main+0x2a8>)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	487a      	ldr	r0, [pc, #488]	; (8000ee8 <main+0x2b4>)
 8000cfe:	f7ff fd9b 	bl	8000838 <myDebug>
			for (int i = 0; i < packetLen; i++) {
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3301      	adds	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	4b73      	ldr	r3, [pc, #460]	; (8000ed8 <main+0x2a4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	dbef      	blt.n	8000cf2 <main+0xbe>
			}
			myDebug("\r\n");
 8000d12:	4876      	ldr	r0, [pc, #472]	; (8000eec <main+0x2b8>)
 8000d14:	f7ff fd90 	bl	8000838 <myDebug>

			myDebug("Packet Type: %02x \n", tx_cmd[19]);
 8000d18:	4b70      	ldr	r3, [pc, #448]	; (8000edc <main+0x2a8>)
 8000d1a:	7cdb      	ldrb	r3, [r3, #19]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4874      	ldr	r0, [pc, #464]	; (8000ef0 <main+0x2bc>)
 8000d20:	f7ff fd8a 	bl	8000838 <myDebug>

			memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8000d24:	2254      	movs	r2, #84	; 0x54
 8000d26:	2100      	movs	r1, #0
 8000d28:	4867      	ldr	r0, [pc, #412]	; (8000ec8 <main+0x294>)
 8000d2a:	f009 ff3f 	bl	800abac <memset>

			pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000d2e:	4b71      	ldr	r3, [pc, #452]	; (8000ef4 <main+0x2c0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
			pkt_params.Params.Gfsk.PayloadLength = PAYLOAD_LENGTH;
 8000d34:	4b6f      	ldr	r3, [pc, #444]	; (8000ef4 <main+0x2c0>)
 8000d36:	2267      	movs	r2, #103	; 0x67
 8000d38:	721a      	strb	r2, [r3, #8]
			pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8000d3a:	4b6e      	ldr	r3, [pc, #440]	; (8000ef4 <main+0x2c0>)
 8000d3c:	2208      	movs	r2, #8
 8000d3e:	805a      	strh	r2, [r3, #2]
			pkt_params.Params.Gfsk.PreambleMinDetect =
 8000d40:	4b6c      	ldr	r3, [pc, #432]	; (8000ef4 <main+0x2c0>)
 8000d42:	2204      	movs	r2, #4
 8000d44:	711a      	strb	r2, [r3, #4]
					RADIO_PREAMBLE_DETECTOR_08_BITS;
			pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8000d46:	4b6b      	ldr	r3, [pc, #428]	; (8000ef4 <main+0x2c0>)
 8000d48:	2218      	movs	r2, #24
 8000d4a:	715a      	strb	r2, [r3, #5]
			pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000d4c:	4b69      	ldr	r3, [pc, #420]	; (8000ef4 <main+0x2c0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	719a      	strb	r2, [r3, #6]
			pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000d52:	4b68      	ldr	r3, [pc, #416]	; (8000ef4 <main+0x2c0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	71da      	strb	r2, [r3, #7]
			pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000d58:	4b66      	ldr	r3, [pc, #408]	; (8000ef4 <main+0x2c0>)
 8000d5a:	22f2      	movs	r2, #242	; 0xf2
 8000d5c:	725a      	strb	r2, [r3, #9]
			pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000d5e:	4b65      	ldr	r3, [pc, #404]	; (8000ef4 <main+0x2c0>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	729a      	strb	r2, [r3, #10]

			mod_params.PacketType = PACKET_TYPE_GFSK;
 8000d64:	4b64      	ldr	r3, [pc, #400]	; (8000ef8 <main+0x2c4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
			mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8000d6a:	4b63      	ldr	r3, [pc, #396]	; (8000ef8 <main+0x2c4>)
 8000d6c:	220d      	movs	r2, #13
 8000d6e:	735a      	strb	r2, [r3, #13]
			mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_4800;
 8000d70:	4b61      	ldr	r3, [pc, #388]	; (8000ef8 <main+0x2c4>)
 8000d72:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000d76:	605a      	str	r2, [r3, #4]
			mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_4800;
 8000d78:	4b5f      	ldr	r3, [pc, #380]	; (8000ef8 <main+0x2c4>)
 8000d7a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000d7e:	609a      	str	r2, [r3, #8]
			mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000d80:	4b5d      	ldr	r3, [pc, #372]	; (8000ef8 <main+0x2c4>)
 8000d82:	220b      	movs	r2, #11
 8000d84:	731a      	strb	r2, [r3, #12]

			SUBGRF_Init(DioIrqHndlr);
 8000d86:	485d      	ldr	r0, [pc, #372]	; (8000efc <main+0x2c8>)
 8000d88:	f008 f908 	bl	8008f9c <SUBGRF_Init>
			SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f008 ff70 	bl	8009c74 <SUBGRF_SetBufferBaseAddress>
			SUBGRF_SetPayload(tx_cmd, PAYLOAD_LENGTH);
 8000d94:	2167      	movs	r1, #103	; 0x67
 8000d96:	4851      	ldr	r0, [pc, #324]	; (8000edc <main+0x2a8>)
 8000d98:	f008 f952 	bl	8009040 <SUBGRF_SetPayload>
			SUBGRF_SetPacketParams(&pkt_params);
 8000d9c:	4855      	ldr	r0, [pc, #340]	; (8000ef4 <main+0x2c0>)
 8000d9e:	f008 fecb 	bl	8009b38 <SUBGRF_SetPacketParams>
			SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00,
 8000da2:	4a57      	ldr	r2, [pc, #348]	; (8000f00 <main+0x2cc>)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000daa:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4618      	mov	r0, r3
 8000db2:	f008 f98a 	bl	80090ca <SUBGRF_SetSyncWord>
							0x00, 0x00, 0x00 });
			SUBGRF_SetWhiteningSeed(0x01FF);
 8000db6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000dba:	f008 f9d5 	bl	8009168 <SUBGRF_SetWhiteningSeed>
			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8000dbe:	483b      	ldr	r0, [pc, #236]	; (8000eac <main+0x278>)
 8000dc0:	f008 fcae 	bl	8009720 <SUBGRF_SetRfFrequency>
			SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2004      	movs	r0, #4
 8000dcc:	f008 fc2a 	bl	8009624 <SUBGRF_SetPaConfig>
			//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
			SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	210e      	movs	r1, #14
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f008 fd0f 	bl	80097f8 <SUBGRF_SetTxParams>
			SUBGRF_SetModulationParams(&mod_params);
 8000dda:	4847      	ldr	r0, [pc, #284]	; (8000ef8 <main+0x2c4>)
 8000ddc:	f008 fdda 	bl	8009994 <SUBGRF_SetModulationParams>
			SUBGRF_SetDioIrqParams(
 8000de0:	2300      	movs	r3, #0
 8000de2:	2200      	movs	r2, #0
 8000de4:	f240 210f 	movw	r1, #527	; 0x20f
 8000de8:	f240 200f 	movw	r0, #527	; 0x20f
 8000dec:	f008 fc3c 	bl	8009668 <SUBGRF_SetDioIrqParams>
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_RADIO_NONE, IRQ_RADIO_NONE);

			myDebug("\n########## TX Configuration: ##########\n");
 8000df0:	4844      	ldr	r0, [pc, #272]	; (8000f04 <main+0x2d0>)
 8000df2:	f7ff fd21 	bl	8000838 <myDebug>

			myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 8000df6:	492d      	ldr	r1, [pc, #180]	; (8000eac <main+0x278>)
 8000df8:	4843      	ldr	r0, [pc, #268]	; (8000f08 <main+0x2d4>)
 8000dfa:	f7ff fd1d 	bl	8000838 <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <main+0x2c4>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	4619      	mov	r1, r3
 8000e04:	4841      	ldr	r0, [pc, #260]	; (8000f0c <main+0x2d8>)
 8000e06:	f7ff fd17 	bl	8000838 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 8000e0a:	4b3b      	ldr	r3, [pc, #236]	; (8000ef8 <main+0x2c4>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	483f      	ldr	r0, [pc, #252]	; (8000f10 <main+0x2dc>)
 8000e12:	f7ff fd11 	bl	8000838 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 8000e16:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <main+0x2c4>)
 8000e18:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	483d      	ldr	r0, [pc, #244]	; (8000f14 <main+0x2e0>)
 8000e1e:	f7ff fd0b 	bl	8000838 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000e22:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <main+0x2c0>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4619      	mov	r1, r3
 8000e28:	483b      	ldr	r0, [pc, #236]	; (8000f18 <main+0x2e4>)
 8000e2a:	f7ff fd05 	bl	8000838 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <main+0x2c0>)
 8000e30:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8000e32:	4619      	mov	r1, r3
 8000e34:	4839      	ldr	r0, [pc, #228]	; (8000f1c <main+0x2e8>)
 8000e36:	f7ff fcff 	bl	8000838 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <main+0x2c0>)
 8000e3c:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4837      	ldr	r0, [pc, #220]	; (8000f20 <main+0x2ec>)
 8000e42:	f7ff fcf9 	bl	8000838 <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <main+0x2c0>)
 8000e48:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4835      	ldr	r0, [pc, #212]	; (8000f24 <main+0x2f0>)
 8000e4e:	f7ff fcf3 	bl	8000838 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8000e52:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <main+0x2c0>)
 8000e54:	79db      	ldrb	r3, [r3, #7]
 8000e56:	4619      	mov	r1, r3
 8000e58:	4833      	ldr	r0, [pc, #204]	; (8000f28 <main+0x2f4>)
 8000e5a:	f7ff fced 	bl	8000838 <myDebug>
			myDebug("__________*******************__________\r\n");
 8000e5e:	4833      	ldr	r0, [pc, #204]	; (8000f2c <main+0x2f8>)
 8000e60:	f7ff fcea 	bl	8000838 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <main+0x278>)
 8000e66:	f008 fc5b 	bl	8009720 <SUBGRF_SetRfFrequency>
			//SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f009 f89f 	bl	8009fb0 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_cmd, p_len, 0);
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <main+0x2fc>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4818      	ldr	r0, [pc, #96]	; (8000edc <main+0x2a8>)
 8000e7c:	f008 f912 	bl	80090a4 <SUBGRF_SendPayload>
		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <main+0x290>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	461a      	mov	r2, r3
 8000e88:	490f      	ldr	r1, [pc, #60]	; (8000ec8 <main+0x294>)
 8000e8a:	4810      	ldr	r0, [pc, #64]	; (8000ecc <main+0x298>)
 8000e8c:	f004 fd8a 	bl	80059a4 <HAL_UART_Receive_DMA>

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8000e90:	f009 fad5 	bl	800a43e <MX_SubGHz_Phy_Process>
		delay_us(500000);
 8000e94:	e70f      	b.n	8000cb6 <main+0x82>
 8000e96:	bf00      	nop
 8000e98:	200002cc 	.word	0x200002cc
 8000e9c:	0800b578 	.word	0x0800b578
 8000ea0:	0800b5b4 	.word	0x0800b5b4
 8000ea4:	0800b5e8 	.word	0x0800b5e8
 8000ea8:	19f25968 	.word	0x19f25968
 8000eac:	1a11d018 	.word	0x1a11d018
 8000eb0:	0800b604 	.word	0x0800b604
 8000eb4:	0800b644 	.word	0x0800b644
 8000eb8:	0800b66c 	.word	0x0800b66c
 8000ebc:	0800b6c0 	.word	0x0800b6c0
 8000ec0:	0800b6ec 	.word	0x0800b6ec
 8000ec4:	20000004 	.word	0x20000004
 8000ec8:	20000178 	.word	0x20000178
 8000ecc:	200003b0 	.word	0x200003b0
 8000ed0:	0007a120 	.word	0x0007a120
 8000ed4:	2000016c 	.word	0x2000016c
 8000ed8:	20000260 	.word	0x20000260
 8000edc:	200001cc 	.word	0x200001cc
 8000ee0:	0800b724 	.word	0x0800b724
 8000ee4:	0800b744 	.word	0x0800b744
 8000ee8:	0800b75c 	.word	0x0800b75c
 8000eec:	0800b764 	.word	0x0800b764
 8000ef0:	0800b768 	.word	0x0800b768
 8000ef4:	20000138 	.word	0x20000138
 8000ef8:	2000014c 	.word	0x2000014c
 8000efc:	0800134d 	.word	0x0800134d
 8000f00:	0800b8b4 	.word	0x0800b8b4
 8000f04:	0800b77c 	.word	0x0800b77c
 8000f08:	0800b7a8 	.word	0x0800b7a8
 8000f0c:	0800b7d0 	.word	0x0800b7d0
 8000f10:	0800b7e0 	.word	0x0800b7e0
 8000f14:	0800b7fc 	.word	0x0800b7fc
 8000f18:	0800b818 	.word	0x0800b818
 8000f1c:	0800b82c 	.word	0x0800b82c
 8000f20:	0800b844 	.word	0x0800b844
 8000f24:	0800b85c 	.word	0x0800b85c
 8000f28:	0800b874 	.word	0x0800b874
 8000f2c:	0800b888 	.word	0x0800b888
 8000f30:	20000005 	.word	0x20000005

08000f34 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b09a      	sub	sp, #104	; 0x68
 8000f38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	2248      	movs	r2, #72	; 0x48
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f009 fe32 	bl	800abac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]
 8000f56:	615a      	str	r2, [r3, #20]
 8000f58:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f5a:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <SystemClock_Config+0xbc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f62:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <SystemClock_Config+0xbc>)
 8000f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <SystemClock_Config+0xbc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f76:	2301      	movs	r3, #1
 8000f78:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000f7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8000f90:	2306      	movs	r3, #6
 8000f92:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f98:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f9e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fa4:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 fa04 	bl	80033b8 <HAL_RCC_OscConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x86>
		Error_Handler();
 8000fb6:	f000 fb81 	bl	80016bc <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000fba:	234f      	movs	r3, #79	; 0x4f
 8000fbc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 fd70 	bl	8003abc <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0xb2>
		Error_Handler();
 8000fe2:	f000 fb6b 	bl	80016bc <Error_Handler>
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	3768      	adds	r7, #104	; 0x68
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	58000400 	.word	0x58000400

08000ff4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4aaf      	ldr	r2, [pc, #700]	; (80012bc <HAL_UART_RxCpltCallback+0x2c8>)
 8001000:	4293      	cmp	r3, r2
 8001002:	f040 8157 	bne.w	80012b4 <HAL_UART_RxCpltCallback+0x2c0>
		if (OBC_HANDSHAKE_FLAG) {
 8001006:	4bae      	ldr	r3, [pc, #696]	; (80012c0 <HAL_UART_RxCpltCallback+0x2cc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8152 	beq.w	80012b4 <HAL_UART_RxCpltCallback+0x2c0>
			if (DIGIPEATER_STATUS == 1 && OBC_SUCCESS_DATA_RX_FLAG == 0) {
 8001010:	4bac      	ldr	r3, [pc, #688]	; (80012c4 <HAL_UART_RxCpltCallback+0x2d0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	f040 8100 	bne.w	800121a <HAL_UART_RxCpltCallback+0x226>
 800101a:	4bab      	ldr	r3, [pc, #684]	; (80012c8 <HAL_UART_RxCpltCallback+0x2d4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 80fb 	bne.w	800121a <HAL_UART_RxCpltCallback+0x226>
				DIGIPEATER_FLAG = 1;
 8001024:	4ba9      	ldr	r3, [pc, #676]	; (80012cc <HAL_UART_RxCpltCallback+0x2d8>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
				myDebug("\n--> Digipeater Data Received from OBC: 0x%x\r\n",
 800102a:	49a9      	ldr	r1, [pc, #676]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 800102c:	48a9      	ldr	r0, [pc, #676]	; (80012d4 <HAL_UART_RxCpltCallback+0x2e0>)
 800102e:	f7ff fc03 	bl	8000838 <myDebug>
						OBC_UART_RX);
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	e00a      	b.n	800104e <HAL_UART_RxCpltCallback+0x5a>
					myDebug("%02x ", OBC_UART_RX[i]);
 8001038:	4aa5      	ldr	r2, [pc, #660]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	48a5      	ldr	r0, [pc, #660]	; (80012d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001044:	f7ff fbf8 	bl	8000838 <myDebug>
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	3301      	adds	r3, #1
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	2b53      	cmp	r3, #83	; 0x53
 8001052:	d9f1      	bls.n	8001038 <HAL_UART_RxCpltCallback+0x44>
				}
				myDebug("\r\n");
 8001054:	48a1      	ldr	r0, [pc, #644]	; (80012dc <HAL_UART_RxCpltCallback+0x2e8>)
 8001056:	f7ff fbef 	bl	8000838 <myDebug>

				packetLen = 0;
 800105a:	4ba1      	ldr	r3, [pc, #644]	; (80012e0 <HAL_UART_RxCpltCallback+0x2ec>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
				packetLen = AX_25PacketFormation(OBC_UART_RX);
 8001060:	489b      	ldr	r0, [pc, #620]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 8001062:	f7ff fab1 	bl	80005c8 <AX_25PacketFormation>
 8001066:	4603      	mov	r3, r0
 8001068:	4a9d      	ldr	r2, [pc, #628]	; (80012e0 <HAL_UART_RxCpltCallback+0x2ec>)
 800106a:	6013      	str	r3, [r2, #0]
				myDebug("\nAX.25 packet_buffer: 0x%x\r\n", tx_cmd);
 800106c:	499d      	ldr	r1, [pc, #628]	; (80012e4 <HAL_UART_RxCpltCallback+0x2f0>)
 800106e:	489e      	ldr	r0, [pc, #632]	; (80012e8 <HAL_UART_RxCpltCallback+0x2f4>)
 8001070:	f7ff fbe2 	bl	8000838 <myDebug>
				myDebug("Tx_Buffer Length: %d\r\n", packetLen);
 8001074:	4b9a      	ldr	r3, [pc, #616]	; (80012e0 <HAL_UART_RxCpltCallback+0x2ec>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	489c      	ldr	r0, [pc, #624]	; (80012ec <HAL_UART_RxCpltCallback+0x2f8>)
 800107c:	f7ff fbdc 	bl	8000838 <myDebug>
				for (int i = 0; i < packetLen; i++) {
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	e00a      	b.n	800109c <HAL_UART_RxCpltCallback+0xa8>
					myDebug("%02x ", tx_cmd[i]);
 8001086:	4a97      	ldr	r2, [pc, #604]	; (80012e4 <HAL_UART_RxCpltCallback+0x2f0>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	4891      	ldr	r0, [pc, #580]	; (80012d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001092:	f7ff fbd1 	bl	8000838 <myDebug>
				for (int i = 0; i < packetLen; i++) {
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	3301      	adds	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	4b90      	ldr	r3, [pc, #576]	; (80012e0 <HAL_UART_RxCpltCallback+0x2ec>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbef      	blt.n	8001086 <HAL_UART_RxCpltCallback+0x92>
				}
				myDebug("\r\n");
 80010a6:	488d      	ldr	r0, [pc, #564]	; (80012dc <HAL_UART_RxCpltCallback+0x2e8>)
 80010a8:	f7ff fbc6 	bl	8000838 <myDebug>

				myDebug("Packet Type: %02x \n", tx_cmd[19]);
 80010ac:	4b8d      	ldr	r3, [pc, #564]	; (80012e4 <HAL_UART_RxCpltCallback+0x2f0>)
 80010ae:	7cdb      	ldrb	r3, [r3, #19]
 80010b0:	4619      	mov	r1, r3
 80010b2:	488f      	ldr	r0, [pc, #572]	; (80012f0 <HAL_UART_RxCpltCallback+0x2fc>)
 80010b4:	f7ff fbc0 	bl	8000838 <myDebug>

				memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 80010b8:	2254      	movs	r2, #84	; 0x54
 80010ba:	2100      	movs	r1, #0
 80010bc:	4884      	ldr	r0, [pc, #528]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 80010be:	f009 fd75 	bl	800abac <memset>

				pkt_params.PacketType = PACKET_TYPE_GFSK;
 80010c2:	4b8c      	ldr	r3, [pc, #560]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
				pkt_params.Params.Gfsk.PayloadLength = PAYLOAD_LENGTH;
 80010c8:	4b8a      	ldr	r3, [pc, #552]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80010ca:	2267      	movs	r2, #103	; 0x67
 80010cc:	721a      	strb	r2, [r3, #8]
				pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 80010ce:	4b89      	ldr	r3, [pc, #548]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80010d0:	2208      	movs	r2, #8
 80010d2:	805a      	strh	r2, [r3, #2]
				pkt_params.Params.Gfsk.PreambleMinDetect =
 80010d4:	4b87      	ldr	r3, [pc, #540]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80010d6:	2204      	movs	r2, #4
 80010d8:	711a      	strb	r2, [r3, #4]
						RADIO_PREAMBLE_DETECTOR_08_BITS;
				pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80010da:	4b86      	ldr	r3, [pc, #536]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80010dc:	2218      	movs	r2, #24
 80010de:	715a      	strb	r2, [r3, #5]
				pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80010e0:	4b84      	ldr	r3, [pc, #528]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	719a      	strb	r2, [r3, #6]
				pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80010e6:	4b83      	ldr	r3, [pc, #524]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	71da      	strb	r2, [r3, #7]
				pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80010ec:	4b81      	ldr	r3, [pc, #516]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80010ee:	22f2      	movs	r2, #242	; 0xf2
 80010f0:	725a      	strb	r2, [r3, #9]
				pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80010f2:	4b80      	ldr	r3, [pc, #512]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	729a      	strb	r2, [r3, #10]

				mod_params.PacketType = PACKET_TYPE_GFSK;
 80010f8:	4b7f      	ldr	r3, [pc, #508]	; (80012f8 <HAL_UART_RxCpltCallback+0x304>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
				mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 80010fe:	4b7e      	ldr	r3, [pc, #504]	; (80012f8 <HAL_UART_RxCpltCallback+0x304>)
 8001100:	220d      	movs	r2, #13
 8001102:	735a      	strb	r2, [r3, #13]
				mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 8001104:	4b7c      	ldr	r3, [pc, #496]	; (80012f8 <HAL_UART_RxCpltCallback+0x304>)
 8001106:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800110a:	605a      	str	r2, [r3, #4]
				mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 800110c:	4b7a      	ldr	r3, [pc, #488]	; (80012f8 <HAL_UART_RxCpltCallback+0x304>)
 800110e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001112:	609a      	str	r2, [r3, #8]
				mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8001114:	4b78      	ldr	r3, [pc, #480]	; (80012f8 <HAL_UART_RxCpltCallback+0x304>)
 8001116:	220b      	movs	r2, #11
 8001118:	731a      	strb	r2, [r3, #12]

				SUBGRF_Init(DioIrqHndlr);
 800111a:	4878      	ldr	r0, [pc, #480]	; (80012fc <HAL_UART_RxCpltCallback+0x308>)
 800111c:	f007 ff3e 	bl	8008f9c <SUBGRF_Init>
				SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8001120:	2100      	movs	r1, #0
 8001122:	2000      	movs	r0, #0
 8001124:	f008 fda6 	bl	8009c74 <SUBGRF_SetBufferBaseAddress>
				SUBGRF_SetPayload(tx_cmd, PAYLOAD_LENGTH);
 8001128:	2167      	movs	r1, #103	; 0x67
 800112a:	486e      	ldr	r0, [pc, #440]	; (80012e4 <HAL_UART_RxCpltCallback+0x2f0>)
 800112c:	f007 ff88 	bl	8009040 <SUBGRF_SetPayload>
				SUBGRF_SetPacketParams(&pkt_params);
 8001130:	4870      	ldr	r0, [pc, #448]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 8001132:	f008 fd01 	bl	8009b38 <SUBGRF_SetPacketParams>
				SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00,
 8001136:	4a72      	ldr	r2, [pc, #456]	; (8001300 <HAL_UART_RxCpltCallback+0x30c>)
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001140:	e883 0003 	stmia.w	r3, {r0, r1}
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4618      	mov	r0, r3
 800114a:	f007 ffbe 	bl	80090ca <SUBGRF_SetSyncWord>
								0x00, 0x00, 0x00 });
				SUBGRF_SetWhiteningSeed(0x01FF);
 800114e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001152:	f008 f809 	bl	8009168 <SUBGRF_SetWhiteningSeed>
				SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001156:	486b      	ldr	r0, [pc, #428]	; (8001304 <HAL_UART_RxCpltCallback+0x310>)
 8001158:	f008 fae2 	bl	8009720 <SUBGRF_SetRfFrequency>
				SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 800115c:	2301      	movs	r3, #1
 800115e:	2201      	movs	r2, #1
 8001160:	2100      	movs	r1, #0
 8001162:	2004      	movs	r0, #4
 8001164:	f008 fa5e 	bl	8009624 <SUBGRF_SetPaConfig>
				//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
				SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 8001168:	2202      	movs	r2, #2
 800116a:	210e      	movs	r1, #14
 800116c:	2001      	movs	r0, #1
 800116e:	f008 fb43 	bl	80097f8 <SUBGRF_SetTxParams>
				SUBGRF_SetModulationParams(&mod_params);
 8001172:	4861      	ldr	r0, [pc, #388]	; (80012f8 <HAL_UART_RxCpltCallback+0x304>)
 8001174:	f008 fc0e 	bl	8009994 <SUBGRF_SetModulationParams>
				SUBGRF_SetDioIrqParams(
 8001178:	2300      	movs	r3, #0
 800117a:	2200      	movs	r2, #0
 800117c:	f240 210f 	movw	r1, #527	; 0x20f
 8001180:	f240 200f 	movw	r0, #527	; 0x20f
 8001184:	f008 fa70 	bl	8009668 <SUBGRF_SetDioIrqParams>
								| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
						IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
								| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
						IRQ_RADIO_NONE, IRQ_RADIO_NONE);

				myDebug("\n########## TX Configuration: ##########\n");
 8001188:	485f      	ldr	r0, [pc, #380]	; (8001308 <HAL_UART_RxCpltCallback+0x314>)
 800118a:	f7ff fb55 	bl	8000838 <myDebug>

				myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 800118e:	495d      	ldr	r1, [pc, #372]	; (8001304 <HAL_UART_RxCpltCallback+0x310>)
 8001190:	485e      	ldr	r0, [pc, #376]	; (800130c <HAL_UART_RxCpltCallback+0x318>)
 8001192:	f7ff fb51 	bl	8000838 <myDebug>
				FREQ_437_MHZ);
				myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001196:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <HAL_UART_RxCpltCallback+0x304>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4619      	mov	r1, r3
 800119c:	485c      	ldr	r0, [pc, #368]	; (8001310 <HAL_UART_RxCpltCallback+0x31c>)
 800119e:	f7ff fb4b 	bl	8000838 <myDebug>
				myDebug("Frequency Deviation: 	%d\n\r",
 80011a2:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <HAL_UART_RxCpltCallback+0x304>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	4619      	mov	r1, r3
 80011a8:	485a      	ldr	r0, [pc, #360]	; (8001314 <HAL_UART_RxCpltCallback+0x320>)
 80011aa:	f7ff fb45 	bl	8000838 <myDebug>
						mod_params.Params.Gfsk.Fdev);
				myDebug("RECEVING BANDWIDTH: 	%d\n\r",
						mod_params.Params.Gfsk.Bandwidth);
 80011ae:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <HAL_UART_RxCpltCallback+0x304>)
 80011b0:	7b5b      	ldrb	r3, [r3, #13]
				myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80011b2:	4619      	mov	r1, r3
 80011b4:	4858      	ldr	r0, [pc, #352]	; (8001318 <HAL_UART_RxCpltCallback+0x324>)
 80011b6:	f7ff fb3f 	bl	8000838 <myDebug>
				myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80011ba:	4b4e      	ldr	r3, [pc, #312]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	4856      	ldr	r0, [pc, #344]	; (800131c <HAL_UART_RxCpltCallback+0x328>)
 80011c2:	f7ff fb39 	bl	8000838 <myDebug>
				myDebug("PayloadLength 			%d\n\r",
						pkt_params.Params.Gfsk.PayloadLength);
 80011c6:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80011c8:	7a1b      	ldrb	r3, [r3, #8]
				myDebug("PayloadLength 			%d\n\r",
 80011ca:	4619      	mov	r1, r3
 80011cc:	4854      	ldr	r0, [pc, #336]	; (8001320 <HAL_UART_RxCpltCallback+0x32c>)
 80011ce:	f7ff fb33 	bl	8000838 <myDebug>
				myDebug("PreambleLength 		%d\n\r",
						pkt_params.Params.Gfsk.PreambleLength);
 80011d2:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80011d4:	885b      	ldrh	r3, [r3, #2]
				myDebug("PreambleLength 		%d\n\r",
 80011d6:	4619      	mov	r1, r3
 80011d8:	4852      	ldr	r0, [pc, #328]	; (8001324 <HAL_UART_RxCpltCallback+0x330>)
 80011da:	f7ff fb2d 	bl	8000838 <myDebug>
				myDebug("PreambleMinDetect		%d\n\r",
						pkt_params.Params.Gfsk.PreambleMinDetect);
 80011de:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80011e0:	791b      	ldrb	r3, [r3, #4]
				myDebug("PreambleMinDetect		%d\n\r",
 80011e2:	4619      	mov	r1, r3
 80011e4:	4850      	ldr	r0, [pc, #320]	; (8001328 <HAL_UART_RxCpltCallback+0x334>)
 80011e6:	f7ff fb27 	bl	8000838 <myDebug>
				myDebug("HeaderType 			%d\n\r",
						pkt_params.Params.Gfsk.HeaderType);
 80011ea:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <HAL_UART_RxCpltCallback+0x300>)
 80011ec:	79db      	ldrb	r3, [r3, #7]
				myDebug("HeaderType 			%d\n\r",
 80011ee:	4619      	mov	r1, r3
 80011f0:	484e      	ldr	r0, [pc, #312]	; (800132c <HAL_UART_RxCpltCallback+0x338>)
 80011f2:	f7ff fb21 	bl	8000838 <myDebug>
				myDebug("__________*******************__________\r\n");
 80011f6:	484e      	ldr	r0, [pc, #312]	; (8001330 <HAL_UART_RxCpltCallback+0x33c>)
 80011f8:	f7ff fb1e 	bl	8000838 <myDebug>

				SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 80011fc:	4841      	ldr	r0, [pc, #260]	; (8001304 <HAL_UART_RxCpltCallback+0x310>)
 80011fe:	f008 fa8f 	bl	8009720 <SUBGRF_SetRfFrequency>
				//SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
				SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 8001202:	2101      	movs	r1, #1
 8001204:	2001      	movs	r0, #1
 8001206:	f008 fed3 	bl	8009fb0 <SUBGRF_SetSwitch>
				SUBGRF_SendPayload(tx_cmd, p_len, 0);
 800120a:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <HAL_UART_RxCpltCallback+0x340>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	4619      	mov	r1, r3
 8001212:	4834      	ldr	r0, [pc, #208]	; (80012e4 <HAL_UART_RxCpltCallback+0x2f0>)
 8001214:	f007 ff46 	bl	80090a4 <SUBGRF_SendPayload>
			if (DIGIPEATER_STATUS == 1 && OBC_SUCCESS_DATA_RX_FLAG == 0) {
 8001218:	e044      	b.n	80012a4 <HAL_UART_RxCpltCallback+0x2b0>

			} else {
				myDebug("\n--> Command Received from OBC: 0x%x\r\n",
 800121a:	492d      	ldr	r1, [pc, #180]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 800121c:	4846      	ldr	r0, [pc, #280]	; (8001338 <HAL_UART_RxCpltCallback+0x344>)
 800121e:	f7ff fb0b 	bl	8000838 <myDebug>
						OBC_UART_RX);
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	e00a      	b.n	800123e <HAL_UART_RxCpltCallback+0x24a>
					myDebug("%02x ", OBC_UART_RX[i]);
 8001228:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	4829      	ldr	r0, [pc, #164]	; (80012d8 <HAL_UART_RxCpltCallback+0x2e4>)
 8001234:	f7ff fb00 	bl	8000838 <myDebug>
				for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b53      	cmp	r3, #83	; 0x53
 8001242:	d9f1      	bls.n	8001228 <HAL_UART_RxCpltCallback+0x234>
				}
				myDebug("\r\n");
 8001244:	4825      	ldr	r0, [pc, #148]	; (80012dc <HAL_UART_RxCpltCallback+0x2e8>)
 8001246:	f7ff faf7 	bl	8000838 <myDebug>
				if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b53      	cmp	r3, #83	; 0x53
 8001250:	d10e      	bne.n	8001270 <HAL_UART_RxCpltCallback+0x27c>
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 8001254:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001258:	2b7e      	cmp	r3, #126	; 0x7e
 800125a:	d109      	bne.n	8001270 <HAL_UART_RxCpltCallback+0x27c>
					myDebug("--> Correct command received from OBC\n");
 800125c:	4837      	ldr	r0, [pc, #220]	; (800133c <HAL_UART_RxCpltCallback+0x348>)
 800125e:	f7ff faeb 	bl	8000838 <myDebug>
					OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_UART_RxCpltCallback+0x2d4>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]
					DIGIPEATER_STATUS = 0;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_UART_RxCpltCallback+0x2d0>)
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e019      	b.n	80012a4 <HAL_UART_RxCpltCallback+0x2b0>
				} else {
					myDebug("*** Incorrect command received from OBC\n");
 8001270:	4833      	ldr	r0, [pc, #204]	; (8001340 <HAL_UART_RxCpltCallback+0x34c>)
 8001272:	f7ff fae1 	bl	8000838 <myDebug>
					if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 2000)
 8001276:	4b33      	ldr	r3, [pc, #204]	; (8001344 <HAL_UART_RxCpltCallback+0x350>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b29a      	uxth	r2, r3
 800127c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001280:	4913      	ldr	r1, [pc, #76]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <HAL_UART_RxCpltCallback+0x2c8>)
 8001284:	f004 fa44 	bl	8005710 <HAL_UART_Transmit>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10a      	bne.n	80012a4 <HAL_UART_RxCpltCallback+0x2b0>
							== HAL_OK) {
						myDebug("*** Incorrect command re-transmit to OBC\n");
 800128e:	482e      	ldr	r0, [pc, #184]	; (8001348 <HAL_UART_RxCpltCallback+0x354>)
 8001290:	f7ff fad2 	bl	8000838 <myDebug>
						memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8001294:	2254      	movs	r2, #84	; 0x54
 8001296:	2100      	movs	r1, #0
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 800129a:	f009 fc87 	bl	800abac <memset>
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_UART_RxCpltCallback+0x2d4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
					}
				}
			}

			HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <HAL_UART_RxCpltCallback+0x350>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	4908      	ldr	r1, [pc, #32]	; (80012d0 <HAL_UART_RxCpltCallback+0x2dc>)
 80012ae:	4803      	ldr	r0, [pc, #12]	; (80012bc <HAL_UART_RxCpltCallback+0x2c8>)
 80012b0:	f004 fb78 	bl	80059a4 <HAL_UART_Receive_DMA>
		}
	}
}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200003b0 	.word	0x200003b0
 80012c0:	20000168 	.word	0x20000168
 80012c4:	20000170 	.word	0x20000170
 80012c8:	2000016c 	.word	0x2000016c
 80012cc:	20000174 	.word	0x20000174
 80012d0:	20000178 	.word	0x20000178
 80012d4:	0800b8bc 	.word	0x0800b8bc
 80012d8:	0800b75c 	.word	0x0800b75c
 80012dc:	0800b764 	.word	0x0800b764
 80012e0:	20000260 	.word	0x20000260
 80012e4:	200001cc 	.word	0x200001cc
 80012e8:	0800b724 	.word	0x0800b724
 80012ec:	0800b744 	.word	0x0800b744
 80012f0:	0800b768 	.word	0x0800b768
 80012f4:	20000138 	.word	0x20000138
 80012f8:	2000014c 	.word	0x2000014c
 80012fc:	0800134d 	.word	0x0800134d
 8001300:	0800b8b4 	.word	0x0800b8b4
 8001304:	1a11d018 	.word	0x1a11d018
 8001308:	0800b77c 	.word	0x0800b77c
 800130c:	0800b7a8 	.word	0x0800b7a8
 8001310:	0800b7d0 	.word	0x0800b7d0
 8001314:	0800b7e0 	.word	0x0800b7e0
 8001318:	0800b7fc 	.word	0x0800b7fc
 800131c:	0800b818 	.word	0x0800b818
 8001320:	0800b82c 	.word	0x0800b82c
 8001324:	0800b844 	.word	0x0800b844
 8001328:	0800b85c 	.word	0x0800b85c
 800132c:	0800b874 	.word	0x0800b874
 8001330:	0800b888 	.word	0x0800b888
 8001334:	20000005 	.word	0x20000005
 8001338:	0800b8ec 	.word	0x0800b8ec
 800133c:	0800b914 	.word	0x0800b914
 8001340:	0800b93c 	.word	0x0800b93c
 8001344:	20000004 	.word	0x20000004
 8001348:	0800b968 	.word	0x0800b968

0800134c <DioIrqHndlr>:

void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_TX_DONE) {
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	2b01      	cmp	r3, #1
 800135a:	f040 8105 	bne.w	8001568 <DioIrqHndlr+0x21c>
		OBC_SUCCESS_DATA_RX_FLAG = 0;
 800135e:	4bae      	ldr	r3, [pc, #696]	; (8001618 <DioIrqHndlr+0x2cc>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
		myDebug("\n\rCommand Transmitted Successful:  \r");
 8001364:	48ad      	ldr	r0, [pc, #692]	; (800161c <DioIrqHndlr+0x2d0>)
 8001366:	f7ff fa67 	bl	8000838 <myDebug>
		for (int i = 0; i < PAYLOAD_LENGTH; i++) {
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	e00a      	b.n	8001386 <DioIrqHndlr+0x3a>
			myDebug("%02x ", tx_cmd[i]);
 8001370:	4aab      	ldr	r2, [pc, #684]	; (8001620 <DioIrqHndlr+0x2d4>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	48aa      	ldr	r0, [pc, #680]	; (8001624 <DioIrqHndlr+0x2d8>)
 800137c:	f7ff fa5c 	bl	8000838 <myDebug>
		for (int i = 0; i < PAYLOAD_LENGTH; i++) {
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	3301      	adds	r3, #1
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	2b66      	cmp	r3, #102	; 0x66
 800138a:	ddf1      	ble.n	8001370 <DioIrqHndlr+0x24>
		}
		myDebug("\n\n");
 800138c:	48a6      	ldr	r0, [pc, #664]	; (8001628 <DioIrqHndlr+0x2dc>)
 800138e:	f7ff fa53 	bl	8000838 <myDebug>

		if (tx_cmd[19] == 0x01 || tx_cmd[19] == 0x02) {
 8001392:	4ba3      	ldr	r3, [pc, #652]	; (8001620 <DioIrqHndlr+0x2d4>)
 8001394:	7cdb      	ldrb	r3, [r3, #19]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d003      	beq.n	80013a2 <DioIrqHndlr+0x56>
 800139a:	4ba1      	ldr	r3, [pc, #644]	; (8001620 <DioIrqHndlr+0x2d4>)
 800139c:	7cdb      	ldrb	r3, [r3, #19]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d104      	bne.n	80013ac <DioIrqHndlr+0x60>
			BEACON_COUNT--;
 80013a2:	4ba2      	ldr	r3, [pc, #648]	; (800162c <DioIrqHndlr+0x2e0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	4aa0      	ldr	r2, [pc, #640]	; (800162c <DioIrqHndlr+0x2e0>)
 80013aa:	6013      	str	r3, [r2, #0]
		}

		if (BEACON_COUNT == 0) {
 80013ac:	4b9f      	ldr	r3, [pc, #636]	; (800162c <DioIrqHndlr+0x2e0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d108      	bne.n	80013c6 <DioIrqHndlr+0x7a>
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 80013b4:	4b98      	ldr	r3, [pc, #608]	; (8001618 <DioIrqHndlr+0x2cc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 1;
 80013ba:	4b9d      	ldr	r3, [pc, #628]	; (8001630 <DioIrqHndlr+0x2e4>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]
			myDebug("########## Digipeater Mode Configuration: ##########\n");
 80013c0:	489c      	ldr	r0, [pc, #624]	; (8001634 <DioIrqHndlr+0x2e8>)
 80013c2:	f7ff fa39 	bl	8000838 <myDebug>
		}

		delay_us(500000);
 80013c6:	489c      	ldr	r0, [pc, #624]	; (8001638 <DioIrqHndlr+0x2ec>)
 80013c8:	f7ff fa1c 	bl	8000804 <delay_us>

		if (DIGIPEATER_FLAG == 1) {
 80013cc:	4b9b      	ldr	r3, [pc, #620]	; (800163c <DioIrqHndlr+0x2f0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d111      	bne.n	80013f8 <DioIrqHndlr+0xac>
			myDebug("########## End of Mission ##########\r\n");
 80013d4:	489a      	ldr	r0, [pc, #616]	; (8001640 <DioIrqHndlr+0x2f4>)
 80013d6:	f7ff fa2f 	bl	8000838 <myDebug>
			myDebug("_____Sending___EOM_____ ##########\r\n");
 80013da:	489a      	ldr	r0, [pc, #616]	; (8001644 <DioIrqHndlr+0x2f8>)
 80013dc:	f7ff fa2c 	bl	8000838 <myDebug>
			EOM();
 80013e0:	f7ff fbc0 	bl	8000b64 <EOM>
			myDebug("########## REBOOTING___SYSTEM_____##########\r\n\n\n\n");
 80013e4:	4898      	ldr	r0, [pc, #608]	; (8001648 <DioIrqHndlr+0x2fc>)
 80013e6:	f7ff fa27 	bl	8000838 <myDebug>
			DIGIPEATER_FLAG = 0;
 80013ea:	4b94      	ldr	r3, [pc, #592]	; (800163c <DioIrqHndlr+0x2f0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
			delay_us(1000000);
 80013f0:	4896      	ldr	r0, [pc, #600]	; (800164c <DioIrqHndlr+0x300>)
 80013f2:	f7ff fa07 	bl	8000804 <delay_us>
 80013f6:	e0af      	b.n	8001558 <DioIrqHndlr+0x20c>
		} else {

			memset(tx_cmd, '\0', sizeof(tx_cmd));
 80013f8:	2267      	movs	r2, #103	; 0x67
 80013fa:	2100      	movs	r1, #0
 80013fc:	4888      	ldr	r0, [pc, #544]	; (8001620 <DioIrqHndlr+0x2d4>)
 80013fe:	f009 fbd5 	bl	800abac <memset>

			pkt_params.PacketType = PACKET_TYPE_GFSK;
 8001402:	4b93      	ldr	r3, [pc, #588]	; (8001650 <DioIrqHndlr+0x304>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
			pkt_params.Params.Gfsk.PayloadLength = GS_CMD_LENGTH;
 8001408:	4b91      	ldr	r3, [pc, #580]	; (8001650 <DioIrqHndlr+0x304>)
 800140a:	2223      	movs	r2, #35	; 0x23
 800140c:	721a      	strb	r2, [r3, #8]
			pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 800140e:	4b90      	ldr	r3, [pc, #576]	; (8001650 <DioIrqHndlr+0x304>)
 8001410:	2208      	movs	r2, #8
 8001412:	805a      	strh	r2, [r3, #2]
			pkt_params.Params.Gfsk.PreambleMinDetect =
 8001414:	4b8e      	ldr	r3, [pc, #568]	; (8001650 <DioIrqHndlr+0x304>)
 8001416:	2204      	movs	r2, #4
 8001418:	711a      	strb	r2, [r3, #4]
					RADIO_PREAMBLE_DETECTOR_08_BITS;
			pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800141a:	4b8d      	ldr	r3, [pc, #564]	; (8001650 <DioIrqHndlr+0x304>)
 800141c:	2218      	movs	r2, #24
 800141e:	715a      	strb	r2, [r3, #5]
			pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8001420:	4b8b      	ldr	r3, [pc, #556]	; (8001650 <DioIrqHndlr+0x304>)
 8001422:	2200      	movs	r2, #0
 8001424:	719a      	strb	r2, [r3, #6]
			pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8001426:	4b8a      	ldr	r3, [pc, #552]	; (8001650 <DioIrqHndlr+0x304>)
 8001428:	2200      	movs	r2, #0
 800142a:	71da      	strb	r2, [r3, #7]
			pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800142c:	4b88      	ldr	r3, [pc, #544]	; (8001650 <DioIrqHndlr+0x304>)
 800142e:	22f2      	movs	r2, #242	; 0xf2
 8001430:	725a      	strb	r2, [r3, #9]
			pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8001432:	4b87      	ldr	r3, [pc, #540]	; (8001650 <DioIrqHndlr+0x304>)
 8001434:	2201      	movs	r2, #1
 8001436:	729a      	strb	r2, [r3, #10]

			mod_params.PacketType = PACKET_TYPE_GFSK;
 8001438:	4b86      	ldr	r3, [pc, #536]	; (8001654 <DioIrqHndlr+0x308>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
			mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 800143e:	4b85      	ldr	r3, [pc, #532]	; (8001654 <DioIrqHndlr+0x308>)
 8001440:	220d      	movs	r2, #13
 8001442:	735a      	strb	r2, [r3, #13]
			mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR_1200;
 8001444:	4b83      	ldr	r3, [pc, #524]	; (8001654 <DioIrqHndlr+0x308>)
 8001446:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800144a:	605a      	str	r2, [r3, #4]
			mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV_1200;
 800144c:	4b81      	ldr	r3, [pc, #516]	; (8001654 <DioIrqHndlr+0x308>)
 800144e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001452:	609a      	str	r2, [r3, #8]
			mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8001454:	4b7f      	ldr	r3, [pc, #508]	; (8001654 <DioIrqHndlr+0x308>)
 8001456:	220b      	movs	r2, #11
 8001458:	731a      	strb	r2, [r3, #12]

			SUBGRF_Init(DioIrqHndlr);
 800145a:	487f      	ldr	r0, [pc, #508]	; (8001658 <DioIrqHndlr+0x30c>)
 800145c:	f007 fd9e 	bl	8008f9c <SUBGRF_Init>
			SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8001460:	2100      	movs	r1, #0
 8001462:	2000      	movs	r0, #0
 8001464:	f008 fc06 	bl	8009c74 <SUBGRF_SetBufferBaseAddress>
			SUBGRF_SetPayload(rx_cmd, GS_CMD_LENGTH);
 8001468:	2123      	movs	r1, #35	; 0x23
 800146a:	487c      	ldr	r0, [pc, #496]	; (800165c <DioIrqHndlr+0x310>)
 800146c:	f007 fde8 	bl	8009040 <SUBGRF_SetPayload>
			SUBGRF_SetPacketParams(&pkt_params);
 8001470:	4877      	ldr	r0, [pc, #476]	; (8001650 <DioIrqHndlr+0x304>)
 8001472:	f008 fb61 	bl	8009b38 <SUBGRF_SetPacketParams>
			SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00,
 8001476:	4a7a      	ldr	r2, [pc, #488]	; (8001660 <DioIrqHndlr+0x314>)
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001480:	e883 0003 	stmia.w	r3, {r0, r1}
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4618      	mov	r0, r3
 800148a:	f007 fe1e 	bl	80090ca <SUBGRF_SetSyncWord>
							0x00, 0x00, 0x00 });
			SUBGRF_SetWhiteningSeed(0x01FF);
 800148e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001492:	f007 fe69 	bl	8009168 <SUBGRF_SetWhiteningSeed>
			SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8001496:	4873      	ldr	r0, [pc, #460]	; (8001664 <DioIrqHndlr+0x318>)
 8001498:	f008 f942 	bl	8009720 <SUBGRF_SetRfFrequency>
			SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 800149c:	2301      	movs	r3, #1
 800149e:	2201      	movs	r2, #1
 80014a0:	2100      	movs	r1, #0
 80014a2:	2004      	movs	r0, #4
 80014a4:	f008 f8be 	bl	8009624 <SUBGRF_SetPaConfig>
			//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
			SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 80014a8:	2202      	movs	r2, #2
 80014aa:	210e      	movs	r1, #14
 80014ac:	2001      	movs	r0, #1
 80014ae:	f008 f9a3 	bl	80097f8 <SUBGRF_SetTxParams>
			SUBGRF_SetModulationParams(&mod_params);
 80014b2:	4868      	ldr	r0, [pc, #416]	; (8001654 <DioIrqHndlr+0x308>)
 80014b4:	f008 fa6e 	bl	8009994 <SUBGRF_SetModulationParams>
			SUBGRF_SetDioIrqParams(
 80014b8:	2300      	movs	r3, #0
 80014ba:	2200      	movs	r2, #0
 80014bc:	f240 210f 	movw	r1, #527	; 0x20f
 80014c0:	f240 200f 	movw	r0, #527	; 0x20f
 80014c4:	f008 f8d0 	bl	8009668 <SUBGRF_SetDioIrqParams>
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_RADIO_NONE, IRQ_RADIO_NONE);

			myDebug("########## RX Configuration: ##########\n");
 80014c8:	4867      	ldr	r0, [pc, #412]	; (8001668 <DioIrqHndlr+0x31c>)
 80014ca:	f7ff f9b5 	bl	8000838 <myDebug>

			myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 80014ce:	4965      	ldr	r1, [pc, #404]	; (8001664 <DioIrqHndlr+0x318>)
 80014d0:	4866      	ldr	r0, [pc, #408]	; (800166c <DioIrqHndlr+0x320>)
 80014d2:	f7ff f9b1 	bl	8000838 <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80014d6:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <DioIrqHndlr+0x308>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4619      	mov	r1, r3
 80014dc:	4864      	ldr	r0, [pc, #400]	; (8001670 <DioIrqHndlr+0x324>)
 80014de:	f7ff f9ab 	bl	8000838 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 80014e2:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <DioIrqHndlr+0x308>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	4619      	mov	r1, r3
 80014e8:	4862      	ldr	r0, [pc, #392]	; (8001674 <DioIrqHndlr+0x328>)
 80014ea:	f7ff f9a5 	bl	8000838 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 80014ee:	4b59      	ldr	r3, [pc, #356]	; (8001654 <DioIrqHndlr+0x308>)
 80014f0:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80014f2:	4619      	mov	r1, r3
 80014f4:	4860      	ldr	r0, [pc, #384]	; (8001678 <DioIrqHndlr+0x32c>)
 80014f6:	f7ff f99f 	bl	8000838 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80014fa:	4b55      	ldr	r3, [pc, #340]	; (8001650 <DioIrqHndlr+0x304>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	485e      	ldr	r0, [pc, #376]	; (800167c <DioIrqHndlr+0x330>)
 8001502:	f7ff f999 	bl	8000838 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8001506:	4b52      	ldr	r3, [pc, #328]	; (8001650 <DioIrqHndlr+0x304>)
 8001508:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 800150a:	4619      	mov	r1, r3
 800150c:	485c      	ldr	r0, [pc, #368]	; (8001680 <DioIrqHndlr+0x334>)
 800150e:	f7ff f993 	bl	8000838 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8001512:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <DioIrqHndlr+0x304>)
 8001514:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8001516:	4619      	mov	r1, r3
 8001518:	485a      	ldr	r0, [pc, #360]	; (8001684 <DioIrqHndlr+0x338>)
 800151a:	f7ff f98d 	bl	8000838 <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 800151e:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <DioIrqHndlr+0x304>)
 8001520:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 8001522:	4619      	mov	r1, r3
 8001524:	4858      	ldr	r0, [pc, #352]	; (8001688 <DioIrqHndlr+0x33c>)
 8001526:	f7ff f987 	bl	8000838 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 800152a:	4b49      	ldr	r3, [pc, #292]	; (8001650 <DioIrqHndlr+0x304>)
 800152c:	79db      	ldrb	r3, [r3, #7]
 800152e:	4619      	mov	r1, r3
 8001530:	4856      	ldr	r0, [pc, #344]	; (800168c <DioIrqHndlr+0x340>)
 8001532:	f7ff f981 	bl	8000838 <myDebug>
			myDebug("__________*******************__________\r\n");
 8001536:	4856      	ldr	r0, [pc, #344]	; (8001690 <DioIrqHndlr+0x344>)
 8001538:	f7ff f97e 	bl	8000838 <myDebug>

			myDebug("\n_____GS Receiver_____OR_____OBC Receiver_____\r\n");
 800153c:	4855      	ldr	r0, [pc, #340]	; (8001694 <DioIrqHndlr+0x348>)
 800153e:	f7ff f97b 	bl	8000838 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8001542:	4848      	ldr	r0, [pc, #288]	; (8001664 <DioIrqHndlr+0x318>)
 8001544:	f008 f8ec 	bl	8009720 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8001548:	2100      	movs	r1, #0
 800154a:	2001      	movs	r0, #1
 800154c:	f008 fd30 	bl	8009fb0 <SUBGRF_SetSwitch>
			SUBGRF_SetRxBoosted(0xFFFFFF);
 8001550:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001554:	f007 ff10 	bl	8009378 <SUBGRF_SetRxBoosted>
		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001558:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <DioIrqHndlr+0x34c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	494e      	ldr	r1, [pc, #312]	; (800169c <DioIrqHndlr+0x350>)
 8001562:	484f      	ldr	r0, [pc, #316]	; (80016a0 <DioIrqHndlr+0x354>)
 8001564:	f004 fa1e 	bl	80059a4 <HAL_UART_Receive_DMA>
	}

	if (radioIrq == IRQ_RX_DONE) {
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d14f      	bne.n	800160e <DioIrqHndlr+0x2c2>
		SUBGRF_GetPayload(rx_cmd, &gs_cmd_plen, GS_CMD_LENGTH);
 800156e:	2223      	movs	r2, #35	; 0x23
 8001570:	494c      	ldr	r1, [pc, #304]	; (80016a4 <DioIrqHndlr+0x358>)
 8001572:	483a      	ldr	r0, [pc, #232]	; (800165c <DioIrqHndlr+0x310>)
 8001574:	f007 fd74 	bl	8009060 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 8001578:	f008 fb93 	bl	8009ca2 <SUBGRF_GetRssiInst>
 800157c:	4603      	mov	r3, r0
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <DioIrqHndlr+0x35c>)
 8001582:	701a      	strb	r2, [r3, #0]
		myDebug("\nGS Command Received: 0x%x\r\n");
 8001584:	4849      	ldr	r0, [pc, #292]	; (80016ac <DioIrqHndlr+0x360>)
 8001586:	f7ff f957 	bl	8000838 <myDebug>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	e00a      	b.n	80015a6 <DioIrqHndlr+0x25a>
			myDebug("%02x ", rx_cmd[i]);
 8001590:	4a32      	ldr	r2, [pc, #200]	; (800165c <DioIrqHndlr+0x310>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	4822      	ldr	r0, [pc, #136]	; (8001624 <DioIrqHndlr+0x2d8>)
 800159c:	f7ff f94c 	bl	8000838 <myDebug>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	3301      	adds	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b22      	cmp	r3, #34	; 0x22
 80015aa:	d9f1      	bls.n	8001590 <DioIrqHndlr+0x244>
		}
		myDebug("\r\n");
 80015ac:	4840      	ldr	r0, [pc, #256]	; (80016b0 <DioIrqHndlr+0x364>)
 80015ae:	f7ff f943 	bl	8000838 <myDebug>

		myDebug("Sending to OBC \r\n");
 80015b2:	4840      	ldr	r0, [pc, #256]	; (80016b4 <DioIrqHndlr+0x368>)
 80015b4:	f7ff f940 	bl	8000838 <myDebug>

		if (HAL_UART_Transmit(&huart2, rx_cmd, sizeof(rx_cmd), 2000)
 80015b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015bc:	2223      	movs	r2, #35	; 0x23
 80015be:	4927      	ldr	r1, [pc, #156]	; (800165c <DioIrqHndlr+0x310>)
 80015c0:	4837      	ldr	r0, [pc, #220]	; (80016a0 <DioIrqHndlr+0x354>)
 80015c2:	f004 f8a5 	bl	8005710 <HAL_UART_Transmit>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d118      	bne.n	80015fe <DioIrqHndlr+0x2b2>
				== HAL_OK) {
			for (int i = 0; i < sizeof(rx_cmd); i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e00a      	b.n	80015e8 <DioIrqHndlr+0x29c>
				myDebug("%02x ", rx_cmd[i]);
 80015d2:	4a22      	ldr	r2, [pc, #136]	; (800165c <DioIrqHndlr+0x310>)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4619      	mov	r1, r3
 80015dc:	4811      	ldr	r0, [pc, #68]	; (8001624 <DioIrqHndlr+0x2d8>)
 80015de:	f7ff f92b 	bl	8000838 <myDebug>
			for (int i = 0; i < sizeof(rx_cmd); i++) {
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b22      	cmp	r3, #34	; 0x22
 80015ec:	d9f1      	bls.n	80015d2 <DioIrqHndlr+0x286>
			}
			memset(rx_cmd, '\0', sizeof(rx_cmd));
 80015ee:	2223      	movs	r2, #35	; 0x23
 80015f0:	2100      	movs	r1, #0
 80015f2:	481a      	ldr	r0, [pc, #104]	; (800165c <DioIrqHndlr+0x310>)
 80015f4:	f009 fada 	bl	800abac <memset>

			myDebug("\n_____OBC__RECEIVER_____\r\n");
 80015f8:	482f      	ldr	r0, [pc, #188]	; (80016b8 <DioIrqHndlr+0x36c>)
 80015fa:	f7ff f91d 	bl	8000838 <myDebug>

		}
		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <DioIrqHndlr+0x34c>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	4925      	ldr	r1, [pc, #148]	; (800169c <DioIrqHndlr+0x350>)
 8001608:	4825      	ldr	r0, [pc, #148]	; (80016a0 <DioIrqHndlr+0x354>)
 800160a:	f004 f9cb 	bl	80059a4 <HAL_UART_Receive_DMA>
	}
}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000016c 	.word	0x2000016c
 800161c:	0800b994 	.word	0x0800b994
 8001620:	200001cc 	.word	0x200001cc
 8001624:	0800b75c 	.word	0x0800b75c
 8001628:	0800b9bc 	.word	0x0800b9bc
 800162c:	20000000 	.word	0x20000000
 8001630:	20000170 	.word	0x20000170
 8001634:	0800b9c0 	.word	0x0800b9c0
 8001638:	0007a120 	.word	0x0007a120
 800163c:	20000174 	.word	0x20000174
 8001640:	0800b9f8 	.word	0x0800b9f8
 8001644:	0800ba20 	.word	0x0800ba20
 8001648:	0800ba48 	.word	0x0800ba48
 800164c:	000f4240 	.word	0x000f4240
 8001650:	20000138 	.word	0x20000138
 8001654:	2000014c 	.word	0x2000014c
 8001658:	0800134d 	.word	0x0800134d
 800165c:	20000234 	.word	0x20000234
 8001660:	0800b8b4 	.word	0x0800b8b4
 8001664:	19f25968 	.word	0x19f25968
 8001668:	0800ba7c 	.word	0x0800ba7c
 800166c:	0800baa8 	.word	0x0800baa8
 8001670:	0800b7d0 	.word	0x0800b7d0
 8001674:	0800b7e0 	.word	0x0800b7e0
 8001678:	0800b7fc 	.word	0x0800b7fc
 800167c:	0800b818 	.word	0x0800b818
 8001680:	0800b82c 	.word	0x0800b82c
 8001684:	0800b844 	.word	0x0800b844
 8001688:	0800b85c 	.word	0x0800b85c
 800168c:	0800b874 	.word	0x0800b874
 8001690:	0800b888 	.word	0x0800b888
 8001694:	0800bad0 	.word	0x0800bad0
 8001698:	20000004 	.word	0x20000004
 800169c:	20000178 	.word	0x20000178
 80016a0:	200003b0 	.word	0x200003b0
 80016a4:	20000006 	.word	0x20000006
 80016a8:	2000025e 	.word	0x2000025e
 80016ac:	0800bb04 	.word	0x0800bb04
 80016b0:	0800b764 	.word	0x0800b764
 80016b4:	0800bb24 	.word	0x0800bb24
 80016b8:	0800bb38 	.word	0x0800bb38

080016bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <WAIT_FOR_HANDSHAKE>:
#define ACK_LENGTH	(6)

extern uint8_t OBC_HANDSHAKE_FLAG;
uint8_t MainCMDHs[ACK_LENGTH];

void WAIT_FOR_HANDSHAKE() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', sizeof(MainCMDHs));
 80016ce:	2206      	movs	r2, #6
 80016d0:	2100      	movs	r1, #0
 80016d2:	4850      	ldr	r0, [pc, #320]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 80016d4:	f009 fa6a 	bl	800abac <memset>
	OBC_HANDSHAKE_FLAG = 0;
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <WAIT_FOR_HANDSHAKE+0x150>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart2, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK) {
 80016de:	f641 3358 	movw	r3, #7000	; 0x1b58
 80016e2:	2206      	movs	r2, #6
 80016e4:	494b      	ldr	r1, [pc, #300]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 80016e6:	484d      	ldr	r0, [pc, #308]	; (800181c <WAIT_FOR_HANDSHAKE+0x154>)
 80016e8:	f004 f898 	bl	800581c <HAL_UART_Receive>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d17d      	bne.n	80017ee <WAIT_FOR_HANDSHAKE+0x126>
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 80016f2:	484b      	ldr	r0, [pc, #300]	; (8001820 <WAIT_FOR_HANDSHAKE+0x158>)
 80016f4:	f7ff f8a0 	bl	8000838 <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	e00a      	b.n	8001714 <WAIT_FOR_HANDSHAKE+0x4c>
			myDebug("%02x ", MainCMDHs[i]);
 80016fe:	4a45      	ldr	r2, [pc, #276]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4619      	mov	r1, r3
 8001708:	4846      	ldr	r0, [pc, #280]	; (8001824 <WAIT_FOR_HANDSHAKE+0x15c>)
 800170a:	f7ff f895 	bl	8000838 <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3301      	adds	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b05      	cmp	r3, #5
 8001718:	ddf1      	ble.n	80016fe <WAIT_FOR_HANDSHAKE+0x36>
		}
		myDebug("\n");
 800171a:	4843      	ldr	r0, [pc, #268]	; (8001828 <WAIT_FOR_HANDSHAKE+0x160>)
 800171c:	f7ff f88c 	bl	8000838 <myDebug>

		if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 8001720:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b53      	cmp	r3, #83	; 0x53
 8001726:	d133      	bne.n	8001790 <WAIT_FOR_HANDSHAKE+0xc8>
 8001728:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 800172a:	795b      	ldrb	r3, [r3, #5]
 800172c:	2b7e      	cmp	r3, #126	; 0x7e
 800172e:	d12f      	bne.n	8001790 <WAIT_FOR_HANDSHAKE+0xc8>
			myDebug("--> Command Acknowledged!\n");
 8001730:	483e      	ldr	r0, [pc, #248]	; (800182c <WAIT_FOR_HANDSHAKE+0x164>)
 8001732:	f7ff f881 	bl	8000838 <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8001736:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800173a:	2206      	movs	r2, #6
 800173c:	4935      	ldr	r1, [pc, #212]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 800173e:	4837      	ldr	r0, [pc, #220]	; (800181c <WAIT_FOR_HANDSHAKE+0x154>)
 8001740:	f003 ffe6 	bl	8005710 <HAL_UART_Transmit>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d15f      	bne.n	800180a <WAIT_FOR_HANDSHAKE+0x142>
					== HAL_OK) {
				myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 800174a:	4839      	ldr	r0, [pc, #228]	; (8001830 <WAIT_FOR_HANDSHAKE+0x168>)
 800174c:	f7ff f874 	bl	8000838 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	e00a      	b.n	800176c <WAIT_FOR_HANDSHAKE+0xa4>
					myDebug("%02x ", MainCMDHs[i]);
 8001756:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4619      	mov	r1, r3
 8001760:	4830      	ldr	r0, [pc, #192]	; (8001824 <WAIT_FOR_HANDSHAKE+0x15c>)
 8001762:	f7ff f869 	bl	8000838 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	3301      	adds	r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b05      	cmp	r3, #5
 8001770:	ddf1      	ble.n	8001756 <WAIT_FOR_HANDSHAKE+0x8e>
				}
				myDebug("\n");
 8001772:	482d      	ldr	r0, [pc, #180]	; (8001828 <WAIT_FOR_HANDSHAKE+0x160>)
 8001774:	f7ff f860 	bl	8000838 <myDebug>
				myDebug("_________Waiting Beacon_Type1 for TX_____\r\n");
 8001778:	482e      	ldr	r0, [pc, #184]	; (8001834 <WAIT_FOR_HANDSHAKE+0x16c>)
 800177a:	f7ff f85d 	bl	8000838 <myDebug>
				memset(MainCMDHs, '\0', sizeof(MainCMDHs));
 800177e:	2206      	movs	r2, #6
 8001780:	2100      	movs	r1, #0
 8001782:	4824      	ldr	r0, [pc, #144]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 8001784:	f009 fa12 	bl	800abac <memset>
				OBC_HANDSHAKE_FLAG = 1;
 8001788:	4b23      	ldr	r3, [pc, #140]	; (8001818 <WAIT_FOR_HANDSHAKE+0x150>)
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800178e:	e03c      	b.n	800180a <WAIT_FOR_HANDSHAKE+0x142>
			}
		} else {
			myDebug("*** Unknown Handshake command received!\n");
 8001790:	4829      	ldr	r0, [pc, #164]	; (8001838 <WAIT_FOR_HANDSHAKE+0x170>)
 8001792:	f7ff f851 	bl	8000838 <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8001796:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800179a:	2206      	movs	r2, #6
 800179c:	491d      	ldr	r1, [pc, #116]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 800179e:	481f      	ldr	r0, [pc, #124]	; (800181c <WAIT_FOR_HANDSHAKE+0x154>)
 80017a0:	f003 ffb6 	bl	8005710 <HAL_UART_Transmit>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d12f      	bne.n	800180a <WAIT_FOR_HANDSHAKE+0x142>
					== HAL_OK) {
				myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 80017aa:	4824      	ldr	r0, [pc, #144]	; (800183c <WAIT_FOR_HANDSHAKE+0x174>)
 80017ac:	f7ff f844 	bl	8000838 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	e00a      	b.n	80017cc <WAIT_FOR_HANDSHAKE+0x104>
					myDebug("%02x ", MainCMDHs[i]);
 80017b6:	4a17      	ldr	r2, [pc, #92]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4619      	mov	r1, r3
 80017c0:	4818      	ldr	r0, [pc, #96]	; (8001824 <WAIT_FOR_HANDSHAKE+0x15c>)
 80017c2:	f7ff f839 	bl	8000838 <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3301      	adds	r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	ddf1      	ble.n	80017b6 <WAIT_FOR_HANDSHAKE+0xee>
				}
				myDebug("\n");
 80017d2:	4815      	ldr	r0, [pc, #84]	; (8001828 <WAIT_FOR_HANDSHAKE+0x160>)
 80017d4:	f7ff f830 	bl	8000838 <myDebug>
				memset(MainCMDHs, '\0', sizeof(MainCMDHs));
 80017d8:	2206      	movs	r2, #6
 80017da:	2100      	movs	r1, #0
 80017dc:	480d      	ldr	r0, [pc, #52]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 80017de:	f009 f9e5 	bl	800abac <memset>
				OBC_HANDSHAKE_FLAG = 0;
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <WAIT_FOR_HANDSHAKE+0x150>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
				WAIT_FOR_HANDSHAKE();
 80017e8:	f7ff ff6e 	bl	80016c8 <WAIT_FOR_HANDSHAKE>
		OBC_HANDSHAKE_FLAG = 0;
		myDebug("*** Handshake Command receive failed, try again!\n");
		memset(MainCMDHs, '\0', sizeof(MainCMDHs));
		WAIT_FOR_HANDSHAKE();
	}
}
 80017ec:	e00d      	b.n	800180a <WAIT_FOR_HANDSHAKE+0x142>
		OBC_HANDSHAKE_FLAG = 0;
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <WAIT_FOR_HANDSHAKE+0x150>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 80017f4:	4812      	ldr	r0, [pc, #72]	; (8001840 <WAIT_FOR_HANDSHAKE+0x178>)
 80017f6:	f7ff f81f 	bl	8000838 <myDebug>
		memset(MainCMDHs, '\0', sizeof(MainCMDHs));
 80017fa:	2206      	movs	r2, #6
 80017fc:	2100      	movs	r1, #0
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <WAIT_FOR_HANDSHAKE+0x14c>)
 8001800:	f009 f9d4 	bl	800abac <memset>
		WAIT_FOR_HANDSHAKE();
 8001804:	f7ff ff60 	bl	80016c8 <WAIT_FOR_HANDSHAKE>
}
 8001808:	e7ff      	b.n	800180a <WAIT_FOR_HANDSHAKE+0x142>
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000264 	.word	0x20000264
 8001818:	20000168 	.word	0x20000168
 800181c:	200003b0 	.word	0x200003b0
 8001820:	0800bb54 	.word	0x0800bb54
 8001824:	0800bb84 	.word	0x0800bb84
 8001828:	0800bb8c 	.word	0x0800bb8c
 800182c:	0800bb90 	.word	0x0800bb90
 8001830:	0800bbac 	.word	0x0800bbac
 8001834:	0800bbd8 	.word	0x0800bbd8
 8001838:	0800bc04 	.word	0x0800bc04
 800183c:	0800bc30 	.word	0x0800bc30
 8001840:	0800bc60 	.word	0x0800bc60

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <NMI_Handler+0x4>

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler+0x4>

08001862 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <UsageFault_Handler+0x4>

0800186e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001896:	f000 fca5 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <DMA1_Channel1_IRQHandler+0x10>)
 80018a6:	f000 ff9f 	bl	80027e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000444 	.word	0x20000444

080018b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <DMA1_Channel2_IRQHandler+0x10>)
 80018ba:	f000 ff95 	bl	80027e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200004a4 	.word	0x200004a4

080018c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <TIM1_UP_IRQHandler+0x10>)
 80018ce:	f003 fb25 	bl	8004f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000280 	.word	0x20000280

080018dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <USART1_IRQHandler+0x10>)
 80018e2:	f004 f8ab 	bl	8005a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000031c 	.word	0x2000031c

080018f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <USART2_IRQHandler+0x10>)
 80018f6:	f004 f8a1 	bl	8005a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200003b0 	.word	0x200003b0

08001904 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <SUBGHZ_Radio_IRQHandler+0x10>)
 800190a:	f003 f8cd 	bl	8004aa8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000026c 	.word	0x2000026c

08001918 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001934:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193c:	68fb      	ldr	r3, [r7, #12]
}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_SUBGHZ_Init+0x20>)
 800194e:	2210      	movs	r2, #16
 8001950:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_SUBGHZ_Init+0x20>)
 8001954:	f002 fe26 	bl	80045a4 <HAL_SUBGHZ_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800195e:	f7ff fead 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000026c 	.word	0x2000026c

0800196c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff ffcf 	bl	8001918 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	2032      	movs	r0, #50	; 0x32
 8001980:	f000 fd19 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001984:	2032      	movs	r0, #50	; 0x32
 8001986:	f000 fd30 	bl	80023ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_GetTick+0x24>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80019b2:	f000 f988 	bl	8001cc6 <TIMER_IF_GetTimerValue>
 80019b6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80019b8:	687b      	ldr	r3, [r7, #4]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000278 	.word	0x20000278

080019c8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f9a5 	bl	8001d22 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f009 f8d4 	bl	800abbc <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <_sbrk+0x64>)
 8001a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20010000 	.word	0x20010000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	2000027c 	.word	0x2000027c
 8001a48:	20000810 	.word	0x20000810

08001a4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <LL_APB1_GRP1_EnableClock>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <LL_APB2_GRP1_EnableClock>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aac:	68fb      	ldr	r3, [r7, #12]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <MX_TIM1_Init+0xa0>)
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <MX_TIM1_Init+0xa4>)
 8001ada:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <MX_TIM1_Init+0xa0>)
 8001ade:	222f      	movs	r2, #47	; 0x2f
 8001ae0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <MX_TIM1_Init+0xa0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MX_TIM1_Init+0xa0>)
 8001aea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <MX_TIM1_Init+0xa0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_TIM1_Init+0xa0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <MX_TIM1_Init+0xa0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b02:	4815      	ldr	r0, [pc, #84]	; (8001b58 <MX_TIM1_Init+0xa0>)
 8001b04:	f003 f96e 	bl	8004de4 <HAL_TIM_Base_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b0e:	f7ff fdd5 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480e      	ldr	r0, [pc, #56]	; (8001b58 <MX_TIM1_Init+0xa0>)
 8001b20:	f003 fb1b 	bl	800515a <HAL_TIM_ConfigClockSource>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001b2a:	f7ff fdc7 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_TIM1_Init+0xa0>)
 8001b40:	f003 fcfc 	bl	800553c <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b4a:	f7ff fdb7 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000280 	.word	0x20000280
 8001b5c:	40012c00 	.word	0x40012c00

08001b60 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_TIM2_Init+0x94>)
 8001b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <MX_TIM2_Init+0x94>)
 8001b88:	222f      	movs	r2, #47	; 0x2f
 8001b8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <MX_TIM2_Init+0x94>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <MX_TIM2_Init+0x94>)
 8001b94:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <MX_TIM2_Init+0x98>)
 8001b96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <MX_TIM2_Init+0x94>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <MX_TIM2_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba4:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <MX_TIM2_Init+0x94>)
 8001ba6:	f003 f91d 	bl	8004de4 <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bb0:	f7ff fd84 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <MX_TIM2_Init+0x94>)
 8001bc2:	f003 faca 	bl	800515a <HAL_TIM_ConfigClockSource>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bcc:	f7ff fd76 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_TIM2_Init+0x94>)
 8001bde:	f003 fcad 	bl	800553c <HAL_TIMEx_MasterConfigSynchronization>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001be8:	f7ff fd68 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200002cc 	.word	0x200002cc
 8001bf8:	000f4240 	.word	0x000f4240

08001bfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <HAL_TIM_Base_MspInit+0x44>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d10c      	bne.n	8001c28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c12:	f7ff ff39 	bl	8001a88 <LL_APB2_GRP1_EnableClock>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2018      	movs	r0, #24
 8001c1c:	f000 fbcb 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c20:	2018      	movs	r0, #24
 8001c22:	f000 fbe2 	bl	80023ea <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c26:	e007      	b.n	8001c38 <HAL_TIM_Base_MspInit+0x3c>
  else if(tim_baseHandle->Instance==TIM2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c30:	d102      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c32:	2001      	movs	r0, #1
 8001c34:	f7ff ff10 	bl	8001a58 <LL_APB1_GRP1_EnableClock>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40012c00 	.word	0x40012c00

08001c44 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001c8c:	4b02      	ldr	r3, [pc, #8]	; (8001c98 <TIMER_IF_SetTimerContext+0x10>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	20000318 	.word	0x20000318

08001c9c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001ca0:	4b02      	ldr	r3, [pc, #8]	; (8001cac <TIMER_IF_GetTimerContext+0x10>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20000318 	.word	0x20000318

08001cb0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8001cba:	687b      	ldr	r3, [r7, #4]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001cd0:	687b      	ldr	r3, [r7, #4]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001ce6:	687b      	ldr	r3, [r7, #4]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <LL_AHB2_GRP1_EnableClock>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d58:	68fb      	ldr	r3, [r7, #12]
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <LL_APB1_GRP1_EnableClock>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <LL_APB2_GRP1_EnableClock>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db8:	68fb      	ldr	r3, [r7, #12]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dca:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <MX_USART1_UART_Init+0x94>)
 8001dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dce:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de8:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dea:	220c      	movs	r2, #12
 8001dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e0c:	4811      	ldr	r0, [pc, #68]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e0e:	f003 fc2f 	bl	8005670 <HAL_UART_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e18:	f7ff fc50 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e20:	f005 f856 	bl	8006ed0 <HAL_UARTEx_SetTxFifoThreshold>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e2a:	f7ff fc47 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4808      	ldr	r0, [pc, #32]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e32:	f005 f88b 	bl	8006f4c <HAL_UARTEx_SetRxFifoThreshold>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e3c:	f7ff fc3e 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e40:	4804      	ldr	r0, [pc, #16]	; (8001e54 <MX_USART1_UART_Init+0x90>)
 8001e42:	f005 f80d 	bl	8006e60 <HAL_UARTEx_DisableFifoMode>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e4c:	f7ff fc36 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	2000031c 	.word	0x2000031c
 8001e58:	40013800 	.word	0x40013800

08001e5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001e62:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <MX_USART2_UART_Init+0x94>)
 8001e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001e82:	220c      	movs	r2, #12
 8001e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ea4:	4811      	ldr	r0, [pc, #68]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001ea6:	f003 fbe3 	bl	8005670 <HAL_UART_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001eb0:	f7ff fc04 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	480d      	ldr	r0, [pc, #52]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001eb8:	f005 f80a 	bl	8006ed0 <HAL_UARTEx_SetTxFifoThreshold>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ec2:	f7ff fbfb 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4808      	ldr	r0, [pc, #32]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001eca:	f005 f83f 	bl	8006f4c <HAL_UARTEx_SetRxFifoThreshold>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ed4:	f7ff fbf2 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	; (8001eec <MX_USART2_UART_Init+0x90>)
 8001eda:	f004 ffc1 	bl	8006e60 <HAL_UARTEx_DisableFifoMode>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ee4:	f7ff fbea 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200003b0 	.word	0x200003b0
 8001ef0:	40004400 	.word	0x40004400

08001ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b096      	sub	sp, #88	; 0x58
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2238      	movs	r2, #56	; 0x38
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f008 fe49 	bl	800abac <memset>
  if(uartHandle->Instance==USART1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_UART_MspInit+0x1d0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d130      	bne.n	8001f86 <HAL_UART_MspInit+0x92>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f24:	2301      	movs	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f28:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001f2c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 f982 	bl	800423c <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f3e:	f7ff fbbd 	bl	80016bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f46:	f7ff ff25 	bl	8001d94 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff fef2 	bl	8001d34 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001f50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f54:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f62:	2307      	movs	r3, #7
 8001f64:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f70:	f000 fdd8 	bl	8002b24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2100      	movs	r1, #0
 8001f78:	2024      	movs	r0, #36	; 0x24
 8001f7a:	f000 fa1c 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f7e:	2024      	movs	r0, #36	; 0x24
 8001f80:	f000 fa33 	bl	80023ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f84:	e099      	b.n	80020ba <HAL_UART_MspInit+0x1c6>
  else if(uartHandle->Instance==USART2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a4f      	ldr	r2, [pc, #316]	; (80020c8 <HAL_UART_MspInit+0x1d4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	f040 8094 	bne.w	80020ba <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f92:	2302      	movs	r3, #2
 8001f94:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f96:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001f9a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 f94b 	bl	800423c <HAL_RCCEx_PeriphCLKConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_UART_MspInit+0xbc>
      Error_Handler();
 8001fac:	f7ff fb86 	bl	80016bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001fb4:	f7ff fed6 	bl	8001d64 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7ff febb 	bl	8001d34 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fce:	2307      	movs	r3, #7
 8001fd0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fdc:	f000 fda2 	bl	8002b24 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 8001fe2:	4a3b      	ldr	r2, [pc, #236]	; (80020d0 <HAL_UART_MspInit+0x1dc>)
 8001fe4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001fe6:	4b39      	ldr	r3, [pc, #228]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 8001fe8:	2213      	movs	r2, #19
 8001fea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fec:	4b37      	ldr	r3, [pc, #220]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff2:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff8:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ffe:	4b33      	ldr	r3, [pc, #204]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 8002000:	2200      	movs	r2, #0
 8002002:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002004:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800200a:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 800200c:	2200      	movs	r2, #0
 800200e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002010:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 8002012:	2200      	movs	r2, #0
 8002014:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002016:	482d      	ldr	r0, [pc, #180]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 8002018:	f000 fa02 	bl	8002420 <HAL_DMA_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8002022:	f7ff fb4b 	bl	80016bc <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002026:	2110      	movs	r1, #16
 8002028:	4828      	ldr	r0, [pc, #160]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 800202a:	f000 fca3 	bl	8002974 <HAL_DMA_ConfigChannelAttributes>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_UART_MspInit+0x144>
      Error_Handler();
 8002034:	f7ff fb42 	bl	80016bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a24      	ldr	r2, [pc, #144]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 800203c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002040:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_UART_MspInit+0x1d8>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002046:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 8002048:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <HAL_UART_MspInit+0x1e4>)
 800204a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 800204e:	2214      	movs	r2, #20
 8002050:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 8002054:	2210      	movs	r2, #16
 8002056:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 8002078:	2200      	movs	r2, #0
 800207a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800207c:	4815      	ldr	r0, [pc, #84]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 800207e:	f000 f9cf 	bl	8002420 <HAL_DMA_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_UART_MspInit+0x198>
      Error_Handler();
 8002088:	f7ff fb18 	bl	80016bc <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800208c:	2110      	movs	r1, #16
 800208e:	4811      	ldr	r0, [pc, #68]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 8002090:	f000 fc70 	bl	8002974 <HAL_DMA_ConfigChannelAttributes>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 800209a:	f7ff fb0f 	bl	80016bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 80020a2:	67da      	str	r2, [r3, #124]	; 0x7c
 80020a4:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <HAL_UART_MspInit+0x1e0>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2025      	movs	r0, #37	; 0x25
 80020b0:	f000 f981 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020b4:	2025      	movs	r0, #37	; 0x25
 80020b6:	f000 f998 	bl	80023ea <HAL_NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3758      	adds	r7, #88	; 0x58
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40013800 	.word	0x40013800
 80020c8:	40004400 	.word	0x40004400
 80020cc:	20000444 	.word	0x20000444
 80020d0:	40020008 	.word	0x40020008
 80020d4:	200004a4 	.word	0x200004a4
 80020d8:	4002001c 	.word	0x4002001c

080020dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020dc:	480d      	ldr	r0, [pc, #52]	; (8002114 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020e0:	f7ff fcb4 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <LoopForever+0x6>)
  ldr r1, =_edata
 80020e6:	490d      	ldr	r1, [pc, #52]	; (800211c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <LoopForever+0xe>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020fc:	4c0a      	ldr	r4, [pc, #40]	; (8002128 <LoopForever+0x16>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800210a:	f008 fd5d 	bl	800abc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800210e:	f7fe fd91 	bl	8000c34 <main>

08002112 <LoopForever>:

LoopForever:
    b LoopForever
 8002112:	e7fe      	b.n	8002112 <LoopForever>
  ldr   r0, =_estack
 8002114:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002120:	0800bf4c 	.word	0x0800bf4c
  ldr r2, =_sbss
 8002124:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002128:	20000810 	.word	0x20000810

0800212c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213a:	2003      	movs	r0, #3
 800213c:	f000 f930 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002140:	f001 fe9e 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8002144:	4603      	mov	r3, r0
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_Init+0x3c>)
 8002148:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800214a:	2000      	movs	r0, #0
 800214c:	f000 f810 	bl	8002170 <HAL_InitTick>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	e001      	b.n	8002160 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800215c:	f7ff fb72 	bl	8001844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002160:	79fb      	ldrb	r3, [r7, #7]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000008 	.word	0x20000008

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_InitTick+0x6c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d024      	beq.n	80021ce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002184:	f001 fe7c 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_InitTick+0x6c>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	4619      	mov	r1, r3
 8002190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002194:	fbb3 f3f1 	udiv	r3, r3, r1
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	4618      	mov	r0, r3
 800219e:	f000 f932 	bl	8002406 <HAL_SYSTICK_Config>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10f      	bne.n	80021c8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	d809      	bhi.n	80021c2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ae:	2200      	movs	r2, #0
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021b6:	f000 f8fe 	bl	80023b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_InitTick+0x70>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e007      	b.n	80021d2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e004      	b.n	80021d2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e001      	b.n	80021d2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000010 	.word	0x20000010
 80021e0:	2000000c 	.word	0x2000000c

080021e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_IncTick+0x1c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_IncTick+0x20>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a03      	ldr	r2, [pc, #12]	; (8002204 <HAL_IncTick+0x20>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	20000010 	.word	0x20000010
 8002204:	20000504 	.word	0x20000504

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4906      	ldr	r1, [pc, #24]	; (80022a0 <__NVIC_EnableIRQ+0x34>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	; (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	; (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800236c:	d301      	bcc.n	8002372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <SysTick_Config+0x40>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237a:	210f      	movs	r1, #15
 800237c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002380:	f7ff ff90 	bl	80022a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <SysTick_Config+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <SysTick_Config+0x40>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff2d 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023c4:	f7ff ff44 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	6978      	ldr	r0, [r7, #20]
 80023d0:	f7ff ff92 	bl	80022f8 <NVIC_EncodePriority>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff61 	bl	80022a4 <__NVIC_SetPriority>
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff37 	bl	800226c <__NVIC_EnableIRQ>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ffa4 	bl	800235c <SysTick_Config>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e08e      	b.n	8002550 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_DMA_Init+0x138>)
 800243a:	429a      	cmp	r2, r3
 800243c:	d80f      	bhi.n	800245e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	4b45      	ldr	r3, [pc, #276]	; (800255c <HAL_DMA_Init+0x13c>)
 8002446:	4413      	add	r3, r2
 8002448:	4a45      	ldr	r2, [pc, #276]	; (8002560 <HAL_DMA_Init+0x140>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	009a      	lsls	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a42      	ldr	r2, [pc, #264]	; (8002564 <HAL_DMA_Init+0x144>)
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
 800245c:	e00e      	b.n	800247c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	4b40      	ldr	r3, [pc, #256]	; (8002568 <HAL_DMA_Init+0x148>)
 8002466:	4413      	add	r3, r2
 8002468:	4a3d      	ldr	r2, [pc, #244]	; (8002560 <HAL_DMA_Init+0x140>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	009a      	lsls	r2, r3, #2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a3c      	ldr	r2, [pc, #240]	; (800256c <HAL_DMA_Init+0x14c>)
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002496:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fabc 	bl	8002a4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024dc:	d102      	bne.n	80024e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d010      	beq.n	8002526 <HAL_DMA_Init+0x106>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d80c      	bhi.n	8002526 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fae5 	bl	8002adc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	e008      	b.n	8002538 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40020407 	.word	0x40020407
 800255c:	bffdfff8 	.word	0xbffdfff8
 8002560:	cccccccd 	.word	0xcccccccd
 8002564:	40020000 	.word	0x40020000
 8002568:	bffdfbf8 	.word	0xbffdfbf8
 800256c:	40020400 	.word	0x40020400

08002570 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_DMA_Start_IT+0x20>
 800258c:	2302      	movs	r3, #2
 800258e:	e069      	b.n	8002664 <HAL_DMA_Start_IT+0xf4>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d155      	bne.n	8002650 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fa02 	bl	80029d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 020e 	orr.w	r2, r2, #14
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e00f      	b.n	8002608 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0204 	bic.w	r2, r2, #4
 80025f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 020a 	orr.w	r2, r2, #10
 8002606:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002624:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e008      	b.n	8002662 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002662:	7dfb      	ldrb	r3, [r7, #23]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e04f      	b.n	800271e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d008      	beq.n	800269c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2204      	movs	r2, #4
 800268e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e040      	b.n	800271e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 020e 	bic.w	r2, r2, #14
 80026aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	f003 021c 	and.w	r2, r3, #28
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002700:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800270a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d005      	beq.n	800274c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2204      	movs	r2, #4
 8002744:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	e047      	b.n	80027dc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 020e 	bic.w	r2, r2, #14
 800275a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800277a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	f003 021c 	and.w	r2, r3, #28
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f202 	lsl.w	r2, r1, r2
 800278e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002798:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
    }
  }
  return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f003 031c 	and.w	r3, r3, #28
 8002808:	2204      	movs	r2, #4
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d027      	beq.n	8002864 <HAL_DMA_IRQHandler+0x7c>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d022      	beq.n	8002864 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0204 	bic.w	r2, r2, #4
 800283a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	f003 021c 	and.w	r2, r3, #28
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	2104      	movs	r1, #4
 800284a:	fa01 f202 	lsl.w	r2, r1, r2
 800284e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8081 	beq.w	800295c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002862:	e07b      	b.n	800295c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	f003 031c 	and.w	r3, r3, #28
 800286c:	2202      	movs	r2, #2
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d03d      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x10c>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d038      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10b      	bne.n	80028a8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 020a 	bic.w	r2, r2, #10
 800289e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <HAL_DMA_IRQHandler+0x180>)
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d909      	bls.n	80028c8 <HAL_DMA_IRQHandler+0xe0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f003 031c 	and.w	r3, r3, #28
 80028bc:	4a2b      	ldr	r2, [pc, #172]	; (800296c <HAL_DMA_IRQHandler+0x184>)
 80028be:	2102      	movs	r1, #2
 80028c0:	fa01 f303 	lsl.w	r3, r1, r3
 80028c4:	6053      	str	r3, [r2, #4]
 80028c6:	e008      	b.n	80028da <HAL_DMA_IRQHandler+0xf2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	f003 031c 	and.w	r3, r3, #28
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <HAL_DMA_IRQHandler+0x188>)
 80028d2:	2102      	movs	r1, #2
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d038      	beq.n	800295c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80028f2:	e033      	b.n	800295c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	f003 031c 	and.w	r3, r3, #28
 80028fc:	2208      	movs	r2, #8
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d02a      	beq.n	800295e <HAL_DMA_IRQHandler+0x176>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d025      	beq.n	800295e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 020e 	bic.w	r2, r2, #14
 8002920:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f003 021c 	and.w	r2, r3, #28
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2101      	movs	r1, #1
 8002930:	fa01 f202 	lsl.w	r2, r1, r2
 8002934:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	2b00      	cmp	r3, #0
 8002952:	d004      	beq.n	800295e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800295c:	bf00      	nop
 800295e:	bf00      	nop
}
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40020080 	.word	0x40020080
 800296c:	40020400 	.word	0x40020400
 8002970:	40020000 	.word	0x40020000

08002974 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	72fb      	strb	r3, [r7, #11]
    return status;
 800298c:	7afb      	ldrb	r3, [r7, #11]
 800298e:	e01b      	b.n	80029c8 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e003      	b.n	80029be <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029bc:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	601a      	str	r2, [r3, #0]

  return status;
 80029c6:	7afb      	ldrb	r3, [r7, #11]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029e8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029fa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a00:	f003 021c 	and.w	r2, r3, #28
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d108      	bne.n	8002a32 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a30:	e007      	b.n	8002a42 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	60da      	str	r2, [r3, #12]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d813      	bhi.n	8002a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a6c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	3b08      	subs	r3, #8
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e011      	b.n	8002aac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	009a      	lsls	r2, r3, #2
 8002a90:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002a92:	4413      	add	r3, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	3b08      	subs	r3, #8
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	; (8002ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	3307      	adds	r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002ab0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	2201      	movs	r2, #1
 8002aba:	409a      	lsls	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40020407 	.word	0x40020407
 8002ad0:	cccccccd 	.word	0xcccccccd
 8002ad4:	4002081c 	.word	0x4002081c
 8002ad8:	40020880 	.word	0x40020880

08002adc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	461a      	mov	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b00:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	1000823f 	.word	0x1000823f
 8002b20:	40020940 	.word	0x40020940

08002b24 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b32:	e140      	b.n	8002db6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8132 	beq.w	8002db0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d005      	beq.n	8002b64 <HAL_GPIO_Init+0x40>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d130      	bne.n	8002bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0201 	and.w	r2, r3, #1
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d017      	beq.n	8002c02 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d123      	bne.n	8002c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	6939      	ldr	r1, [r7, #16]
 8002c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0203 	and.w	r2, r3, #3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 808c 	beq.w	8002db0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c98:	4a4e      	ldr	r2, [pc, #312]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	2207      	movs	r2, #7
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_GPIO_Init+0x1bc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a44      	ldr	r2, [pc, #272]	; (8002dd8 <HAL_GPIO_Init+0x2b4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <HAL_GPIO_Init+0x1b8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a43      	ldr	r2, [pc, #268]	; (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_GPIO_Init+0x1b4>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e004      	b.n	8002ce2 <HAL_GPIO_Init+0x1be>
 8002cd8:	2307      	movs	r3, #7
 8002cda:	e002      	b.n	8002ce2 <HAL_GPIO_Init+0x1be>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_GPIO_Init+0x1be>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	f002 0203 	and.w	r2, r2, #3
 8002ce8:	0092      	lsls	r2, r2, #2
 8002cea:	4093      	lsls	r3, r2
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cf2:	4938      	ldr	r1, [pc, #224]	; (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d00:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d24:	4a2e      	ldr	r2, [pc, #184]	; (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d4e:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002d54:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d5a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002d7a:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d88:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3301      	adds	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f47f aeb7 	bne.w	8002b34 <HAL_GPIO_Init+0x10>
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	48000400 	.word	0x48000400
 8002ddc:	48000800 	.word	0x48000800
 8002de0:	58000800 	.word	0x58000800

08002de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
 8002df0:	4613      	mov	r3, r2
 8002df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002df4:	787b      	ldrb	r3, [r7, #1]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e00:	e002      	b.n	8002e08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a03      	ldr	r2, [pc, #12]	; (8002e2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	58000400 	.word	0x58000400

08002e30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_PWREx_GetVoltageRange+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	58000400 	.word	0x58000400

08002e48 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e58:	d101      	bne.n	8002e5e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	58000400 	.word	0x58000400

08002e6c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e9a:	6013      	str	r3, [r2, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eb6:	d101      	bne.n	8002ebc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f10:	d101      	bne.n	8002f16 <LL_RCC_HSE_IsReady+0x18>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <LL_RCC_HSE_IsReady+0x1a>
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4e:	6013      	str	r3, [r2, #0]
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d101      	bne.n	8002f70 <LL_RCC_HSI_IsReady+0x18>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <LL_RCC_HSI_IsReady+0x1a>
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	061b      	lsls	r3, r3, #24
 8002f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d101      	bne.n	8002fba <LL_RCC_LSE_IsReady+0x18>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <LL_RCC_LSE_IsReady+0x1a>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d101      	bne.n	800301c <LL_RCC_LSI_IsReady+0x18>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <LL_RCC_LSI_IsReady+0x1a>
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6013      	str	r3, [r2, #0]
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr

08003042 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	6013      	str	r3, [r2, #0]
}
 8003056:	bf00      	nop
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d101      	bne.n	8003074 <LL_RCC_MSI_IsReady+0x16>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <LL_RCC_MSI_IsReady+0x18>
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b08      	cmp	r3, #8
 800308e:	d101      	bne.n	8003094 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80030a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80030b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80030fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800311e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003162:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003190:	f023 020f 	bic.w	r2, r3, #15
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80031b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80031fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003216:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800322c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800327e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003282:	6013      	str	r3, [r2, #0]
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800329e:	d101      	bne.n	80032a4 <LL_RCC_PLL_IsReady+0x18>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <LL_RCC_PLL_IsReady+0x1a>
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80032e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0303 	and.w	r3, r3, #3
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331a:	d101      	bne.n	8003320 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800332a:	b480      	push	{r7}
 800332c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800332e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003332:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800333e:	d101      	bne.n	8003344 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003356:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800335a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003362:	d101      	bne.n	8003368 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003384:	d101      	bne.n	800338a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033a6:	d101      	bne.n	80033ac <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e36f      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ca:	f7ff fea6 	bl	800311a <LL_RCC_GetSysClkSource>
 80033ce:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d0:	f7ff ff8f 	bl	80032f2 <LL_RCC_PLL_GetMainSource>
 80033d4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80c4 	beq.w	800356c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_RCC_OscConfig+0x3e>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d176      	bne.n	80034de <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d173      	bne.n	80034de <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e353      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_OscConfig+0x68>
 8003414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800341e:	e006      	b.n	800342e <HAL_RCC_OscConfig+0x76>
 8003420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342e:	4293      	cmp	r3, r2
 8003430:	d222      	bcs.n	8003478 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fd5a 	bl	8003ef0 <RCC_SetFlashLatencyFromMSIRange>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e331      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fe2b 	bl	80030cc <LL_RCC_MSI_SetCalibTrimming>
 8003476:	e021      	b.n	80034bc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003482:	f043 0308 	orr.w	r3, r3, #8
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fe12 	bl	80030cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fd1f 	bl	8003ef0 <RCC_SetFlashLatencyFromMSIRange>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e2f6      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80034bc:	f000 fce0 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 80034c0:	4603      	mov	r3, r0
 80034c2:	4aa7      	ldr	r2, [pc, #668]	; (8003760 <HAL_RCC_OscConfig+0x3a8>)
 80034c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80034c6:	4ba7      	ldr	r3, [pc, #668]	; (8003764 <HAL_RCC_OscConfig+0x3ac>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fe50 	bl	8002170 <HAL_InitTick>
 80034d0:	4603      	mov	r3, r0
 80034d2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d047      	beq.n	800356a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	e2e5      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d02c      	beq.n	8003540 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034e6:	f7ff fd9e 	bl	8003026 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ea:	f7fe fa59 	bl	80019a0 <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034f2:	f7fe fa55 	bl	80019a0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e2d2      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003504:	f7ff fdab 	bl	800305e <LL_RCC_MSI_IsReady>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f1      	beq.n	80034f2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800350e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003518:	f043 0308 	orr.w	r3, r3, #8
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003530:	4313      	orrs	r3, r2
 8003532:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fdc7 	bl	80030cc <LL_RCC_MSI_SetCalibTrimming>
 800353e:	e015      	b.n	800356c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003540:	f7ff fd7f 	bl	8003042 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003544:	f7fe fa2c 	bl	80019a0 <HAL_GetTick>
 8003548:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800354c:	f7fe fa28 	bl	80019a0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e2a5      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800355e:	f7ff fd7e 	bl	800305e <LL_RCC_MSI_IsReady>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f1      	bne.n	800354c <HAL_RCC_OscConfig+0x194>
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800356a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d058      	beq.n	800362a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b08      	cmp	r3, #8
 800357c:	d005      	beq.n	800358a <HAL_RCC_OscConfig+0x1d2>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	2b0c      	cmp	r3, #12
 8003582:	d108      	bne.n	8003596 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d105      	bne.n	8003596 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d14b      	bne.n	800362a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e289      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035a8:	4313      	orrs	r3, r2
 80035aa:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d102      	bne.n	80035bc <HAL_RCC_OscConfig+0x204>
 80035b6:	f7ff fc86 	bl	8002ec6 <LL_RCC_HSE_Enable>
 80035ba:	e00d      	b.n	80035d8 <HAL_RCC_OscConfig+0x220>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80035c4:	d104      	bne.n	80035d0 <HAL_RCC_OscConfig+0x218>
 80035c6:	f7ff fc51 	bl	8002e6c <LL_RCC_HSE_EnableTcxo>
 80035ca:	f7ff fc7c 	bl	8002ec6 <LL_RCC_HSE_Enable>
 80035ce:	e003      	b.n	80035d8 <HAL_RCC_OscConfig+0x220>
 80035d0:	f7ff fc87 	bl	8002ee2 <LL_RCC_HSE_Disable>
 80035d4:	f7ff fc58 	bl	8002e88 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fe f9de 	bl	80019a0 <HAL_GetTick>
 80035e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e8:	f7fe f9da 	bl	80019a0 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e257      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80035fa:	f7ff fc80 	bl	8002efe <LL_RCC_HSE_IsReady>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f1      	beq.n	80035e8 <HAL_RCC_OscConfig+0x230>
 8003604:	e011      	b.n	800362a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fe f9cb 	bl	80019a0 <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360e:	f7fe f9c7 	bl	80019a0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b64      	cmp	r3, #100	; 0x64
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e244      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003620:	f7ff fc6d 	bl	8002efe <LL_RCC_HSE_IsReady>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f1      	bne.n	800360e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d046      	beq.n	80036c4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d005      	beq.n	8003648 <HAL_RCC_OscConfig+0x290>
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d10e      	bne.n	8003660 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d10b      	bne.n	8003660 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e22a      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fc8e 	bl	8002f7a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800365e:	e031      	b.n	80036c4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d019      	beq.n	800369c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003668:	f7ff fc5a 	bl	8002f20 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe f998 	bl	80019a0 <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003674:	f7fe f994 	bl	80019a0 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e211      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003686:	f7ff fc67 	bl	8002f58 <LL_RCC_HSI_IsReady>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f1      	beq.n	8003674 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fc70 	bl	8002f7a <LL_RCC_HSI_SetCalibTrimming>
 800369a:	e013      	b.n	80036c4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369c:	f7ff fc4e 	bl	8002f3c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe f97e 	bl	80019a0 <HAL_GetTick>
 80036a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a8:	f7fe f97a 	bl	80019a0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e1f7      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80036ba:	f7ff fc4d 	bl	8002f58 <LL_RCC_HSI_IsReady>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f1      	bne.n	80036a8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d06e      	beq.n	80037ae <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d056      	beq.n	8003786 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69da      	ldr	r2, [r3, #28]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d031      	beq.n	8003754 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e1d0      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d013      	beq.n	800373a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003712:	f7ff fc67 	bl	8002fe4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003716:	f7fe f943 	bl	80019a0 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371e:	f7fe f93f 	bl	80019a0 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b11      	cmp	r3, #17
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e1bc      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003730:	f7ff fc68 	bl	8003004 <LL_RCC_LSI_IsReady>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f1      	bne.n	800371e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800373a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003742:	f023 0210 	bic.w	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003754:	f7ff fc36 	bl	8002fc4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003758:	f7fe f922 	bl	80019a0 <HAL_GetTick>
 800375c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800375e:	e00c      	b.n	800377a <HAL_RCC_OscConfig+0x3c2>
 8003760:	20000008 	.word	0x20000008
 8003764:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003768:	f7fe f91a 	bl	80019a0 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b11      	cmp	r3, #17
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e197      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800377a:	f7ff fc43 	bl	8003004 <LL_RCC_LSI_IsReady>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f1      	beq.n	8003768 <HAL_RCC_OscConfig+0x3b0>
 8003784:	e013      	b.n	80037ae <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003786:	f7ff fc2d 	bl	8002fe4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378a:	f7fe f909 	bl	80019a0 <HAL_GetTick>
 800378e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003792:	f7fe f905 	bl	80019a0 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b11      	cmp	r3, #17
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e182      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80037a4:	f7ff fc2e 	bl	8003004 <LL_RCC_LSI_IsReady>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f1      	bne.n	8003792 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80d8 	beq.w	800396c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80037bc:	f7ff fb44 	bl	8002e48 <LL_PWR_IsEnabledBkUpAccess>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d113      	bne.n	80037ee <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80037c6:	f7ff fb25 	bl	8002e14 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fe f8e9 	bl	80019a0 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7fe f8e5 	bl	80019a0 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e162      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80037e4:	f7ff fb30 	bl	8002e48 <LL_PWR_IsEnabledBkUpAccess>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f1      	beq.n	80037d2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d07b      	beq.n	80038ee <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b85      	cmp	r3, #133	; 0x85
 80037fc:	d003      	beq.n	8003806 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b05      	cmp	r3, #5
 8003804:	d109      	bne.n	800381a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003812:	f043 0304 	orr.w	r3, r3, #4
 8003816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fe f8c1 	bl	80019a0 <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fe f8b3 	bl	80019a0 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e12e      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800384c:	f7ff fba9 	bl	8002fa2 <LL_RCC_LSE_IsReady>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0ef      	beq.n	8003836 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b81      	cmp	r3, #129	; 0x81
 800385c:	d003      	beq.n	8003866 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b85      	cmp	r3, #133	; 0x85
 8003864:	d121      	bne.n	80038aa <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7fe f89b 	bl	80019a0 <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800386c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003880:	e00a      	b.n	8003898 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f7fe f88d 	bl	80019a0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003890:	4293      	cmp	r3, r2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e108      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ec      	beq.n	8003882 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80038a8:	e060      	b.n	800396c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fe f879 	bl	80019a0 <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80038b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fe f86b 	bl	80019a0 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e0e6      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ec      	bne.n	80038c6 <HAL_RCC_OscConfig+0x50e>
 80038ec:	e03e      	b.n	800396c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ee:	f7fe f857 	bl	80019a0 <HAL_GetTick>
 80038f2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80038f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003908:	e00a      	b.n	8003920 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fe f849 	bl	80019a0 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	; 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e0c4      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1ec      	bne.n	800390a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003930:	f7fe f836 	bl	80019a0 <HAL_GetTick>
 8003934:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800394a:	e00a      	b.n	8003962 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394c:	f7fe f828 	bl	80019a0 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e0a3      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003962:	f7ff fb1e 	bl	8002fa2 <LL_RCC_LSE_IsReady>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ef      	bne.n	800394c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 8099 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b0c      	cmp	r3, #12
 800397a:	d06c      	beq.n	8003a56 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	2b02      	cmp	r3, #2
 8003982:	d14b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003984:	f7ff fc74 	bl	8003270 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fe f80a 	bl	80019a0 <HAL_GetTick>
 800398c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003990:	f7fe f806 	bl	80019a0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b0a      	cmp	r3, #10
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e083      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80039a2:	f7ff fc73 	bl	800328c <LL_RCC_PLL_IsReady>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f1      	bne.n	8003990 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <HAL_RCC_OscConfig+0x6fc>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039be:	4311      	orrs	r1, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c4:	0212      	lsls	r2, r2, #8
 80039c6:	4311      	orrs	r1, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039cc:	4311      	orrs	r1, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039d2:	4311      	orrs	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039d8:	430a      	orrs	r2, r1
 80039da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039de:	4313      	orrs	r3, r2
 80039e0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e2:	f7ff fc37 	bl	8003254 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7fd ffd3 	bl	80019a0 <HAL_GetTick>
 80039fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fd ffcf 	bl	80019a0 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b0a      	cmp	r3, #10
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e04c      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003a10:	f7ff fc3c 	bl	800328c <LL_RCC_PLL_IsReady>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f1      	beq.n	80039fe <HAL_RCC_OscConfig+0x646>
 8003a1a:	e045      	b.n	8003aa8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1c:	f7ff fc28 	bl	8003270 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fd ffbe 	bl	80019a0 <HAL_GetTick>
 8003a24:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fd ffba 	bl	80019a0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b0a      	cmp	r3, #10
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e037      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003a3a:	f7ff fc27 	bl	800328c <LL_RCC_PLL_IsReady>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f1      	bne.n	8003a28 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <HAL_RCC_OscConfig+0x700>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
 8003a54:	e028      	b.n	8003aa8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e023      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f003 0203 	and.w	r2, r3, #3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d10e      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d106      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	11c1808c 	.word	0x11c1808c
 8003ab8:	eefefffc 	.word	0xeefefffc

08003abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e12c      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b98      	ldr	r3, [pc, #608]	; (8003d34 <HAL_RCC_ClockConfig+0x278>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d91b      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b95      	ldr	r3, [pc, #596]	; (8003d34 <HAL_RCC_ClockConfig+0x278>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 0207 	bic.w	r2, r3, #7
 8003ae6:	4993      	ldr	r1, [pc, #588]	; (8003d34 <HAL_RCC_ClockConfig+0x278>)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aee:	f7fd ff57 	bl	80019a0 <HAL_GetTick>
 8003af2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003af6:	f7fd ff53 	bl	80019a0 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e110      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b08:	4b8a      	ldr	r3, [pc, #552]	; (8003d34 <HAL_RCC_ClockConfig+0x278>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d1ef      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d016      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fb02 	bl	8003130 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b2c:	f7fd ff38 	bl	80019a0 <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b34:	f7fd ff34 	bl	80019a0 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e0f1      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b46:	f7ff fbdf 	bl	8003308 <LL_RCC_IsActiveFlag_HPRE>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f1      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d016      	beq.n	8003b8a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff faf8 	bl	8003156 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b66:	f7fd ff1b 	bl	80019a0 <HAL_GetTick>
 8003b6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b6e:	f7fd ff17 	bl	80019a0 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e0d4      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b80:	f7ff fbd3 	bl	800332a <LL_RCC_IsActiveFlag_C2HPRE>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f1      	beq.n	8003b6e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff faf0 	bl	8003180 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ba0:	f7fd fefe 	bl	80019a0 <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ba8:	f7fd fefa 	bl	80019a0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e0b7      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003bba:	f7ff fbc8 	bl	800334e <LL_RCC_IsActiveFlag_SHDHPRE>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f1      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d016      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fae9 	bl	80031ac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bda:	f7fd fee1 	bl	80019a0 <HAL_GetTick>
 8003bde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003be2:	f7fd fedd 	bl	80019a0 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e09a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003bf4:	f7ff fbbd 	bl	8003372 <LL_RCC_IsActiveFlag_PPRE1>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f1      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d017      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fade 	bl	80031d2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c16:	f7fd fec3 	bl	80019a0 <HAL_GetTick>
 8003c1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c1e:	f7fd febf 	bl	80019a0 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e07c      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c30:	f7ff fbb0 	bl	8003394 <LL_RCC_IsActiveFlag_PPRE2>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f1      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d043      	beq.n	8003cce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d106      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003c4e:	f7ff f956 	bl	8002efe <LL_RCC_HSE_IsReady>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d11e      	bne.n	8003c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e066      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d106      	bne.n	8003c72 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003c64:	f7ff fb12 	bl	800328c <LL_RCC_PLL_IsReady>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d113      	bne.n	8003c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e05b      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003c7a:	f7ff f9f0 	bl	800305e <LL_RCC_MSI_IsReady>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d108      	bne.n	8003c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e050      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003c88:	f7ff f966 	bl	8002f58 <LL_RCC_HSI_IsReady>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e049      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fa2a 	bl	80030f4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca0:	f7fd fe7e 	bl	80019a0 <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca8:	f7fd fe7a 	bl	80019a0 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e035      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	f7ff fa2c 	bl	800311a <LL_RCC_GetSysClkSource>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d1ec      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cce:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <HAL_RCC_ClockConfig+0x278>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d21b      	bcs.n	8003d14 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cdc:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <HAL_RCC_ClockConfig+0x278>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 0207 	bic.w	r2, r3, #7
 8003ce4:	4913      	ldr	r1, [pc, #76]	; (8003d34 <HAL_RCC_ClockConfig+0x278>)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cec:	f7fd fe58 	bl	80019a0 <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003cf4:	f7fd fe54 	bl	80019a0 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e011      	b.n	8003d2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_ClockConfig+0x278>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d1ef      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d14:	f000 f8b4 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <HAL_RCC_ClockConfig+0x27c>)
 8003d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_RCC_ClockConfig+0x280>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe fa24 	bl	8002170 <HAL_InitTick>
 8003d28:	4603      	mov	r3, r0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	58004000 	.word	0x58004000
 8003d38:	20000008 	.word	0x20000008
 8003d3c:	2000000c 	.word	0x2000000c

08003d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4e:	f7ff f9e4 	bl	800311a <LL_RCC_GetSysClkSource>
 8003d52:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d54:	f7ff facd 	bl	80032f2 <LL_RCC_PLL_GetMainSource>
 8003d58:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x2c>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d139      	bne.n	8003dda <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d136      	bne.n	8003dda <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003d6c:	f7ff f987 	bl	800307e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d115      	bne.n	8003da2 <HAL_RCC_GetSysClockFreq+0x62>
 8003d76:	f7ff f982 	bl	800307e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_GetSysClockFreq+0x4e>
 8003d80:	f7ff f98d 	bl	800309e <LL_RCC_MSI_GetRange>
 8003d84:	4603      	mov	r3, r0
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	e005      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x5a>
 8003d8e:	f7ff f991 	bl	80030b4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003d92:	4603      	mov	r3, r0
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	4a36      	ldr	r2, [pc, #216]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x134>)
 8003d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da0:	e014      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x8c>
 8003da2:	f7ff f96c 	bl	800307e <LL_RCC_MSI_IsEnabledRangeSelect>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x7a>
 8003dac:	f7ff f977 	bl	800309e <LL_RCC_MSI_GetRange>
 8003db0:	4603      	mov	r3, r0
 8003db2:	091b      	lsrs	r3, r3, #4
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	e005      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x86>
 8003dba:	f7ff f97b 	bl	80030b4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	4a2b      	ldr	r2, [pc, #172]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x134>)
 8003dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dcc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d115      	bne.n	8003e00 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dd8:	e012      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d102      	bne.n	8003de6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003de0:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x138>)
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	e00c      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d109      	bne.n	8003e00 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003dec:	f7ff f85a 	bl	8002ea4 <LL_RCC_HSE_IsEnabledDiv2>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d102      	bne.n	8003dfc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x138>)
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	e001      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003dfc:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003dfe:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e00:	f7ff f98b 	bl	800311a <LL_RCC_GetSysClkSource>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b0c      	cmp	r3, #12
 8003e08:	d12f      	bne.n	8003e6a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003e0a:	f7ff fa72 	bl	80032f2 <LL_RCC_PLL_GetMainSource>
 8003e0e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d003      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0xde>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d003      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0xe4>
 8003e1c:	e00d      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003e1e:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e20:	60fb      	str	r3, [r7, #12]
        break;
 8003e22:	e00d      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003e24:	f7ff f83e 	bl	8002ea4 <LL_RCC_HSE_IsEnabledDiv2>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d102      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003e2e:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e30:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003e32:	e005      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003e36:	60fb      	str	r3, [r7, #12]
        break;
 8003e38:	e002      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	60fb      	str	r3, [r7, #12]
        break;
 8003e3e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003e40:	f7ff fa35 	bl	80032ae <LL_RCC_PLL_GetN>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	fb03 f402 	mul.w	r4, r3, r2
 8003e4c:	f7ff fa46 	bl	80032dc <LL_RCC_PLL_GetDivider>
 8003e50:	4603      	mov	r3, r0
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	3301      	adds	r3, #1
 8003e56:	fbb4 f4f3 	udiv	r4, r4, r3
 8003e5a:	f7ff fa34 	bl	80032c6 <LL_RCC_PLL_GetR>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	0f5b      	lsrs	r3, r3, #29
 8003e62:	3301      	adds	r3, #1
 8003e64:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e68:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003e6a:	697b      	ldr	r3, [r7, #20]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd90      	pop	{r4, r7, pc}
 8003e74:	0800bd34 	.word	0x0800bd34
 8003e78:	00f42400 	.word	0x00f42400
 8003e7c:	01e84800 	.word	0x01e84800

08003e80 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e80:	b598      	push	{r3, r4, r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003e84:	f7ff ff5c 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003e88:	4604      	mov	r4, r0
 8003e8a:	f7ff f9b5 	bl	80031f8 <LL_RCC_GetAHBPrescaler>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	4a03      	ldr	r2, [pc, #12]	; (8003ea4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd98      	pop	{r3, r4, r7, pc}
 8003ea4:	0800bcd4 	.word	0x0800bcd4

08003ea8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea8:	b598      	push	{r3, r4, r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003eac:	f7ff ffe8 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	f7ff f9b9 	bl	8003228 <LL_RCC_GetAPB1Prescaler>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd98      	pop	{r3, r4, r7, pc}
 8003ec8:	0800bd14 	.word	0x0800bd14

08003ecc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ecc:	b598      	push	{r3, r4, r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003ed0:	f7ff ffd6 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	f7ff f9b2 	bl	800323e <LL_RCC_GetAPB2Prescaler>
 8003eda:	4603      	mov	r3, r0
 8003edc:	0adb      	lsrs	r3, r3, #11
 8003ede:	4a03      	ldr	r2, [pc, #12]	; (8003eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd98      	pop	{r3, r4, r7, pc}
 8003eec:	0800bd14 	.word	0x0800bd14

08003ef0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	4a10      	ldr	r2, [pc, #64]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f06:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003f08:	f7ff f981 	bl	800320e <LL_RCC_GetAHB3Prescaler>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	4a0c      	ldr	r2, [pc, #48]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0c9c      	lsrs	r4, r3, #18
 8003f2c:	f7fe ff80 	bl	8002e30 <HAL_PWREx_GetVoltageRange>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4619      	mov	r1, r3
 8003f34:	4620      	mov	r0, r4
 8003f36:	f000 f80b 	bl	8003f50 <RCC_SetFlashLatency>
 8003f3a:	4603      	mov	r3, r0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd90      	pop	{r4, r7, pc}
 8003f44:	0800bd34 	.word	0x0800bd34
 8003f48:	0800bcd4 	.word	0x0800bcd4
 8003f4c:	431bde83 	.word	0x431bde83

08003f50 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08e      	sub	sp, #56	; 0x38
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003f5a:	4a3a      	ldr	r2, [pc, #232]	; (8004044 <RCC_SetFlashLatency+0xf4>)
 8003f5c:	f107 0320 	add.w	r3, r7, #32
 8003f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f64:	6018      	str	r0, [r3, #0]
 8003f66:	3304      	adds	r3, #4
 8003f68:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003f6a:	4a37      	ldr	r2, [pc, #220]	; (8004048 <RCC_SetFlashLatency+0xf8>)
 8003f6c:	f107 0318 	add.w	r3, r7, #24
 8003f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f74:	6018      	str	r0, [r3, #0]
 8003f76:	3304      	adds	r3, #4
 8003f78:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003f7a:	4a34      	ldr	r2, [pc, #208]	; (800404c <RCC_SetFlashLatency+0xfc>)
 8003f7c:	f107 030c 	add.w	r3, r7, #12
 8003f80:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f82:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003f86:	2300      	movs	r3, #0
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f90:	d11b      	bne.n	8003fca <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
 8003f96:	e014      	b.n	8003fc2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	3338      	adds	r3, #56	; 0x38
 8003f9e:	443b      	add	r3, r7
 8003fa0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d807      	bhi.n	8003fbc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	3338      	adds	r3, #56	; 0x38
 8003fb2:	443b      	add	r3, r7
 8003fb4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fba:	e021      	b.n	8004000 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d9e7      	bls.n	8003f98 <RCC_SetFlashLatency+0x48>
 8003fc8:	e01a      	b.n	8004000 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fce:	e014      	b.n	8003ffa <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	3338      	adds	r3, #56	; 0x38
 8003fd6:	443b      	add	r3, r7
 8003fd8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d807      	bhi.n	8003ff4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	3338      	adds	r3, #56	; 0x38
 8003fea:	443b      	add	r3, r7
 8003fec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ff2:	e005      	b.n	8004000 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d9e7      	bls.n	8003fd0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004000:	4b13      	ldr	r3, [pc, #76]	; (8004050 <RCC_SetFlashLatency+0x100>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f023 0207 	bic.w	r2, r3, #7
 8004008:	4911      	ldr	r1, [pc, #68]	; (8004050 <RCC_SetFlashLatency+0x100>)
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400c:	4313      	orrs	r3, r2
 800400e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004010:	f7fd fcc6 	bl	80019a0 <HAL_GetTick>
 8004014:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004016:	e008      	b.n	800402a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004018:	f7fd fcc2 	bl	80019a0 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e007      	b.n	800403a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <RCC_SetFlashLatency+0x100>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004034:	429a      	cmp	r2, r3
 8004036:	d1ef      	bne.n	8004018 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3738      	adds	r7, #56	; 0x38
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	0800bc94 	.word	0x0800bc94
 8004048:	0800bc9c 	.word	0x0800bc9c
 800404c:	0800bca4 	.word	0x0800bca4
 8004050:	58004000 	.word	0x58004000

08004054 <LL_RCC_LSE_IsReady>:
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d101      	bne.n	800406c <LL_RCC_LSE_IsReady+0x18>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <LL_RCC_LSE_IsReady+0x1a>
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <LL_RCC_SetUSARTClockSource>:
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800407e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004082:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	43db      	mvns	r3, r3
 800408c:	401a      	ands	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <LL_RCC_SetI2SClockSource>:
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80040ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <LL_RCC_SetLPUARTClockSource>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80040d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <LL_RCC_SetI2CClockSource>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004106:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004112:	43db      	mvns	r3, r3
 8004114:	401a      	ands	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800411e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <LL_RCC_SetLPTIMClockSource>:
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	041b      	lsls	r3, r3, #16
 8004148:	43db      	mvns	r3, r3
 800414a:	401a      	ands	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <LL_RCC_SetRNGClockSource>:
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004174:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <LL_RCC_SetADCClockSource>:
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <LL_RCC_SetRTCClockSource>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80041c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <LL_RCC_GetRTCClockSource>:
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <LL_RCC_ForceBackupDomainReset>:
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800420a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004212:	bf00      	nop
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <LL_RCC_ReleaseBackupDomainReset>:
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
	...

0800423c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004248:	2300      	movs	r3, #0
 800424a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800424c:	2300      	movs	r3, #0
 800424e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d058      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800425c:	f7fe fdda 	bl	8002e14 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004260:	f7fd fb9e 	bl	80019a0 <HAL_GetTick>
 8004264:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004266:	e009      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004268:	f7fd fb9a 	bl	80019a0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d902      	bls.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	74fb      	strb	r3, [r7, #19]
        break;
 800427a:	e006      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800427c:	4b7b      	ldr	r3, [pc, #492]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004288:	d1ee      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800428a:	7cfb      	ldrb	r3, [r7, #19]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d13c      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004290:	f7ff ffa7 	bl	80041e2 <LL_RCC_GetRTCClockSource>
 8004294:	4602      	mov	r2, r0
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	429a      	cmp	r2, r3
 800429c:	d00f      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800429e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042aa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042ac:	f7ff ffa5 	bl	80041fa <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042b0:	f7ff ffb3 	bl	800421a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d014      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fd fb6a 	bl	80019a0 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80042ce:	e00b      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d0:	f7fd fb66 	bl	80019a0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d902      	bls.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	74fb      	strb	r3, [r7, #19]
            break;
 80042e6:	e004      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80042e8:	f7ff feb4 	bl	8004054 <LL_RCC_LSE_IsReady>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d1ee      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80042f2:	7cfb      	ldrb	r3, [r7, #19]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff5b 	bl	80041b8 <LL_RCC_SetRTCClockSource>
 8004302:	e004      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	74bb      	strb	r3, [r7, #18]
 8004308:	e001      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d004      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fea9 	bl	8004076 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fe9e 	bl	8004076 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d004      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fec0 	bl	80040d0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fee6 	bl	8004132 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fedb 	bl	8004132 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff fed0 	bl	8004132 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fea9 	bl	80040fa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fe9e 	bl	80040fa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d004      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fe93 	bl	80040fa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d011      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fe5e 	bl	80040a6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f2:	d107      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004402:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d010      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fea5 	bl	8004164 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	2b00      	cmp	r3, #0
 8004420:	d107      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800442c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004430:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d011      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fea3 	bl	800418e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004450:	d107      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004462:	7cbb      	ldrb	r3, [r7, #18]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	58000400 	.word	0x58000400

08004470 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004480:	4904      	ldr	r1, [pc, #16]	; (8004494 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4313      	orrs	r3, r2
 8004486:	608b      	str	r3, [r1, #8]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	58000400 	.word	0x58000400

08004498 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80044a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	58000400 	.word	0x58000400

080044b8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80044c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	58000400 	.word	0x58000400

080044d8 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80044de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e2:	619a      	str	r2, [r3, #24]
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	58000400 	.word	0x58000400

080044f0 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d101      	bne.n	8004504 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	58000400 	.word	0x58000400

08004514 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b04      	cmp	r3, #4
 8004522:	d101      	bne.n	8004528 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	58000400 	.word	0x58000400

08004538 <LL_RCC_RF_DisableReset>:
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800453c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004544:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800454c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <LL_RCC_IsRFUnderReset>:
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800455c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800456c:	d101      	bne.n	8004572 <LL_RCC_IsRFUnderReset+0x1a>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <LL_RCC_IsRFUnderReset+0x1c>
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <LL_EXTI_EnableIT_32_63+0x24>)
 8004586:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800458a:	4905      	ldr	r1, [pc, #20]	; (80045a0 <LL_EXTI_EnableIT_32_63+0x24>)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	58000800 	.word	0x58000800

080045a4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
    return status;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	e052      	b.n	8004660 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	799b      	ldrb	r3, [r3, #6]
 80045c2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80045c4:	7bbb      	ldrb	r3, [r7, #14]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_SUBGHZ_Init+0x2c>
 80045ca:	7bbb      	ldrb	r3, [r7, #14]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d109      	bne.n	80045e4 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd f9c8 	bl	800196c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80045dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80045e0:	f7ff ffcc 	bl	800457c <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80045e4:	7bbb      	ldrb	r3, [r7, #14]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d126      	bne.n	8004638 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80045f0:	f7ff ffa2 	bl	8004538 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80045f4:	4b1c      	ldr	r3, [pc, #112]	; (8004668 <HAL_SUBGHZ_Init+0xc4>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	0cdb      	lsrs	r3, r3, #19
 8004602:	2264      	movs	r2, #100	; 0x64
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d105      	bne.n	800461c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	609a      	str	r2, [r3, #8]
        break;
 800461a:	e007      	b.n	800462c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	3b01      	subs	r3, #1
 8004620:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004622:	f7ff ff99 	bl	8004558 <LL_RCC_IsRFUnderReset>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1ee      	bne.n	800460a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800462c:	f7ff ff34 	bl	8004498 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004630:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004634:	f7ff ff1c 	bl	8004470 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004638:	f7ff ff4e 	bl	80044d8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 faac 	bl	8004ba4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	719a      	strb	r2, [r3, #6]

  return status;
 800465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000008 	.word	0x20000008

0800466c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	461a      	mov	r2, r3
 8004678:	460b      	mov	r3, r1
 800467a:	817b      	strh	r3, [r7, #10]
 800467c:	4613      	mov	r3, r2
 800467e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	799b      	ldrb	r3, [r3, #6]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d14a      	bne.n	8004720 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	795b      	ldrb	r3, [r3, #5]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004692:	2302      	movs	r3, #2
 8004694:	e045      	b.n	8004722 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2202      	movs	r2, #2
 80046a0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 fb4c 	bl	8004d40 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046a8:	f7ff ff06 	bl	80044b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80046ac:	210d      	movs	r1, #13
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fa98 	bl	8004be4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80046b4:	897b      	ldrh	r3, [r7, #10]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	4619      	mov	r1, r3
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fa90 	bl	8004be4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80046c4:	897b      	ldrh	r3, [r7, #10]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	4619      	mov	r1, r3
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fa8a 	bl	8004be4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	82bb      	strh	r3, [r7, #20]
 80046d4:	e00a      	b.n	80046ec <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80046d6:	8abb      	ldrh	r3, [r7, #20]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	4413      	add	r3, r2
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	4619      	mov	r1, r3
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fa7f 	bl	8004be4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80046e6:	8abb      	ldrh	r3, [r7, #20]
 80046e8:	3301      	adds	r3, #1
 80046ea:	82bb      	strh	r3, [r7, #20]
 80046ec:	8aba      	ldrh	r2, [r7, #20]
 80046ee:	893b      	ldrh	r3, [r7, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d3f0      	bcc.n	80046d6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046f4:	f7ff fed0 	bl	8004498 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fb45 	bl	8004d88 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
 800470a:	e001      	b.n	8004710 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	715a      	strb	r2, [r3, #5]

    return status;
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	e000      	b.n	8004722 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
  }
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b088      	sub	sp, #32
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	461a      	mov	r2, r3
 8004736:	460b      	mov	r3, r1
 8004738:	817b      	strh	r3, [r7, #10]
 800473a:	4613      	mov	r3, r2
 800473c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	799b      	ldrb	r3, [r3, #6]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d14a      	bne.n	80047e2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	795b      	ldrb	r3, [r3, #5]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004754:	2302      	movs	r3, #2
 8004756:	e045      	b.n	80047e4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 faee 	bl	8004d40 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004764:	f7ff fea8 	bl	80044b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004768:	211d      	movs	r1, #29
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 fa3a 	bl	8004be4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004770:	897b      	ldrh	r3, [r7, #10]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	b29b      	uxth	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	4619      	mov	r1, r3
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 fa32 	bl	8004be4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004780:	897b      	ldrh	r3, [r7, #10]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	4619      	mov	r1, r3
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fa2c 	bl	8004be4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800478c:	2100      	movs	r1, #0
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fa28 	bl	8004be4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004794:	2300      	movs	r3, #0
 8004796:	82fb      	strh	r3, [r7, #22]
 8004798:	e009      	b.n	80047ae <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800479a:	69b9      	ldr	r1, [r7, #24]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fa77 	bl	8004c90 <SUBGHZSPI_Receive>
      pData++;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	3301      	adds	r3, #1
 80047a6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80047a8:	8afb      	ldrh	r3, [r7, #22]
 80047aa:	3301      	adds	r3, #1
 80047ac:	82fb      	strh	r3, [r7, #22]
 80047ae:	8afa      	ldrh	r2, [r7, #22]
 80047b0:	893b      	ldrh	r3, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d3f1      	bcc.n	800479a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80047b6:	f7ff fe6f 	bl	8004498 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fae4 	bl	8004d88 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e001      	b.n	80047d2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	715a      	strb	r2, [r3, #5]

    return status;
 80047de:	7ffb      	ldrb	r3, [r7, #31]
 80047e0:	e000      	b.n	80047e4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3720      	adds	r7, #32
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	607a      	str	r2, [r7, #4]
 80047f6:	461a      	mov	r2, r3
 80047f8:	460b      	mov	r3, r1
 80047fa:	72fb      	strb	r3, [r7, #11]
 80047fc:	4613      	mov	r3, r2
 80047fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	799b      	ldrb	r3, [r3, #6]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b01      	cmp	r3, #1
 8004808:	d14a      	bne.n	80048a0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	795b      	ldrb	r3, [r3, #5]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004812:	2302      	movs	r3, #2
 8004814:	e045      	b.n	80048a2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fa8f 	bl	8004d40 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	2b84      	cmp	r3, #132	; 0x84
 8004826:	d002      	beq.n	800482e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004828:	7afb      	ldrb	r3, [r7, #11]
 800482a:	2b94      	cmp	r3, #148	; 0x94
 800482c:	d103      	bne.n	8004836 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	711a      	strb	r2, [r3, #4]
 8004834:	e002      	b.n	800483c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800483c:	f7ff fe3c 	bl	80044b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004840:	7afb      	ldrb	r3, [r7, #11]
 8004842:	4619      	mov	r1, r3
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f9cd 	bl	8004be4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800484a:	2300      	movs	r3, #0
 800484c:	82bb      	strh	r3, [r7, #20]
 800484e:	e00a      	b.n	8004866 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004850:	8abb      	ldrh	r3, [r7, #20]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f9c2 	bl	8004be4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004860:	8abb      	ldrh	r3, [r7, #20]
 8004862:	3301      	adds	r3, #1
 8004864:	82bb      	strh	r3, [r7, #20]
 8004866:	8aba      	ldrh	r2, [r7, #20]
 8004868:	893b      	ldrh	r3, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d3f0      	bcc.n	8004850 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800486e:	f7ff fe13 	bl	8004498 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004872:	7afb      	ldrb	r3, [r7, #11]
 8004874:	2b84      	cmp	r3, #132	; 0x84
 8004876:	d002      	beq.n	800487e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fa85 	bl	8004d88 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]
 800488a:	e001      	b.n	8004890 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	715a      	strb	r2, [r3, #5]

    return status;
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	e000      	b.n	80048a2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b088      	sub	sp, #32
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	461a      	mov	r2, r3
 80048b6:	460b      	mov	r3, r1
 80048b8:	72fb      	strb	r3, [r7, #11]
 80048ba:	4613      	mov	r3, r2
 80048bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	799b      	ldrb	r3, [r3, #6]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d13d      	bne.n	8004948 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	795b      	ldrb	r3, [r3, #5]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e038      	b.n	800494a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fa2e 	bl	8004d40 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80048e4:	f7ff fde8 	bl	80044b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80048e8:	7afb      	ldrb	r3, [r7, #11]
 80048ea:	4619      	mov	r1, r3
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f979 	bl	8004be4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80048f2:	2100      	movs	r1, #0
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f975 	bl	8004be4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80048fa:	2300      	movs	r3, #0
 80048fc:	82fb      	strh	r3, [r7, #22]
 80048fe:	e009      	b.n	8004914 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f9c4 	bl	8004c90 <SUBGHZSPI_Receive>
      pData++;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	3301      	adds	r3, #1
 800490c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800490e:	8afb      	ldrh	r3, [r7, #22]
 8004910:	3301      	adds	r3, #1
 8004912:	82fb      	strh	r3, [r7, #22]
 8004914:	8afa      	ldrh	r2, [r7, #22]
 8004916:	893b      	ldrh	r3, [r7, #8]
 8004918:	429a      	cmp	r2, r3
 800491a:	d3f1      	bcc.n	8004900 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800491c:	f7ff fdbc 	bl	8004498 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fa31 	bl	8004d88 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e001      	b.n	8004938 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	715a      	strb	r2, [r3, #5]

    return status;
 8004944:	7ffb      	ldrb	r3, [r7, #31]
 8004946:	e000      	b.n	800494a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
  }
}
 800494a:	4618      	mov	r0, r3
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b086      	sub	sp, #24
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	461a      	mov	r2, r3
 800495e:	460b      	mov	r3, r1
 8004960:	72fb      	strb	r3, [r7, #11]
 8004962:	4613      	mov	r3, r2
 8004964:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	799b      	ldrb	r3, [r3, #6]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d13e      	bne.n	80049ee <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	795b      	ldrb	r3, [r3, #5]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004978:	2302      	movs	r3, #2
 800497a:	e039      	b.n	80049f0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f9dc 	bl	8004d40 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004988:	f7ff fd96 	bl	80044b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800498c:	210e      	movs	r1, #14
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f928 	bl	8004be4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004994:	7afb      	ldrb	r3, [r7, #11]
 8004996:	4619      	mov	r1, r3
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f923 	bl	8004be4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800499e:	2300      	movs	r3, #0
 80049a0:	82bb      	strh	r3, [r7, #20]
 80049a2:	e00a      	b.n	80049ba <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80049a4:	8abb      	ldrh	r3, [r7, #20]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4413      	add	r3, r2
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	4619      	mov	r1, r3
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f918 	bl	8004be4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80049b4:	8abb      	ldrh	r3, [r7, #20]
 80049b6:	3301      	adds	r3, #1
 80049b8:	82bb      	strh	r3, [r7, #20]
 80049ba:	8aba      	ldrh	r2, [r7, #20]
 80049bc:	893b      	ldrh	r3, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d3f0      	bcc.n	80049a4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80049c2:	f7ff fd69 	bl	8004498 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f9de 	bl	8004d88 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75fb      	strb	r3, [r7, #23]
 80049d8:	e001      	b.n	80049de <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	715a      	strb	r2, [r3, #5]

    return status;
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	e000      	b.n	80049f0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
  }
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	461a      	mov	r2, r3
 8004a04:	460b      	mov	r3, r1
 8004a06:	72fb      	strb	r3, [r7, #11]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	799b      	ldrb	r3, [r3, #6]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d141      	bne.n	8004a9e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	795b      	ldrb	r3, [r3, #5]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e03c      	b.n	8004aa0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f987 	bl	8004d40 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a32:	f7ff fd41 	bl	80044b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004a36:	211e      	movs	r1, #30
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f8d3 	bl	8004be4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
 8004a40:	4619      	mov	r1, r3
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f8ce 	bl	8004be4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004a48:	2100      	movs	r1, #0
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f8ca 	bl	8004be4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a50:	2300      	movs	r3, #0
 8004a52:	82fb      	strh	r3, [r7, #22]
 8004a54:	e009      	b.n	8004a6a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004a56:	69b9      	ldr	r1, [r7, #24]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f919 	bl	8004c90 <SUBGHZSPI_Receive>
      pData++;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	3301      	adds	r3, #1
 8004a62:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004a64:	8afb      	ldrh	r3, [r7, #22]
 8004a66:	3301      	adds	r3, #1
 8004a68:	82fb      	strh	r3, [r7, #22]
 8004a6a:	8afa      	ldrh	r2, [r7, #22]
 8004a6c:	893b      	ldrh	r3, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d3f1      	bcc.n	8004a56 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a72:	f7ff fd11 	bl	8004498 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f986 	bl	8004d88 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e001      	b.n	8004a8e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	715a      	strb	r2, [r3, #5]

    return status;
 8004a9a:	7ffb      	ldrb	r3, [r7, #31]
 8004a9c:	e000      	b.n	8004aa0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004ab4:	f107 020c 	add.w	r2, r7, #12
 8004ab8:	2302      	movs	r3, #2
 8004aba:	2112      	movs	r1, #18
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff fef4 	bl	80048aa <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004ac2:	7b3b      	ldrb	r3, [r7, #12]
 8004ac4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004ac6:	89fb      	ldrh	r3, [r7, #14]
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	b21a      	sxth	r2, r3
 8004acc:	7b7b      	ldrb	r3, [r7, #13]
 8004ace:	b21b      	sxth	r3, r3
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	b21b      	sxth	r3, r3
 8004ad4:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004ad6:	f107 020c 	add.w	r2, r7, #12
 8004ada:	2302      	movs	r3, #2
 8004adc:	2102      	movs	r1, #2
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fe84 	bl	80047ec <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004ae4:	89fb      	ldrh	r3, [r7, #14]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f005 fac2 	bl	800a078 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004af4:	89fb      	ldrh	r3, [r7, #14]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f005 fac8 	bl	800a094 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004b04:	89fb      	ldrh	r3, [r7, #14]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f005 fb18 	bl	800a144 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004b14:	89fb      	ldrh	r3, [r7, #14]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f005 fb1e 	bl	800a160 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004b24:	89fb      	ldrh	r3, [r7, #14]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f005 fb24 	bl	800a17c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004b34:	89fb      	ldrh	r3, [r7, #14]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f005 faf2 	bl	800a128 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004b44:	89fb      	ldrh	r3, [r7, #14]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f005 faae 	bl	800a0b0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004b54:	89fb      	ldrh	r3, [r7, #14]
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00d      	beq.n	8004b7a <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004b5e:	89fb      	ldrh	r3, [r7, #14]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004b68:	2101      	movs	r1, #1
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f005 faae 	bl	800a0cc <HAL_SUBGHZ_CADStatusCallback>
 8004b70:	e003      	b.n	8004b7a <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004b72:	2100      	movs	r1, #0
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f005 faa9 	bl	800a0cc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f005 fabf 	bl	800a108 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004b8a:	89fb      	ldrh	r3, [r7, #14]
 8004b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f005 faff 	bl	800a198 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <SUBGHZSPI_Init+0x3c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0b      	ldr	r2, [pc, #44]	; (8004be0 <SUBGHZSPI_Init+0x3c>)
 8004bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004bb8:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <SUBGHZSPI_Init+0x3c>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004bc0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <SUBGHZSPI_Init+0x3c>)
 8004bc4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <SUBGHZSPI_Init+0x3c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <SUBGHZSPI_Init+0x3c>)
 8004bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd4:	6013      	str	r3, [r2, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr
 8004be0:	58010000 	.word	0x58010000

08004be4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004bf4:	4b23      	ldr	r3, [pc, #140]	; (8004c84 <SUBGHZSPI_Transmit+0xa0>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	0cdb      	lsrs	r3, r3, #19
 8004c02:	2264      	movs	r2, #100	; 0x64
 8004c04:	fb02 f303 	mul.w	r3, r2, r3
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	609a      	str	r2, [r3, #8]
      break;
 8004c1a:	e008      	b.n	8004c2e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004c22:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <SUBGHZSPI_Transmit+0xa4>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d1ed      	bne.n	8004c0a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004c2e:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <SUBGHZSPI_Transmit+0xa8>)
 8004c30:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <SUBGHZSPI_Transmit+0xa0>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	0cdb      	lsrs	r3, r3, #19
 8004c46:	2264      	movs	r2, #100	; 0x64
 8004c48:	fb02 f303 	mul.w	r3, r2, r3
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	609a      	str	r2, [r3, #8]
      break;
 8004c5e:	e008      	b.n	8004c72 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004c66:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <SUBGHZSPI_Transmit+0xa4>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d1ed      	bne.n	8004c4e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <SUBGHZSPI_Transmit+0xa4>)
 8004c74:	68db      	ldr	r3, [r3, #12]

  return status;
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000008 	.word	0x20000008
 8004c88:	58010000 	.word	0x58010000
 8004c8c:	5801000c 	.word	0x5801000c

08004c90 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c9e:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <SUBGHZSPI_Receive+0xa4>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	0cdb      	lsrs	r3, r3, #19
 8004cac:	2264      	movs	r2, #100	; 0x64
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d105      	bne.n	8004cc6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	609a      	str	r2, [r3, #8]
      break;
 8004cc4:	e008      	b.n	8004cd8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <SUBGHZSPI_Receive+0xa8>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d1ed      	bne.n	8004cb4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004cd8:	4b18      	ldr	r3, [pc, #96]	; (8004d3c <SUBGHZSPI_Receive+0xac>)
 8004cda:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	22ff      	movs	r2, #255	; 0xff
 8004ce0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004ce2:	4b14      	ldr	r3, [pc, #80]	; (8004d34 <SUBGHZSPI_Receive+0xa4>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	0cdb      	lsrs	r3, r3, #19
 8004cf0:	2264      	movs	r2, #100	; 0x64
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d105      	bne.n	8004d0a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	609a      	str	r2, [r3, #8]
      break;
 8004d08:	e008      	b.n	8004d1c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <SUBGHZSPI_Receive+0xa8>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d1ed      	bne.n	8004cf8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <SUBGHZSPI_Receive+0xa8>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	701a      	strb	r2, [r3, #0]

  return status;
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000008 	.word	0x20000008
 8004d38:	58010000 	.word	0x58010000
 8004d3c:	5801000c 	.word	0x5801000c

08004d40 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	791b      	ldrb	r3, [r3, #4]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d111      	bne.n	8004d74 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <SUBGHZ_CheckDeviceReady+0x44>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4413      	add	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004d60:	f7ff fbaa 	bl	80044b8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f9      	bne.n	8004d64 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004d70:	f7ff fb92 	bl	8004498 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f807 	bl	8004d88 <SUBGHZ_WaitOnBusy>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000008 	.word	0x20000008

08004d88 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004d94:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <SUBGHZ_WaitOnBusy+0x58>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4413      	add	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	0d1b      	lsrs	r3, r3, #20
 8004da2:	2264      	movs	r2, #100	; 0x64
 8004da4:	fb02 f303 	mul.w	r3, r2, r3
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004daa:	f7ff fbb3 	bl	8004514 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004dae:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d105      	bne.n	8004dc2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	609a      	str	r2, [r3, #8]
      break;
 8004dc0:	e009      	b.n	8004dd6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004dc8:	f7ff fb92 	bl	80044f0 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d0e9      	beq.n	8004daa <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000008 	.word	0x20000008

08004de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e049      	b.n	8004e8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fc fef6 	bl	8001bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f000 fa90 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d001      	beq.n	8004eac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e02e      	b.n	8004f0a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a16      	ldr	r2, [pc, #88]	; (8004f14 <HAL_TIM_Base_Start+0x80>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <HAL_TIM_Base_Start+0x34>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d115      	bne.n	8004ef4 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	4b12      	ldr	r3, [pc, #72]	; (8004f18 <HAL_TIM_Base_Start+0x84>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b06      	cmp	r3, #6
 8004ed8:	d015      	beq.n	8004f06 <HAL_TIM_Base_Start+0x72>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee0:	d011      	beq.n	8004f06 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0201 	orr.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	e008      	b.n	8004f06 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e000      	b.n	8004f08 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	00010007 	.word	0x00010007

08004f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d122      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d11b      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0202 	mvn.w	r2, #2
 8004f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f9d6 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9c9 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f9d8 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d122      	bne.n	8004fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d11b      	bne.n	8004fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0204 	mvn.w	r2, #4
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9ac 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 8004fb8:	e005      	b.n	8004fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f99f 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f9ae 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d122      	bne.n	8005020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d11b      	bne.n	8005020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0208 	mvn.w	r2, #8
 8004ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f982 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 800500c:	e005      	b.n	800501a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f975 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f984 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b10      	cmp	r3, #16
 800502c:	d122      	bne.n	8005074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	2b10      	cmp	r3, #16
 800503a:	d11b      	bne.n	8005074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0210 	mvn.w	r2, #16
 8005044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2208      	movs	r2, #8
 800504a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f958 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 8005060:	e005      	b.n	800506e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f94b 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f95a 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	d10e      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b01      	cmp	r3, #1
 800508e:	d107      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0201 	mvn.w	r2, #1
 8005098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f926 	bl	80052ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d10e      	bne.n	80050cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b8:	2b80      	cmp	r3, #128	; 0x80
 80050ba:	d107      	bne.n	80050cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa9f 	bl	800560a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050da:	d10e      	bne.n	80050fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e6:	2b80      	cmp	r3, #128	; 0x80
 80050e8:	d107      	bne.n	80050fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fa91 	bl	800561c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d10e      	bne.n	8005126 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d107      	bne.n	8005126 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800511e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f907 	bl	8005334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b20      	cmp	r3, #32
 8005132:	d10e      	bne.n	8005152 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b20      	cmp	r3, #32
 8005140:	d107      	bne.n	8005152 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f06f 0220 	mvn.w	r2, #32
 800514a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fa53 	bl	80055f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_TIM_ConfigClockSource+0x1c>
 8005172:	2302      	movs	r3, #2
 8005174:	e0b6      	b.n	80052e4 <HAL_TIM_ConfigClockSource+0x18a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005194:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005198:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b2:	d03e      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0xd8>
 80051b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b8:	f200 8087 	bhi.w	80052ca <HAL_TIM_ConfigClockSource+0x170>
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c0:	f000 8086 	beq.w	80052d0 <HAL_TIM_ConfigClockSource+0x176>
 80051c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c8:	d87f      	bhi.n	80052ca <HAL_TIM_ConfigClockSource+0x170>
 80051ca:	2b70      	cmp	r3, #112	; 0x70
 80051cc:	d01a      	beq.n	8005204 <HAL_TIM_ConfigClockSource+0xaa>
 80051ce:	2b70      	cmp	r3, #112	; 0x70
 80051d0:	d87b      	bhi.n	80052ca <HAL_TIM_ConfigClockSource+0x170>
 80051d2:	2b60      	cmp	r3, #96	; 0x60
 80051d4:	d050      	beq.n	8005278 <HAL_TIM_ConfigClockSource+0x11e>
 80051d6:	2b60      	cmp	r3, #96	; 0x60
 80051d8:	d877      	bhi.n	80052ca <HAL_TIM_ConfigClockSource+0x170>
 80051da:	2b50      	cmp	r3, #80	; 0x50
 80051dc:	d03c      	beq.n	8005258 <HAL_TIM_ConfigClockSource+0xfe>
 80051de:	2b50      	cmp	r3, #80	; 0x50
 80051e0:	d873      	bhi.n	80052ca <HAL_TIM_ConfigClockSource+0x170>
 80051e2:	2b40      	cmp	r3, #64	; 0x40
 80051e4:	d058      	beq.n	8005298 <HAL_TIM_ConfigClockSource+0x13e>
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d86f      	bhi.n	80052ca <HAL_TIM_ConfigClockSource+0x170>
 80051ea:	2b30      	cmp	r3, #48	; 0x30
 80051ec:	d064      	beq.n	80052b8 <HAL_TIM_ConfigClockSource+0x15e>
 80051ee:	2b30      	cmp	r3, #48	; 0x30
 80051f0:	d86b      	bhi.n	80052ca <HAL_TIM_ConfigClockSource+0x170>
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d060      	beq.n	80052b8 <HAL_TIM_ConfigClockSource+0x15e>
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d867      	bhi.n	80052ca <HAL_TIM_ConfigClockSource+0x170>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d05c      	beq.n	80052b8 <HAL_TIM_ConfigClockSource+0x15e>
 80051fe:	2b10      	cmp	r3, #16
 8005200:	d05a      	beq.n	80052b8 <HAL_TIM_ConfigClockSource+0x15e>
 8005202:	e062      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005214:	f000 f973 	bl	80054fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005226:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	609a      	str	r2, [r3, #8]
      break;
 8005230:	e04f      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005242:	f000 f95c 	bl	80054fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005254:	609a      	str	r2, [r3, #8]
      break;
 8005256:	e03c      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005264:	461a      	mov	r2, r3
 8005266:	f000 f8d1 	bl	800540c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2150      	movs	r1, #80	; 0x50
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f928 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 8005276:	e02c      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005284:	461a      	mov	r2, r3
 8005286:	f000 f8ef 	bl	8005468 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2160      	movs	r1, #96	; 0x60
 8005290:	4618      	mov	r0, r3
 8005292:	f000 f918 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 8005296:	e01c      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a4:	461a      	mov	r2, r3
 80052a6:	f000 f8b1 	bl	800540c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2140      	movs	r1, #64	; 0x40
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 f908 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 80052b6:	e00c      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f000 f8ff 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 80052c8:	e003      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	73fb      	strb	r3, [r7, #15]
      break;
 80052ce:	e000      	b.n	80052d2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80052d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr

080052fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr
	...

08005348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a29      	ldr	r2, [pc, #164]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_Base_SetConfig+0x20>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d108      	bne.n	800537a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a20      	ldr	r2, [pc, #128]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00b      	beq.n	800539a <TIM_Base_SetConfig+0x52>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005388:	d007      	beq.n	800539a <TIM_Base_SetConfig+0x52>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <TIM_Base_SetConfig+0xbc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d003      	beq.n	800539a <TIM_Base_SetConfig+0x52>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <TIM_Base_SetConfig+0xc0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d108      	bne.n	80053ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a0b      	ldr	r2, [pc, #44]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d007      	beq.n	80053e8 <TIM_Base_SetConfig+0xa0>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a0a      	ldr	r2, [pc, #40]	; (8005404 <TIM_Base_SetConfig+0xbc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <TIM_Base_SetConfig+0xa0>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a09      	ldr	r2, [pc, #36]	; (8005408 <TIM_Base_SetConfig+0xc0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d103      	bne.n	80053f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	615a      	str	r2, [r3, #20]
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40014400 	.word	0x40014400
 8005408:	40014800 	.word	0x40014800

0800540c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f023 0201 	bic.w	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f023 030a 	bic.w	r3, r3, #10
 8005448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr

08005468 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f023 0210 	bic.w	r2, r3, #16
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005492:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	031b      	lsls	r3, r3, #12
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	621a      	str	r2, [r3, #32]
}
 80054bc:	bf00      	nop
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80054dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f043 0307 	orr.w	r3, r3, #7
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	609a      	str	r2, [r3, #8]
}
 80054f4:	bf00      	nop
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054fe:	b480      	push	{r7}
 8005500:	b087      	sub	sp, #28
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	607a      	str	r2, [r7, #4]
 800550a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005518:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	021a      	lsls	r2, r3, #8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	431a      	orrs	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4313      	orrs	r3, r2
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	609a      	str	r2, [r3, #8]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005550:	2302      	movs	r3, #2
 8005552:	e04a      	b.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d108      	bne.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005584:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a11      	ldr	r2, [pc, #68]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d10c      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr
 80055f4:	40012c00 	.word	0x40012c00

080055f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <LL_RCC_GetUSARTClockSource>:
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	401a      	ands	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	4313      	orrs	r3, r2
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <LL_RCC_GetLPUARTClockSource>:
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800565a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4013      	ands	r3, r2
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e042      	b.n	8005708 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fc fc2d 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2224      	movs	r2, #36	; 0x24
 800569e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fd0c 	bl	80060d0 <UART_SetConfig>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e022      	b.n	8005708 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 ff74 	bl	80065b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fffa 	bl	80066fa <UART_CheckIdleState>
 8005706:	4603      	mov	r3, r0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4613      	mov	r3, r2
 800571e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005726:	2b20      	cmp	r3, #32
 8005728:	d173      	bne.n	8005812 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_UART_Transmit+0x26>
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e06c      	b.n	8005814 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2221      	movs	r2, #33	; 0x21
 8005746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800574a:	f7fc f929 	bl	80019a0 <HAL_GetTick>
 800574e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005768:	d108      	bne.n	800577c <HAL_UART_Transmit+0x6c>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d104      	bne.n	800577c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	e003      	b.n	8005784 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005780:	2300      	movs	r3, #0
 8005782:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005784:	e02c      	b.n	80057e0 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2200      	movs	r2, #0
 800578e:	2180      	movs	r1, #128	; 0x80
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f001 f800 	bl	8006796 <UART_WaitOnFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e039      	b.n	8005814 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10b      	bne.n	80057be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	3302      	adds	r3, #2
 80057ba:	61bb      	str	r3, [r7, #24]
 80057bc:	e007      	b.n	80057ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	781a      	ldrb	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	3301      	adds	r3, #1
 80057cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1cc      	bne.n	8005786 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2200      	movs	r2, #0
 80057f4:	2140      	movs	r1, #64	; 0x40
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 ffcd 	bl	8006796 <UART_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e006      	b.n	8005814 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	e000      	b.n	8005814 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005812:	2302      	movs	r3, #2
  }
}
 8005814:	4618      	mov	r0, r3
 8005816:	3720      	adds	r7, #32
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af02      	add	r7, sp, #8
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005832:	2b20      	cmp	r3, #32
 8005834:	f040 80b1 	bne.w	800599a <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_UART_Receive+0x28>
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0a9      	b.n	800599c <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2222      	movs	r2, #34	; 0x22
 8005854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800585e:	f7fc f89f 	bl	80019a0 <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587c:	d10e      	bne.n	800589c <HAL_UART_Receive+0x80>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d105      	bne.n	8005892 <HAL_UART_Receive+0x76>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f240 12ff 	movw	r2, #511	; 0x1ff
 800588c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005890:	e02d      	b.n	80058ee <HAL_UART_Receive+0xd2>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	22ff      	movs	r2, #255	; 0xff
 8005896:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800589a:	e028      	b.n	80058ee <HAL_UART_Receive+0xd2>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10d      	bne.n	80058c0 <HAL_UART_Receive+0xa4>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <HAL_UART_Receive+0x9a>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	22ff      	movs	r2, #255	; 0xff
 80058b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058b4:	e01b      	b.n	80058ee <HAL_UART_Receive+0xd2>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	227f      	movs	r2, #127	; 0x7f
 80058ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058be:	e016      	b.n	80058ee <HAL_UART_Receive+0xd2>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058c8:	d10d      	bne.n	80058e6 <HAL_UART_Receive+0xca>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d104      	bne.n	80058dc <HAL_UART_Receive+0xc0>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	227f      	movs	r2, #127	; 0x7f
 80058d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058da:	e008      	b.n	80058ee <HAL_UART_Receive+0xd2>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	223f      	movs	r2, #63	; 0x3f
 80058e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058e4:	e003      	b.n	80058ee <HAL_UART_Receive+0xd2>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80058f4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fe:	d108      	bne.n	8005912 <HAL_UART_Receive+0xf6>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	e003      	b.n	800591a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800591a:	e032      	b.n	8005982 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2200      	movs	r2, #0
 8005924:	2120      	movs	r1, #32
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 ff35 	bl	8006796 <UART_WaitOnFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e032      	b.n	800599c <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10c      	bne.n	8005956 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	b29a      	uxth	r2, r3
 8005944:	8a7b      	ldrh	r3, [r7, #18]
 8005946:	4013      	ands	r3, r2
 8005948:	b29a      	uxth	r2, r3
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	3302      	adds	r3, #2
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	e00c      	b.n	8005970 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	b2da      	uxtb	r2, r3
 800595e:	8a7b      	ldrh	r3, [r7, #18]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	4013      	ands	r3, r2
 8005964:	b2da      	uxtb	r2, r3
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3301      	adds	r3, #1
 800596e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1c6      	bne.n	800591c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e000      	b.n	800599c <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800599a:	2302      	movs	r3, #2
  }
}
 800599c:	4618      	mov	r0, r3
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	4613      	mov	r3, r2
 80059b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d137      	bne.n	8005a2c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Receive_DMA+0x24>
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e030      	b.n	8005a2e <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a18      	ldr	r2, [pc, #96]	; (8005a38 <HAL_UART_Receive_DMA+0x94>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d01f      	beq.n	8005a1c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d018      	beq.n	8005a1c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	613b      	str	r3, [r7, #16]
   return(result);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	623b      	str	r3, [r7, #32]
 8005a0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	69f9      	ldr	r1, [r7, #28]
 8005a0e:	6a3a      	ldr	r2, [r7, #32]
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e6      	bne.n	80059ea <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 ff80 	bl	8006928 <UART_Start_Receive_DMA>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	e000      	b.n	8005a2e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
  }
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3728      	adds	r7, #40	; 0x28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40008000 	.word	0x40008000

08005a3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b0ba      	sub	sp, #232	; 0xe8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a66:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d11b      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d015      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d105      	bne.n	8005a9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d009      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 82e3 	beq.w	800606c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
      }
      return;
 8005aae:	e2dd      	b.n	800606c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 8123 	beq.w	8005d00 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005aba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005abe:	4b8d      	ldr	r3, [pc, #564]	; (8005cf4 <HAL_UART_IRQHandler+0x2b8>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ac6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005aca:	4b8b      	ldr	r3, [pc, #556]	; (8005cf8 <HAL_UART_IRQHandler+0x2bc>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8116 	beq.w	8005d00 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d011      	beq.n	8005b04 <HAL_UART_IRQHandler+0xc8>
 8005ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00b      	beq.n	8005b04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2201      	movs	r2, #1
 8005af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d011      	beq.n	8005b34 <HAL_UART_IRQHandler+0xf8>
 8005b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00b      	beq.n	8005b34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2202      	movs	r2, #2
 8005b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	f043 0204 	orr.w	r2, r3, #4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d011      	beq.n	8005b64 <HAL_UART_IRQHandler+0x128>
 8005b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2204      	movs	r2, #4
 8005b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5a:	f043 0202 	orr.w	r2, r3, #2
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d017      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b80:	4b5c      	ldr	r3, [pc, #368]	; (8005cf4 <HAL_UART_IRQHandler+0x2b8>)
 8005b82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b96:	f043 0208 	orr.w	r2, r3, #8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d012      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x196>
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00c      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc8:	f043 0220 	orr.w	r2, r3, #32
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 8249 	beq.w	8006070 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d013      	beq.n	8005c12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d105      	bne.n	8005c02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b40      	cmp	r3, #64	; 0x40
 8005c28:	d005      	beq.n	8005c36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d054      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 ff5c 	bl	8006af4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c46:	2b40      	cmp	r3, #64	; 0x40
 8005c48:	d146      	bne.n	8005cd8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3308      	adds	r3, #8
 8005c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3308      	adds	r3, #8
 8005c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1d9      	bne.n	8005c4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d017      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca6:	4a15      	ldr	r2, [pc, #84]	; (8005cfc <HAL_UART_IRQHandler+0x2c0>)
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fc fd39 	bl	8002728 <HAL_DMA_Abort_IT>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d019      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005cca:	4610      	mov	r0, r2
 8005ccc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cce:	e00f      	b.n	8005cf0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f9e9 	bl	80060a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd6:	e00b      	b.n	8005cf0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f9e5 	bl	80060a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cde:	e007      	b.n	8005cf0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f9e1 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005cee:	e1bf      	b.n	8006070 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf0:	bf00      	nop
    return;
 8005cf2:	e1bd      	b.n	8006070 <HAL_UART_IRQHandler+0x634>
 8005cf4:	10000001 	.word	0x10000001
 8005cf8:	04000120 	.word	0x04000120
 8005cfc:	08006da9 	.word	0x08006da9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	f040 8153 	bne.w	8005fb0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 814c 	beq.w	8005fb0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8145 	beq.w	8005fb0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2210      	movs	r2, #16
 8005d2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	f040 80bb 	bne.w	8005eb4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 818f 	beq.w	8006074 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d60:	429a      	cmp	r2, r3
 8005d62:	f080 8187 	bcs.w	8006074 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 8087 	bne.w	8005e92 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005db2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1da      	bne.n	8005d84 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3308      	adds	r3, #8
 8005dee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005df2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005df6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005dfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e1      	bne.n	8005dce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3308      	adds	r3, #8
 8005e2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e3      	bne.n	8005e0a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e60:	f023 0310 	bic.w	r3, r3, #16
 8005e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e72:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e4      	bne.n	8005e50 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fc fbed 	bl	800266c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f904 	bl	80060ba <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005eb2:	e0df      	b.n	8006074 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 80d1 	beq.w	8006078 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005ed6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 80cc 	beq.w	8006078 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f02:	647b      	str	r3, [r7, #68]	; 0x44
 8005f04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e4      	bne.n	8005ee0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	e853 3f00 	ldrex	r3, [r3]
 8005f24:	623b      	str	r3, [r7, #32]
   return(result);
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	f023 0301 	bic.w	r3, r3, #1
 8005f30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3308      	adds	r3, #8
 8005f3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f3e:	633a      	str	r2, [r7, #48]	; 0x30
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e1      	bne.n	8005f16 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0310 	bic.w	r3, r3, #16
 8005f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	69b9      	ldr	r1, [r7, #24]
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	617b      	str	r3, [r7, #20]
   return(result);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e4      	bne.n	8005f66 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f886 	bl	80060ba <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fae:	e063      	b.n	8006078 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00e      	beq.n	8005fda <HAL_UART_IRQHandler+0x59e>
 8005fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d008      	beq.n	8005fda <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 ff29 	bl	8006e2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fd8:	e051      	b.n	800607e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d014      	beq.n	8006010 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d105      	bne.n	8005ffe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d008      	beq.n	8006010 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006002:	2b00      	cmp	r3, #0
 8006004:	d03a      	beq.n	800607c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
    }
    return;
 800600e:	e035      	b.n	800607c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <HAL_UART_IRQHandler+0x5f4>
 800601c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fed3 	bl	8006dd4 <UART_EndTransmit_IT>
    return;
 800602e:	e026      	b.n	800607e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d009      	beq.n	8006050 <HAL_UART_IRQHandler+0x614>
 800603c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006040:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 ff00 	bl	8006e4e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800604e:	e016      	b.n	800607e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d010      	beq.n	800607e <HAL_UART_IRQHandler+0x642>
 800605c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006060:	2b00      	cmp	r3, #0
 8006062:	da0c      	bge.n	800607e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fee9 	bl	8006e3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800606a:	e008      	b.n	800607e <HAL_UART_IRQHandler+0x642>
      return;
 800606c:	bf00      	nop
 800606e:	e006      	b.n	800607e <HAL_UART_IRQHandler+0x642>
    return;
 8006070:	bf00      	nop
 8006072:	e004      	b.n	800607e <HAL_UART_IRQHandler+0x642>
      return;
 8006074:	bf00      	nop
 8006076:	e002      	b.n	800607e <HAL_UART_IRQHandler+0x642>
      return;
 8006078:	bf00      	nop
 800607a:	e000      	b.n	800607e <HAL_UART_IRQHandler+0x642>
    return;
 800607c:	bf00      	nop
  }
}
 800607e:	37e8      	adds	r7, #232	; 0xe8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	bc80      	pop	{r7}
 8006094:	4770      	bx	lr

08006096 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr

080060ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	460b      	mov	r3, r1
 80060c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc80      	pop	{r7}
 80060ce:	4770      	bx	lr

080060d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060d4:	b08c      	sub	sp, #48	; 0x30
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b94      	ldr	r3, [pc, #592]	; (8006350 <UART_SetConfig+0x280>)
 8006100:	4013      	ands	r3, r2
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006108:	430b      	orrs	r3, r1
 800610a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a89      	ldr	r2, [pc, #548]	; (8006354 <UART_SetConfig+0x284>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006138:	4313      	orrs	r3, r2
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006146:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	6812      	ldr	r2, [r2, #0]
 800614e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006150:	430b      	orrs	r3, r1
 8006152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	f023 010f 	bic.w	r1, r3, #15
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a7a      	ldr	r2, [pc, #488]	; (8006358 <UART_SetConfig+0x288>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d127      	bne.n	80061c4 <UART_SetConfig+0xf4>
 8006174:	2003      	movs	r0, #3
 8006176:	f7ff fa5a 	bl	800562e <LL_RCC_GetUSARTClockSource>
 800617a:	4603      	mov	r3, r0
 800617c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006180:	2b03      	cmp	r3, #3
 8006182:	d81b      	bhi.n	80061bc <UART_SetConfig+0xec>
 8006184:	a201      	add	r2, pc, #4	; (adr r2, 800618c <UART_SetConfig+0xbc>)
 8006186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618a:	bf00      	nop
 800618c:	0800619d 	.word	0x0800619d
 8006190:	080061ad 	.word	0x080061ad
 8006194:	080061a5 	.word	0x080061a5
 8006198:	080061b5 	.word	0x080061b5
 800619c:	2301      	movs	r3, #1
 800619e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a2:	e080      	b.n	80062a6 <UART_SetConfig+0x1d6>
 80061a4:	2302      	movs	r3, #2
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061aa:	e07c      	b.n	80062a6 <UART_SetConfig+0x1d6>
 80061ac:	2304      	movs	r3, #4
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b2:	e078      	b.n	80062a6 <UART_SetConfig+0x1d6>
 80061b4:	2308      	movs	r3, #8
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ba:	e074      	b.n	80062a6 <UART_SetConfig+0x1d6>
 80061bc:	2310      	movs	r3, #16
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061c2:	e070      	b.n	80062a6 <UART_SetConfig+0x1d6>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a64      	ldr	r2, [pc, #400]	; (800635c <UART_SetConfig+0x28c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d138      	bne.n	8006240 <UART_SetConfig+0x170>
 80061ce:	200c      	movs	r0, #12
 80061d0:	f7ff fa2d 	bl	800562e <LL_RCC_GetUSARTClockSource>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80061da:	2b0c      	cmp	r3, #12
 80061dc:	d82c      	bhi.n	8006238 <UART_SetConfig+0x168>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <UART_SetConfig+0x114>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006219 	.word	0x08006219
 80061e8:	08006239 	.word	0x08006239
 80061ec:	08006239 	.word	0x08006239
 80061f0:	08006239 	.word	0x08006239
 80061f4:	08006229 	.word	0x08006229
 80061f8:	08006239 	.word	0x08006239
 80061fc:	08006239 	.word	0x08006239
 8006200:	08006239 	.word	0x08006239
 8006204:	08006221 	.word	0x08006221
 8006208:	08006239 	.word	0x08006239
 800620c:	08006239 	.word	0x08006239
 8006210:	08006239 	.word	0x08006239
 8006214:	08006231 	.word	0x08006231
 8006218:	2300      	movs	r3, #0
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800621e:	e042      	b.n	80062a6 <UART_SetConfig+0x1d6>
 8006220:	2302      	movs	r3, #2
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006226:	e03e      	b.n	80062a6 <UART_SetConfig+0x1d6>
 8006228:	2304      	movs	r3, #4
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800622e:	e03a      	b.n	80062a6 <UART_SetConfig+0x1d6>
 8006230:	2308      	movs	r3, #8
 8006232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006236:	e036      	b.n	80062a6 <UART_SetConfig+0x1d6>
 8006238:	2310      	movs	r3, #16
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623e:	e032      	b.n	80062a6 <UART_SetConfig+0x1d6>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a43      	ldr	r2, [pc, #268]	; (8006354 <UART_SetConfig+0x284>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d12a      	bne.n	80062a0 <UART_SetConfig+0x1d0>
 800624a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800624e:	f7ff fa00 	bl	8005652 <LL_RCC_GetLPUARTClockSource>
 8006252:	4603      	mov	r3, r0
 8006254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006258:	d01a      	beq.n	8006290 <UART_SetConfig+0x1c0>
 800625a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800625e:	d81b      	bhi.n	8006298 <UART_SetConfig+0x1c8>
 8006260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006264:	d00c      	beq.n	8006280 <UART_SetConfig+0x1b0>
 8006266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800626a:	d815      	bhi.n	8006298 <UART_SetConfig+0x1c8>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <UART_SetConfig+0x1a8>
 8006270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006274:	d008      	beq.n	8006288 <UART_SetConfig+0x1b8>
 8006276:	e00f      	b.n	8006298 <UART_SetConfig+0x1c8>
 8006278:	2300      	movs	r3, #0
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627e:	e012      	b.n	80062a6 <UART_SetConfig+0x1d6>
 8006280:	2302      	movs	r3, #2
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006286:	e00e      	b.n	80062a6 <UART_SetConfig+0x1d6>
 8006288:	2304      	movs	r3, #4
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800628e:	e00a      	b.n	80062a6 <UART_SetConfig+0x1d6>
 8006290:	2308      	movs	r3, #8
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006296:	e006      	b.n	80062a6 <UART_SetConfig+0x1d6>
 8006298:	2310      	movs	r3, #16
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800629e:	e002      	b.n	80062a6 <UART_SetConfig+0x1d6>
 80062a0:	2310      	movs	r3, #16
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a2a      	ldr	r2, [pc, #168]	; (8006354 <UART_SetConfig+0x284>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	f040 80a4 	bne.w	80063fa <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d823      	bhi.n	8006302 <UART_SetConfig+0x232>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <UART_SetConfig+0x1f0>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062e5 	.word	0x080062e5
 80062c4:	08006303 	.word	0x08006303
 80062c8:	080062ed 	.word	0x080062ed
 80062cc:	08006303 	.word	0x08006303
 80062d0:	080062f3 	.word	0x080062f3
 80062d4:	08006303 	.word	0x08006303
 80062d8:	08006303 	.word	0x08006303
 80062dc:	08006303 	.word	0x08006303
 80062e0:	080062fb 	.word	0x080062fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e4:	f7fd fde0 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 80062e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062ea:	e010      	b.n	800630e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062ec:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <UART_SetConfig+0x290>)
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062f0:	e00d      	b.n	800630e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f2:	f7fd fd25 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 80062f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062f8:	e009      	b.n	800630e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006300:	e005      	b.n	800630e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800630c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8137 	beq.w	8006584 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	4a12      	ldr	r2, [pc, #72]	; (8006364 <UART_SetConfig+0x294>)
 800631c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006320:	461a      	mov	r2, r3
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	fbb3 f3f2 	udiv	r3, r3, r2
 8006328:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	4413      	add	r3, r2
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	429a      	cmp	r2, r3
 8006338:	d305      	bcc.n	8006346 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	429a      	cmp	r2, r3
 8006344:	d910      	bls.n	8006368 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800634c:	e11a      	b.n	8006584 <UART_SetConfig+0x4b4>
 800634e:	bf00      	nop
 8006350:	cfff69f3 	.word	0xcfff69f3
 8006354:	40008000 	.word	0x40008000
 8006358:	40013800 	.word	0x40013800
 800635c:	40004400 	.word	0x40004400
 8006360:	00f42400 	.word	0x00f42400
 8006364:	0800bda0 	.word	0x0800bda0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	2200      	movs	r2, #0
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	60fa      	str	r2, [r7, #12]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	4a8e      	ldr	r2, [pc, #568]	; (80065b0 <UART_SetConfig+0x4e0>)
 8006376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800637a:	b29b      	uxth	r3, r3
 800637c:	2200      	movs	r2, #0
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	607a      	str	r2, [r7, #4]
 8006382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006386:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800638a:	f7f9 ff49 	bl	8000220 <__aeabi_uldivmod>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4610      	mov	r0, r2
 8006394:	4619      	mov	r1, r3
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	020b      	lsls	r3, r1, #8
 80063a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063a4:	0202      	lsls	r2, r0, #8
 80063a6:	6979      	ldr	r1, [r7, #20]
 80063a8:	6849      	ldr	r1, [r1, #4]
 80063aa:	0849      	lsrs	r1, r1, #1
 80063ac:	2000      	movs	r0, #0
 80063ae:	460c      	mov	r4, r1
 80063b0:	4605      	mov	r5, r0
 80063b2:	eb12 0804 	adds.w	r8, r2, r4
 80063b6:	eb43 0905 	adc.w	r9, r3, r5
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	469a      	mov	sl, r3
 80063c2:	4693      	mov	fp, r2
 80063c4:	4652      	mov	r2, sl
 80063c6:	465b      	mov	r3, fp
 80063c8:	4640      	mov	r0, r8
 80063ca:	4649      	mov	r1, r9
 80063cc:	f7f9 ff28 	bl	8000220 <__aeabi_uldivmod>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4613      	mov	r3, r2
 80063d6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063de:	d308      	bcc.n	80063f2 <UART_SetConfig+0x322>
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e6:	d204      	bcs.n	80063f2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6a3a      	ldr	r2, [r7, #32]
 80063ee:	60da      	str	r2, [r3, #12]
 80063f0:	e0c8      	b.n	8006584 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063f8:	e0c4      	b.n	8006584 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006402:	d167      	bne.n	80064d4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006404:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006408:	2b08      	cmp	r3, #8
 800640a:	d828      	bhi.n	800645e <UART_SetConfig+0x38e>
 800640c:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <UART_SetConfig+0x344>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	08006439 	.word	0x08006439
 8006418:	08006441 	.word	0x08006441
 800641c:	08006449 	.word	0x08006449
 8006420:	0800645f 	.word	0x0800645f
 8006424:	0800644f 	.word	0x0800644f
 8006428:	0800645f 	.word	0x0800645f
 800642c:	0800645f 	.word	0x0800645f
 8006430:	0800645f 	.word	0x0800645f
 8006434:	08006457 	.word	0x08006457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006438:	f7fd fd36 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 800643c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800643e:	e014      	b.n	800646a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006440:	f7fd fd44 	bl	8003ecc <HAL_RCC_GetPCLK2Freq>
 8006444:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006446:	e010      	b.n	800646a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006448:	4b5a      	ldr	r3, [pc, #360]	; (80065b4 <UART_SetConfig+0x4e4>)
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800644c:	e00d      	b.n	800646a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800644e:	f7fd fc77 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8006452:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006454:	e009      	b.n	800646a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800645c:	e005      	b.n	800646a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8089 	beq.w	8006584 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	4a4e      	ldr	r2, [pc, #312]	; (80065b0 <UART_SetConfig+0x4e0>)
 8006478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800647c:	461a      	mov	r2, r3
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	fbb3 f3f2 	udiv	r3, r3, r2
 8006484:	005a      	lsls	r2, r3, #1
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	441a      	add	r2, r3
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	fbb2 f3f3 	udiv	r3, r2, r3
 8006496:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	2b0f      	cmp	r3, #15
 800649c:	d916      	bls.n	80064cc <UART_SetConfig+0x3fc>
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a4:	d212      	bcs.n	80064cc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f023 030f 	bic.w	r3, r3, #15
 80064ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	8bfb      	ldrh	r3, [r7, #30]
 80064be:	4313      	orrs	r3, r2
 80064c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	8bfa      	ldrh	r2, [r7, #30]
 80064c8:	60da      	str	r2, [r3, #12]
 80064ca:	e05b      	b.n	8006584 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064d2:	e057      	b.n	8006584 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d828      	bhi.n	800652e <UART_SetConfig+0x45e>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <UART_SetConfig+0x414>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	08006509 	.word	0x08006509
 80064e8:	08006511 	.word	0x08006511
 80064ec:	08006519 	.word	0x08006519
 80064f0:	0800652f 	.word	0x0800652f
 80064f4:	0800651f 	.word	0x0800651f
 80064f8:	0800652f 	.word	0x0800652f
 80064fc:	0800652f 	.word	0x0800652f
 8006500:	0800652f 	.word	0x0800652f
 8006504:	08006527 	.word	0x08006527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006508:	f7fd fcce 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 800650c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800650e:	e014      	b.n	800653a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006510:	f7fd fcdc 	bl	8003ecc <HAL_RCC_GetPCLK2Freq>
 8006514:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006516:	e010      	b.n	800653a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006518:	4b26      	ldr	r3, [pc, #152]	; (80065b4 <UART_SetConfig+0x4e4>)
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800651c:	e00d      	b.n	800653a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800651e:	f7fd fc0f 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8006522:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006524:	e009      	b.n	800653a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800652c:	e005      	b.n	800653a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006538:	bf00      	nop
    }

    if (pclk != 0U)
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	d021      	beq.n	8006584 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	4a1a      	ldr	r2, [pc, #104]	; (80065b0 <UART_SetConfig+0x4e0>)
 8006546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800654a:	461a      	mov	r2, r3
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	441a      	add	r2, r3
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006562:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	2b0f      	cmp	r3, #15
 8006568:	d909      	bls.n	800657e <UART_SetConfig+0x4ae>
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006570:	d205      	bcs.n	800657e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	b29a      	uxth	r2, r3
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60da      	str	r2, [r3, #12]
 800657c:	e002      	b.n	8006584 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2201      	movs	r2, #1
 8006588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2201      	movs	r2, #1
 8006590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2200      	movs	r2, #0
 8006598:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2200      	movs	r2, #0
 800659e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80065a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3730      	adds	r7, #48	; 0x30
 80065a8:	46bd      	mov	sp, r7
 80065aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ae:	bf00      	nop
 80065b0:	0800bda0 	.word	0x0800bda0
 80065b4:	00f42400 	.word	0x00f42400

080065b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01a      	beq.n	80066ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b6:	d10a      	bne.n	80066ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	605a      	str	r2, [r3, #4]
  }
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr

080066fa <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af02      	add	r7, sp, #8
 8006700:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800670a:	f7fb f949 	bl	80019a0 <HAL_GetTick>
 800670e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0308 	and.w	r3, r3, #8
 800671a:	2b08      	cmp	r3, #8
 800671c:	d10e      	bne.n	800673c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800671e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f832 	bl	8006796 <UART_WaitOnFlagUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e028      	b.n	800678e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b04      	cmp	r3, #4
 8006748:	d10e      	bne.n	8006768 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800674a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f81c 	bl	8006796 <UART_WaitOnFlagUntilTimeout>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e012      	b.n	800678e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b09c      	sub	sp, #112	; 0x70
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	603b      	str	r3, [r7, #0]
 80067a2:	4613      	mov	r3, r2
 80067a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a6:	e0a9      	b.n	80068fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ae:	f000 80a5 	beq.w	80068fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b2:	f7fb f8f5 	bl	80019a0 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067be:	429a      	cmp	r2, r3
 80067c0:	d302      	bcc.n	80067c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80067c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d140      	bne.n	800684a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067dc:	667b      	str	r3, [r7, #100]	; 0x64
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e6      	bne.n	80067c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3308      	adds	r3, #8
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	663b      	str	r3, [r7, #96]	; 0x60
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3308      	adds	r3, #8
 8006818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800681a:	64ba      	str	r2, [r7, #72]	; 0x48
 800681c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e5      	bne.n	80067fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e069      	b.n	800691e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	d051      	beq.n	80068fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006866:	d149      	bne.n	80068fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006870:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006886:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006890:	637b      	str	r3, [r7, #52]	; 0x34
 8006892:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e6      	bne.n	8006872 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3308      	adds	r3, #8
 80068aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	613b      	str	r3, [r7, #16]
   return(result);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f023 0301 	bic.w	r3, r3, #1
 80068ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3308      	adds	r3, #8
 80068c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068c4:	623a      	str	r2, [r7, #32]
 80068c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	69f9      	ldr	r1, [r7, #28]
 80068ca:	6a3a      	ldr	r2, [r7, #32]
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e5      	bne.n	80068a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2220      	movs	r2, #32
 80068dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e010      	b.n	800691e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69da      	ldr	r2, [r3, #28]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	4013      	ands	r3, r2
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	429a      	cmp	r2, r3
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	461a      	mov	r2, r3
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	429a      	cmp	r2, r3
 8006918:	f43f af46 	beq.w	80067a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3770      	adds	r7, #112	; 0x70
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b096      	sub	sp, #88	; 0x58
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	4613      	mov	r3, r2
 8006934:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	88fa      	ldrh	r2, [r7, #6]
 8006940:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2222      	movs	r2, #34	; 0x22
 8006950:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800695a:	2b00      	cmp	r3, #0
 800695c:	d02d      	beq.n	80069ba <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006964:	4a40      	ldr	r2, [pc, #256]	; (8006a68 <UART_Start_Receive_DMA+0x140>)
 8006966:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800696e:	4a3f      	ldr	r2, [pc, #252]	; (8006a6c <UART_Start_Receive_DMA+0x144>)
 8006970:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006978:	4a3d      	ldr	r2, [pc, #244]	; (8006a70 <UART_Start_Receive_DMA+0x148>)
 800697a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006982:	2200      	movs	r2, #0
 8006984:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3324      	adds	r3, #36	; 0x24
 8006992:	4619      	mov	r1, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006998:	461a      	mov	r2, r3
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	f7fb fde8 	bl	8002570 <HAL_DMA_Start_IT>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2210      	movs	r2, #16
 80069aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e051      	b.n	8006a5e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d018      	beq.n	80069f4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d6:	657b      	str	r3, [r7, #84]	; 0x54
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80069e2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e6      	bne.n	80069c2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	f043 0301 	orr.w	r3, r3, #1
 8006a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3308      	adds	r3, #8
 8006a12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a14:	637a      	str	r2, [r7, #52]	; 0x34
 8006a16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e5      	bne.n	80069f4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	613b      	str	r3, [r7, #16]
   return(result);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3308      	adds	r3, #8
 8006a46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a48:	623a      	str	r2, [r7, #32]
 8006a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	69f9      	ldr	r1, [r7, #28]
 8006a4e:	6a3a      	ldr	r2, [r7, #32]
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e5      	bne.n	8006a28 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3758      	adds	r7, #88	; 0x58
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	08006bbf 	.word	0x08006bbf
 8006a6c:	08006ceb 	.word	0x08006ceb
 8006a70:	08006d29 	.word	0x08006d29

08006a74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b08f      	sub	sp, #60	; 0x3c
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a9c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e6      	bne.n	8006a7c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ace:	61ba      	str	r2, [r7, #24]
 8006ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6979      	ldr	r1, [r7, #20]
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	613b      	str	r3, [r7, #16]
   return(result);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e5      	bne.n	8006aae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006aea:	bf00      	nop
 8006aec:	373c      	adds	r7, #60	; 0x3c
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr

08006af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b095      	sub	sp, #84	; 0x54
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e6      	bne.n	8006afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3308      	adds	r3, #8
 8006b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b44:	f023 0301 	bic.w	r3, r3, #1
 8006b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3308      	adds	r3, #8
 8006b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e3      	bne.n	8006b2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d118      	bne.n	8006ba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f023 0310 	bic.w	r3, r3, #16
 8006b82:	647b      	str	r3, [r7, #68]	; 0x44
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6979      	ldr	r1, [r7, #20]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	613b      	str	r3, [r7, #16]
   return(result);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e6      	bne.n	8006b6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006bb4:	bf00      	nop
 8006bb6:	3754      	adds	r7, #84	; 0x54
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr

08006bbe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b09c      	sub	sp, #112	; 0x70
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d171      	bne.n	8006cbe <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e6      	bne.n	8006be2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c26:	f023 0301 	bic.w	r3, r3, #1
 8006c2a:	667b      	str	r3, [r7, #100]	; 0x64
 8006c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3308      	adds	r3, #8
 8006c32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c34:	647a      	str	r2, [r7, #68]	; 0x44
 8006c36:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e5      	bne.n	8006c14 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	623b      	str	r3, [r7, #32]
   return(result);
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5e:	663b      	str	r3, [r7, #96]	; 0x60
 8006c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3308      	adds	r3, #8
 8006c66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c68:	633a      	str	r2, [r7, #48]	; 0x30
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e5      	bne.n	8006c48 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d118      	bne.n	8006cbe <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 0310 	bic.w	r3, r3, #16
 8006ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	69b9      	ldr	r1, [r7, #24]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e6      	bne.n	8006c8c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d107      	bne.n	8006cdc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cd6:	f7ff f9f0 	bl	80060ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cda:	e002      	b.n	8006ce2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006cdc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cde:	f7fa f989 	bl	8000ff4 <HAL_UART_RxCpltCallback>
}
 8006ce2:	bf00      	nop
 8006ce4:	3770      	adds	r7, #112	; 0x70
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d109      	bne.n	8006d1a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d0c:	085b      	lsrs	r3, r3, #1
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	4619      	mov	r1, r3
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7ff f9d1 	bl	80060ba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d18:	e002      	b.n	8006d20 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7ff f9bb 	bl	8006096 <HAL_UART_RxHalfCpltCallback>
}
 8006d20:	bf00      	nop
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d50:	2b80      	cmp	r3, #128	; 0x80
 8006d52:	d109      	bne.n	8006d68 <UART_DMAError+0x40>
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2b21      	cmp	r3, #33	; 0x21
 8006d58:	d106      	bne.n	8006d68 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006d62:	6978      	ldr	r0, [r7, #20]
 8006d64:	f7ff fe86 	bl	8006a74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d109      	bne.n	8006d8a <UART_DMAError+0x62>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b22      	cmp	r3, #34	; 0x22
 8006d7a:	d106      	bne.n	8006d8a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006d84:	6978      	ldr	r0, [r7, #20]
 8006d86:	f7ff feb5 	bl	8006af4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d90:	f043 0210 	orr.w	r2, r3, #16
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d9a:	6978      	ldr	r0, [r7, #20]
 8006d9c:	f7ff f984 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da0:	bf00      	nop
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7ff f96e 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6979      	ldr	r1, [r7, #20]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	613b      	str	r3, [r7, #16]
   return(result);
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e6      	bne.n	8006ddc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff f931 	bl	8006084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e22:	bf00      	nop
 8006e24:	3720      	adds	r7, #32
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e32:	bf00      	nop
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr

08006e4e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d101      	bne.n	8006e76 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e72:	2302      	movs	r3, #2
 8006e74:	e027      	b.n	8006ec6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2224      	movs	r2, #36	; 0x24
 8006e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0201 	bic.w	r2, r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ea4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr

08006ed0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e02d      	b.n	8006f44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2224      	movs	r2, #36	; 0x24
 8006ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0201 	bic.w	r2, r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f84f 	bl	8006fc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d101      	bne.n	8006f64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e02d      	b.n	8006fc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2224      	movs	r2, #36	; 0x24
 8006f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0201 	bic.w	r2, r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f811 	bl	8006fc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d108      	bne.n	8006fea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fe8:	e031      	b.n	800704e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fea:	2308      	movs	r3, #8
 8006fec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fee:	2308      	movs	r3, #8
 8006ff0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	0e5b      	lsrs	r3, r3, #25
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	0f5b      	lsrs	r3, r3, #29
 800700a:	b2db      	uxtb	r3, r3
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	7b3a      	ldrb	r2, [r7, #12]
 8007016:	4910      	ldr	r1, [pc, #64]	; (8007058 <UARTEx_SetNbDataToProcess+0x90>)
 8007018:	5c8a      	ldrb	r2, [r1, r2]
 800701a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800701e:	7b3a      	ldrb	r2, [r7, #12]
 8007020:	490e      	ldr	r1, [pc, #56]	; (800705c <UARTEx_SetNbDataToProcess+0x94>)
 8007022:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007024:	fb93 f3f2 	sdiv	r3, r3, r2
 8007028:	b29a      	uxth	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	7b7a      	ldrb	r2, [r7, #13]
 8007034:	4908      	ldr	r1, [pc, #32]	; (8007058 <UARTEx_SetNbDataToProcess+0x90>)
 8007036:	5c8a      	ldrb	r2, [r1, r2]
 8007038:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800703c:	7b7a      	ldrb	r2, [r7, #13]
 800703e:	4907      	ldr	r1, [pc, #28]	; (800705c <UARTEx_SetNbDataToProcess+0x94>)
 8007040:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007042:	fb93 f3f2 	sdiv	r3, r3, r2
 8007046:	b29a      	uxth	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr
 8007058:	0800bdb8 	.word	0x0800bdb8
 800705c:	0800bdc0 	.word	0x0800bdc0

08007060 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af02      	add	r7, sp, #8
 8007066:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007068:	4a24      	ldr	r2, [pc, #144]	; (80070fc <RadioInit+0x9c>)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800706e:	4b24      	ldr	r3, [pc, #144]	; (8007100 <RadioInit+0xa0>)
 8007070:	2200      	movs	r2, #0
 8007072:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007074:	4b22      	ldr	r3, [pc, #136]	; (8007100 <RadioInit+0xa0>)
 8007076:	2200      	movs	r2, #0
 8007078:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800707a:	4b21      	ldr	r3, [pc, #132]	; (8007100 <RadioInit+0xa0>)
 800707c:	2200      	movs	r2, #0
 800707e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007080:	4b1f      	ldr	r3, [pc, #124]	; (8007100 <RadioInit+0xa0>)
 8007082:	2200      	movs	r2, #0
 8007084:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007086:	481f      	ldr	r0, [pc, #124]	; (8007104 <RadioInit+0xa4>)
 8007088:	f001 ff88 	bl	8008f9c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 800708c:	4b1c      	ldr	r3, [pc, #112]	; (8007100 <RadioInit+0xa0>)
 800708e:	2200      	movs	r2, #0
 8007090:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007092:	4b1b      	ldr	r3, [pc, #108]	; (8007100 <RadioInit+0xa0>)
 8007094:	2200      	movs	r2, #0
 8007096:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007098:	f002 fa1c 	bl	80094d4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800709c:	2100      	movs	r1, #0
 800709e:	2000      	movs	r0, #0
 80070a0:	f002 fde8 	bl	8009c74 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80070a4:	2204      	movs	r2, #4
 80070a6:	2100      	movs	r1, #0
 80070a8:	2001      	movs	r0, #1
 80070aa:	f002 fba5 	bl	80097f8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80070ae:	2300      	movs	r3, #0
 80070b0:	2200      	movs	r2, #0
 80070b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80070b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80070ba:	f002 fad5 	bl	8009668 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80070be:	f000 fe91 	bl	8007de4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80070c2:	2300      	movs	r3, #0
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	4b10      	ldr	r3, [pc, #64]	; (8007108 <RadioInit+0xa8>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070ce:	480f      	ldr	r0, [pc, #60]	; (800710c <RadioInit+0xac>)
 80070d0:	f003 fb32 	bl	800a738 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80070d4:	2300      	movs	r3, #0
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <RadioInit+0xb0>)
 80070da:	2200      	movs	r2, #0
 80070dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070e0:	480c      	ldr	r0, [pc, #48]	; (8007114 <RadioInit+0xb4>)
 80070e2:	f003 fb29 	bl	800a738 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80070e6:	4809      	ldr	r0, [pc, #36]	; (800710c <RadioInit+0xac>)
 80070e8:	f003 fbca 	bl	800a880 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80070ec:	4809      	ldr	r0, [pc, #36]	; (8007114 <RadioInit+0xb4>)
 80070ee:	f003 fbc7 	bl	800a880 <UTIL_TIMER_Stop>
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20000608 	.word	0x20000608
 8007100:	2000060c 	.word	0x2000060c
 8007104:	080081dd 	.word	0x080081dd
 8007108:	08008165 	.word	0x08008165
 800710c:	20000668 	.word	0x20000668
 8007110:	08008179 	.word	0x08008179
 8007114:	20000680 	.word	0x20000680

08007118 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800711c:	f001 ff86 	bl	800902c <SUBGRF_GetOperatingMode>
 8007120:	4603      	mov	r3, r0
 8007122:	2b07      	cmp	r3, #7
 8007124:	d00a      	beq.n	800713c <RadioGetStatus+0x24>
 8007126:	2b07      	cmp	r3, #7
 8007128:	dc0a      	bgt.n	8007140 <RadioGetStatus+0x28>
 800712a:	2b04      	cmp	r3, #4
 800712c:	d002      	beq.n	8007134 <RadioGetStatus+0x1c>
 800712e:	2b05      	cmp	r3, #5
 8007130:	d002      	beq.n	8007138 <RadioGetStatus+0x20>
 8007132:	e005      	b.n	8007140 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007134:	2302      	movs	r3, #2
 8007136:	e004      	b.n	8007142 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007138:	2301      	movs	r3, #1
 800713a:	e002      	b.n	8007142 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800713c:	2303      	movs	r3, #3
 800713e:	e000      	b.n	8007142 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007140:	2300      	movs	r3, #0
    }
}
 8007142:	4618      	mov	r0, r3
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8007152:	4a2a      	ldr	r2, [pc, #168]	; (80071fc <RadioSetModem+0xb4>)
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	4618      	mov	r0, r3
 800715c:	f003 f95d 	bl	800a41a <RFW_SetRadioModem>
    switch( modem )
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	2b05      	cmp	r3, #5
 8007164:	d80e      	bhi.n	8007184 <RadioSetModem+0x3c>
 8007166:	a201      	add	r2, pc, #4	; (adr r2, 800716c <RadioSetModem+0x24>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	08007193 	.word	0x08007193
 8007170:	080071a1 	.word	0x080071a1
 8007174:	08007185 	.word	0x08007185
 8007178:	080071c7 	.word	0x080071c7
 800717c:	080071d5 	.word	0x080071d5
 8007180:	080071e3 	.word	0x080071e3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007184:	2003      	movs	r0, #3
 8007186:	f002 fb11 	bl	80097ac <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800718a:	4b1c      	ldr	r3, [pc, #112]	; (80071fc <RadioSetModem+0xb4>)
 800718c:	2200      	movs	r2, #0
 800718e:	735a      	strb	r2, [r3, #13]
        break;
 8007190:	e02f      	b.n	80071f2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007192:	2000      	movs	r0, #0
 8007194:	f002 fb0a 	bl	80097ac <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007198:	4b18      	ldr	r3, [pc, #96]	; (80071fc <RadioSetModem+0xb4>)
 800719a:	2200      	movs	r2, #0
 800719c:	735a      	strb	r2, [r3, #13]
        break;
 800719e:	e028      	b.n	80071f2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80071a0:	2001      	movs	r0, #1
 80071a2:	f002 fb03 	bl	80097ac <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80071a6:	4b15      	ldr	r3, [pc, #84]	; (80071fc <RadioSetModem+0xb4>)
 80071a8:	7b5a      	ldrb	r2, [r3, #13]
 80071aa:	4b14      	ldr	r3, [pc, #80]	; (80071fc <RadioSetModem+0xb4>)
 80071ac:	7b1b      	ldrb	r3, [r3, #12]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d01e      	beq.n	80071f0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <RadioSetModem+0xb4>)
 80071b4:	7b1a      	ldrb	r2, [r3, #12]
 80071b6:	4b11      	ldr	r3, [pc, #68]	; (80071fc <RadioSetModem+0xb4>)
 80071b8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80071ba:	4b10      	ldr	r3, [pc, #64]	; (80071fc <RadioSetModem+0xb4>)
 80071bc:	7b5b      	ldrb	r3, [r3, #13]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 ff9a 	bl	80080f8 <RadioSetPublicNetwork>
        }
        break;
 80071c4:	e014      	b.n	80071f0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80071c6:	2002      	movs	r0, #2
 80071c8:	f002 faf0 	bl	80097ac <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80071cc:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <RadioSetModem+0xb4>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	735a      	strb	r2, [r3, #13]
        break;
 80071d2:	e00e      	b.n	80071f2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80071d4:	2002      	movs	r0, #2
 80071d6:	f002 fae9 	bl	80097ac <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80071da:	4b08      	ldr	r3, [pc, #32]	; (80071fc <RadioSetModem+0xb4>)
 80071dc:	2200      	movs	r2, #0
 80071de:	735a      	strb	r2, [r3, #13]
        break;
 80071e0:	e007      	b.n	80071f2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80071e2:	2000      	movs	r0, #0
 80071e4:	f002 fae2 	bl	80097ac <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80071e8:	4b04      	ldr	r3, [pc, #16]	; (80071fc <RadioSetModem+0xb4>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	735a      	strb	r2, [r3, #13]
        break;
 80071ee:	e000      	b.n	80071f2 <RadioSetModem+0xaa>
        break;
 80071f0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	2000060c 	.word	0x2000060c

08007200 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f002 fa89 	bl	8009720 <SUBGRF_SetRfFrequency>
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b090      	sub	sp, #64	; 0x40
 800721a:	af0a      	add	r7, sp, #40	; 0x28
 800721c:	60f8      	str	r0, [r7, #12]
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	603b      	str	r3, [r7, #0]
 8007222:	4613      	mov	r3, r2
 8007224:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8007232:	f000 fdea 	bl	8007e0a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8007236:	2000      	movs	r0, #0
 8007238:	f7ff ff86 	bl	8007148 <RadioSetModem>

    RadioSetChannel( freq );
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff ffdf 	bl	8007200 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007242:	2301      	movs	r3, #1
 8007244:	9309      	str	r3, [sp, #36]	; 0x24
 8007246:	2300      	movs	r3, #0
 8007248:	9308      	str	r3, [sp, #32]
 800724a:	2300      	movs	r3, #0
 800724c:	9307      	str	r3, [sp, #28]
 800724e:	2300      	movs	r3, #0
 8007250:	9306      	str	r3, [sp, #24]
 8007252:	2300      	movs	r3, #0
 8007254:	9305      	str	r3, [sp, #20]
 8007256:	2300      	movs	r3, #0
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	2300      	movs	r3, #0
 800725c:	9303      	str	r3, [sp, #12]
 800725e:	2300      	movs	r3, #0
 8007260:	9302      	str	r3, [sp, #8]
 8007262:	2303      	movs	r3, #3
 8007264:	9301      	str	r3, [sp, #4]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	2300      	movs	r3, #0
 800726c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	2000      	movs	r0, #0
 8007274:	f000 f83c 	bl	80072f0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007278:	2000      	movs	r0, #0
 800727a:	f000 fdcd 	bl	8007e18 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800727e:	f000 ff69 	bl	8008154 <RadioGetWakeupTime>
 8007282:	4603      	mov	r3, r0
 8007284:	4618      	mov	r0, r3
 8007286:	f7fa fb9f 	bl	80019c8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800728a:	f003 fb93 	bl	800a9b4 <UTIL_TIMER_GetCurrentTime>
 800728e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007290:	e00d      	b.n	80072ae <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8007292:	2000      	movs	r0, #0
 8007294:	f000 feae 	bl	8007ff4 <RadioRssi>
 8007298:	4603      	mov	r3, r0
 800729a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800729c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80072a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	dd02      	ble.n	80072ae <RadioIsChannelFree+0x98>
        {
            status = false;
 80072a8:	2300      	movs	r3, #0
 80072aa:	75fb      	strb	r3, [r7, #23]
            break;
 80072ac:	e006      	b.n	80072bc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80072ae:	6938      	ldr	r0, [r7, #16]
 80072b0:	f003 fb92 	bl	800a9d8 <UTIL_TIMER_GetElapsedTime>
 80072b4:	4602      	mov	r2, r0
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d8ea      	bhi.n	8007292 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80072bc:	f000 fda5 	bl	8007e0a <RadioStandby>

    return status;
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80072d4:	2300      	movs	r3, #0
 80072d6:	2200      	movs	r2, #0
 80072d8:	2100      	movs	r1, #0
 80072da:	2000      	movs	r0, #0
 80072dc:	f002 f9c4 	bl	8009668 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80072e0:	f001 ff75 	bl	80091ce <SUBGRF_GetRandom>
 80072e4:	6078      	str	r0, [r7, #4]

    return rnd;
 80072e6:	687b      	ldr	r3, [r7, #4]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	461a      	mov	r2, r3
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]
 8007300:	4613      	mov	r3, r2
 8007302:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007304:	4ab9      	ldr	r2, [pc, #740]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007306:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800730a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 800730c:	f003 f843 	bl	800a396 <RFW_DeInit>
    if( rxContinuous == true )
 8007310:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800731c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d004      	beq.n	800732e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007324:	4ab2      	ldr	r2, [pc, #712]	; (80075f0 <RadioSetRxConfig+0x300>)
 8007326:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800732a:	7013      	strb	r3, [r2, #0]
 800732c:	e002      	b.n	8007334 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800732e:	4bb0      	ldr	r3, [pc, #704]	; (80075f0 <RadioSetRxConfig+0x300>)
 8007330:	22ff      	movs	r2, #255	; 0xff
 8007332:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	2b05      	cmp	r3, #5
 8007338:	d009      	beq.n	800734e <RadioSetRxConfig+0x5e>
 800733a:	2b05      	cmp	r3, #5
 800733c:	f300 81d7 	bgt.w	80076ee <RadioSetRxConfig+0x3fe>
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 80bf 	beq.w	80074c4 <RadioSetRxConfig+0x1d4>
 8007346:	2b01      	cmp	r3, #1
 8007348:	f000 8124 	beq.w	8007594 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800734c:	e1cf      	b.n	80076ee <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800734e:	2001      	movs	r0, #1
 8007350:	f002 f882 	bl	8009458 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007354:	4ba5      	ldr	r3, [pc, #660]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800735c:	4aa3      	ldr	r2, [pc, #652]	; (80075ec <RadioSetRxConfig+0x2fc>)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8007362:	4ba2      	ldr	r3, [pc, #648]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007364:	2209      	movs	r2, #9
 8007366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800736a:	4ba0      	ldr	r3, [pc, #640]	; (80075ec <RadioSetRxConfig+0x2fc>)
 800736c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007370:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007372:	68b8      	ldr	r0, [r7, #8]
 8007374:	f002 ff42 	bl	800a1fc <SUBGRF_GetFskBandwidthRegValue>
 8007378:	4603      	mov	r3, r0
 800737a:	461a      	mov	r2, r3
 800737c:	4b9b      	ldr	r3, [pc, #620]	; (80075ec <RadioSetRxConfig+0x2fc>)
 800737e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007382:	4b9a      	ldr	r3, [pc, #616]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007384:	2200      	movs	r2, #0
 8007386:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007388:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	b29a      	uxth	r2, r3
 800738e:	4b97      	ldr	r3, [pc, #604]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007390:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8007392:	4b96      	ldr	r3, [pc, #600]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007394:	2200      	movs	r2, #0
 8007396:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007398:	4b94      	ldr	r3, [pc, #592]	; (80075ec <RadioSetRxConfig+0x2fc>)
 800739a:	2210      	movs	r2, #16
 800739c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800739e:	4b93      	ldr	r3, [pc, #588]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80073a4:	4b91      	ldr	r3, [pc, #580]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80073aa:	4b91      	ldr	r3, [pc, #580]	; (80075f0 <RadioSetRxConfig+0x300>)
 80073ac:	781a      	ldrb	r2, [r3, #0]
 80073ae:	4b8f      	ldr	r3, [pc, #572]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80073b0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80073b2:	4b8e      	ldr	r3, [pc, #568]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80073b4:	2201      	movs	r2, #1
 80073b6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80073b8:	4b8c      	ldr	r3, [pc, #560]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80073be:	2005      	movs	r0, #5
 80073c0:	f7ff fec2 	bl	8007148 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80073c4:	488b      	ldr	r0, [pc, #556]	; (80075f4 <RadioSetRxConfig+0x304>)
 80073c6:	f002 fae5 	bl	8009994 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80073ca:	488b      	ldr	r0, [pc, #556]	; (80075f8 <RadioSetRxConfig+0x308>)
 80073cc:	f002 fbb4 	bl	8009b38 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80073d0:	4a8a      	ldr	r2, [pc, #552]	; (80075fc <RadioSetRxConfig+0x30c>)
 80073d2:	f107 031c 	add.w	r3, r7, #28
 80073d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073da:	e883 0003 	stmia.w	r3, {r0, r1}
 80073de:	f107 031c 	add.w	r3, r7, #28
 80073e2:	4618      	mov	r0, r3
 80073e4:	f001 fe71 	bl	80090ca <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80073e8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80073ec:	f001 febc 	bl	8009168 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80073f0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80073f4:	f000 fe1d 	bl	8008032 <RadioRead>
 80073f8:	4603      	mov	r3, r0
 80073fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80073fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007402:	f023 0310 	bic.w	r3, r3, #16
 8007406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800740a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800740e:	4619      	mov	r1, r3
 8007410:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007414:	f000 fdfb 	bl	800800e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007418:	2104      	movs	r1, #4
 800741a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800741e:	f000 fdf6 	bl	800800e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8007422:	f640 009b 	movw	r0, #2203	; 0x89b
 8007426:	f000 fe04 	bl	8008032 <RadioRead>
 800742a:	4603      	mov	r3, r0
 800742c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007434:	f023 031c 	bic.w	r3, r3, #28
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800743c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007440:	f043 0308 	orr.w	r3, r3, #8
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4619      	mov	r1, r3
 8007448:	f640 009b 	movw	r0, #2203	; 0x89b
 800744c:	f000 fddf 	bl	800800e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8007450:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007454:	f000 fded 	bl	8008032 <RadioRead>
 8007458:	4603      	mov	r3, r0
 800745a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800745e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007462:	f023 0318 	bic.w	r3, r3, #24
 8007466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800746a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800746e:	f043 0318 	orr.w	r3, r3, #24
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4619      	mov	r1, r3
 8007476:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800747a:	f000 fdc8 	bl	800800e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800747e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007482:	f000 fdd6 	bl	8008032 <RadioRead>
 8007486:	4603      	mov	r3, r0
 8007488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800748c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800749c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	4619      	mov	r1, r3
 80074a4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80074a8:	f000 fdb1 	bl	800800e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80074ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80074ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
 80074b6:	461a      	mov	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80074be:	4a4b      	ldr	r2, [pc, #300]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80074c0:	6093      	str	r3, [r2, #8]
            break;
 80074c2:	e115      	b.n	80076f0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80074c4:	2000      	movs	r0, #0
 80074c6:	f001 ffc7 	bl	8009458 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80074ca:	4b48      	ldr	r3, [pc, #288]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80074d2:	4a46      	ldr	r2, [pc, #280]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80074d8:	4b44      	ldr	r3, [pc, #272]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80074da:	220b      	movs	r2, #11
 80074dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80074e0:	68b8      	ldr	r0, [r7, #8]
 80074e2:	f002 fe8b 	bl	800a1fc <SUBGRF_GetFskBandwidthRegValue>
 80074e6:	4603      	mov	r3, r0
 80074e8:	461a      	mov	r2, r3
 80074ea:	4b40      	ldr	r3, [pc, #256]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80074ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80074f0:	4b3e      	ldr	r3, [pc, #248]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80074f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	4b3b      	ldr	r3, [pc, #236]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80074fe:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007500:	4b3a      	ldr	r3, [pc, #232]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007502:	2204      	movs	r2, #4
 8007504:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8007506:	4b39      	ldr	r3, [pc, #228]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007508:	2218      	movs	r2, #24
 800750a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800750c:	4b37      	ldr	r3, [pc, #220]	; (80075ec <RadioSetRxConfig+0x2fc>)
 800750e:	2200      	movs	r2, #0
 8007510:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007512:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007516:	f083 0301 	eor.w	r3, r3, #1
 800751a:	b2db      	uxtb	r3, r3
 800751c:	461a      	mov	r2, r3
 800751e:	4b33      	ldr	r3, [pc, #204]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007520:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007522:	4b33      	ldr	r3, [pc, #204]	; (80075f0 <RadioSetRxConfig+0x300>)
 8007524:	781a      	ldrb	r2, [r3, #0]
 8007526:	4b31      	ldr	r3, [pc, #196]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007528:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800752a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007532:	4b2e      	ldr	r3, [pc, #184]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007534:	22f2      	movs	r2, #242	; 0xf2
 8007536:	75da      	strb	r2, [r3, #23]
 8007538:	e002      	b.n	8007540 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800753a:	4b2c      	ldr	r3, [pc, #176]	; (80075ec <RadioSetRxConfig+0x2fc>)
 800753c:	2201      	movs	r2, #1
 800753e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007540:	4b2a      	ldr	r3, [pc, #168]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007542:	2201      	movs	r2, #1
 8007544:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007546:	f000 fc60 	bl	8007e0a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800754a:	2000      	movs	r0, #0
 800754c:	f7ff fdfc 	bl	8007148 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007550:	4828      	ldr	r0, [pc, #160]	; (80075f4 <RadioSetRxConfig+0x304>)
 8007552:	f002 fa1f 	bl	8009994 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007556:	4828      	ldr	r0, [pc, #160]	; (80075f8 <RadioSetRxConfig+0x308>)
 8007558:	f002 faee 	bl	8009b38 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800755c:	4a28      	ldr	r2, [pc, #160]	; (8007600 <RadioSetRxConfig+0x310>)
 800755e:	f107 0314 	add.w	r3, r7, #20
 8007562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007566:	e883 0003 	stmia.w	r3, {r0, r1}
 800756a:	f107 0314 	add.w	r3, r7, #20
 800756e:	4618      	mov	r0, r3
 8007570:	f001 fdab 	bl	80090ca <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007574:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007578:	f001 fdf6 	bl	8009168 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800757c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800757e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007582:	fb02 f303 	mul.w	r3, r2, r3
 8007586:	461a      	mov	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	fbb2 f3f3 	udiv	r3, r2, r3
 800758e:	4a17      	ldr	r2, [pc, #92]	; (80075ec <RadioSetRxConfig+0x2fc>)
 8007590:	6093      	str	r3, [r2, #8]
            break;
 8007592:	e0ad      	b.n	80076f0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007594:	2000      	movs	r0, #0
 8007596:	f001 ff5f 	bl	8009458 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800759a:	4b14      	ldr	r3, [pc, #80]	; (80075ec <RadioSetRxConfig+0x2fc>)
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	4b11      	ldr	r3, [pc, #68]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80075a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80075ac:	4a15      	ldr	r2, [pc, #84]	; (8007604 <RadioSetRxConfig+0x314>)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	781a      	ldrb	r2, [r3, #0]
 80075b4:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80075b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80075ba:	4a0c      	ldr	r2, [pc, #48]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d105      	bne.n	80075d4 <RadioSetRxConfig+0x2e4>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b0b      	cmp	r3, #11
 80075cc:	d008      	beq.n	80075e0 <RadioSetRxConfig+0x2f0>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b0c      	cmp	r3, #12
 80075d2:	d005      	beq.n	80075e0 <RadioSetRxConfig+0x2f0>
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d116      	bne.n	8007608 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b0c      	cmp	r3, #12
 80075de:	d113      	bne.n	8007608 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80075e0:	4b02      	ldr	r3, [pc, #8]	; (80075ec <RadioSetRxConfig+0x2fc>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80075e8:	e012      	b.n	8007610 <RadioSetRxConfig+0x320>
 80075ea:	bf00      	nop
 80075ec:	2000060c 	.word	0x2000060c
 80075f0:	20000011 	.word	0x20000011
 80075f4:	20000644 	.word	0x20000644
 80075f8:	2000061a 	.word	0x2000061a
 80075fc:	0800bcb0 	.word	0x0800bcb0
 8007600:	0800bcb8 	.word	0x0800bcb8
 8007604:	0800be54 	.word	0x0800be54
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007608:	4b3b      	ldr	r3, [pc, #236]	; (80076f8 <RadioSetRxConfig+0x408>)
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007610:	4b39      	ldr	r3, [pc, #228]	; (80076f8 <RadioSetRxConfig+0x408>)
 8007612:	2201      	movs	r2, #1
 8007614:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007616:	4b38      	ldr	r3, [pc, #224]	; (80076f8 <RadioSetRxConfig+0x408>)
 8007618:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800761c:	2b05      	cmp	r3, #5
 800761e:	d004      	beq.n	800762a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007620:	4b35      	ldr	r3, [pc, #212]	; (80076f8 <RadioSetRxConfig+0x408>)
 8007622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007626:	2b06      	cmp	r3, #6
 8007628:	d10a      	bne.n	8007640 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800762a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800762c:	2b0b      	cmp	r3, #11
 800762e:	d803      	bhi.n	8007638 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007630:	4b31      	ldr	r3, [pc, #196]	; (80076f8 <RadioSetRxConfig+0x408>)
 8007632:	220c      	movs	r2, #12
 8007634:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007636:	e006      	b.n	8007646 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007638:	4a2f      	ldr	r2, [pc, #188]	; (80076f8 <RadioSetRxConfig+0x408>)
 800763a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800763c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800763e:	e002      	b.n	8007646 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007640:	4a2d      	ldr	r2, [pc, #180]	; (80076f8 <RadioSetRxConfig+0x408>)
 8007642:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007644:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007646:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800764a:	4b2b      	ldr	r3, [pc, #172]	; (80076f8 <RadioSetRxConfig+0x408>)
 800764c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800764e:	4b2b      	ldr	r3, [pc, #172]	; (80076fc <RadioSetRxConfig+0x40c>)
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	4b29      	ldr	r3, [pc, #164]	; (80076f8 <RadioSetRxConfig+0x408>)
 8007654:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007656:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800765a:	4b27      	ldr	r3, [pc, #156]	; (80076f8 <RadioSetRxConfig+0x408>)
 800765c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007660:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007664:	4b24      	ldr	r3, [pc, #144]	; (80076f8 <RadioSetRxConfig+0x408>)
 8007666:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800766a:	f000 fbce 	bl	8007e0a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800766e:	2001      	movs	r0, #1
 8007670:	f7ff fd6a 	bl	8007148 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007674:	4822      	ldr	r0, [pc, #136]	; (8007700 <RadioSetRxConfig+0x410>)
 8007676:	f002 f98d 	bl	8009994 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800767a:	4822      	ldr	r0, [pc, #136]	; (8007704 <RadioSetRxConfig+0x414>)
 800767c:	f002 fa5c 	bl	8009b38 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007680:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007682:	b2db      	uxtb	r3, r3
 8007684:	4618      	mov	r0, r3
 8007686:	f001 fef6 	bl	8009476 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800768a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800768e:	f002 fbaf 	bl	8009df0 <SUBGRF_ReadRegister>
 8007692:	4603      	mov	r3, r0
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	b2db      	uxtb	r3, r3
 800769a:	4619      	mov	r1, r3
 800769c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80076a0:	f002 fb92 	bl	8009dc8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80076a4:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <RadioSetRxConfig+0x408>)
 80076a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d10d      	bne.n	80076ca <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80076ae:	f240 7036 	movw	r0, #1846	; 0x736
 80076b2:	f002 fb9d 	bl	8009df0 <SUBGRF_ReadRegister>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f023 0304 	bic.w	r3, r3, #4
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	4619      	mov	r1, r3
 80076c0:	f240 7036 	movw	r0, #1846	; 0x736
 80076c4:	f002 fb80 	bl	8009dc8 <SUBGRF_WriteRegister>
 80076c8:	e00c      	b.n	80076e4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80076ca:	f240 7036 	movw	r0, #1846	; 0x736
 80076ce:	f002 fb8f 	bl	8009df0 <SUBGRF_ReadRegister>
 80076d2:	4603      	mov	r3, r0
 80076d4:	f043 0304 	orr.w	r3, r3, #4
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	4619      	mov	r1, r3
 80076dc:	f240 7036 	movw	r0, #1846	; 0x736
 80076e0:	f002 fb72 	bl	8009dc8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80076e4:	4b04      	ldr	r3, [pc, #16]	; (80076f8 <RadioSetRxConfig+0x408>)
 80076e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076ea:	609a      	str	r2, [r3, #8]
            break;
 80076ec:	e000      	b.n	80076f0 <RadioSetRxConfig+0x400>
            break;
 80076ee:	bf00      	nop
    }
}
 80076f0:	bf00      	nop
 80076f2:	3728      	adds	r7, #40	; 0x28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	2000060c 	.word	0x2000060c
 80076fc:	20000011 	.word	0x20000011
 8007700:	20000644 	.word	0x20000644
 8007704:	2000061a 	.word	0x2000061a

08007708 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60ba      	str	r2, [r7, #8]
 8007710:	607b      	str	r3, [r7, #4]
 8007712:	4603      	mov	r3, r0
 8007714:	73fb      	strb	r3, [r7, #15]
 8007716:	460b      	mov	r3, r1
 8007718:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800771a:	f002 fe3c 	bl	800a396 <RFW_DeInit>
    switch( modem )
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b04      	cmp	r3, #4
 8007722:	f000 80c7 	beq.w	80078b4 <RadioSetTxConfig+0x1ac>
 8007726:	2b04      	cmp	r3, #4
 8007728:	f300 80d6 	bgt.w	80078d8 <RadioSetTxConfig+0x1d0>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <RadioSetTxConfig+0x2e>
 8007730:	2b01      	cmp	r3, #1
 8007732:	d059      	beq.n	80077e8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007734:	e0d0      	b.n	80078d8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007736:	4b77      	ldr	r3, [pc, #476]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800773e:	4a75      	ldr	r2, [pc, #468]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007744:	4b73      	ldr	r3, [pc, #460]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007746:	220b      	movs	r2, #11
 8007748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f002 fd55 	bl	800a1fc <SUBGRF_GetFskBandwidthRegValue>
 8007752:	4603      	mov	r3, r0
 8007754:	461a      	mov	r2, r3
 8007756:	4b6f      	ldr	r3, [pc, #444]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800775c:	4a6d      	ldr	r2, [pc, #436]	; (8007914 <RadioSetTxConfig+0x20c>)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007762:	4b6c      	ldr	r3, [pc, #432]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007764:	2200      	movs	r2, #0
 8007766:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007768:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	b29a      	uxth	r2, r3
 800776e:	4b69      	ldr	r3, [pc, #420]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007770:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007772:	4b68      	ldr	r3, [pc, #416]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007774:	2204      	movs	r2, #4
 8007776:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007778:	4b66      	ldr	r3, [pc, #408]	; (8007914 <RadioSetTxConfig+0x20c>)
 800777a:	2218      	movs	r2, #24
 800777c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800777e:	4b65      	ldr	r3, [pc, #404]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007780:	2200      	movs	r2, #0
 8007782:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007784:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007788:	f083 0301 	eor.w	r3, r3, #1
 800778c:	b2db      	uxtb	r3, r3
 800778e:	461a      	mov	r2, r3
 8007790:	4b60      	ldr	r3, [pc, #384]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007792:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007794:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800779c:	4b5d      	ldr	r3, [pc, #372]	; (8007914 <RadioSetTxConfig+0x20c>)
 800779e:	22f2      	movs	r2, #242	; 0xf2
 80077a0:	75da      	strb	r2, [r3, #23]
 80077a2:	e002      	b.n	80077aa <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80077a4:	4b5b      	ldr	r3, [pc, #364]	; (8007914 <RadioSetTxConfig+0x20c>)
 80077a6:	2201      	movs	r2, #1
 80077a8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80077aa:	4b5a      	ldr	r3, [pc, #360]	; (8007914 <RadioSetTxConfig+0x20c>)
 80077ac:	2201      	movs	r2, #1
 80077ae:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80077b0:	f000 fb2b 	bl	8007e0a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80077b4:	2000      	movs	r0, #0
 80077b6:	f7ff fcc7 	bl	8007148 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80077ba:	4857      	ldr	r0, [pc, #348]	; (8007918 <RadioSetTxConfig+0x210>)
 80077bc:	f002 f8ea 	bl	8009994 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80077c0:	4856      	ldr	r0, [pc, #344]	; (800791c <RadioSetTxConfig+0x214>)
 80077c2:	f002 f9b9 	bl	8009b38 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80077c6:	4a56      	ldr	r2, [pc, #344]	; (8007920 <RadioSetTxConfig+0x218>)
 80077c8:	f107 0310 	add.w	r3, r7, #16
 80077cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80077d4:	f107 0310 	add.w	r3, r7, #16
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 fc76 	bl	80090ca <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80077de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80077e2:	f001 fcc1 	bl	8009168 <SUBGRF_SetWhiteningSeed>
            break;
 80077e6:	e078      	b.n	80078da <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80077e8:	4b4a      	ldr	r3, [pc, #296]	; (8007914 <RadioSetTxConfig+0x20c>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	4b47      	ldr	r3, [pc, #284]	; (8007914 <RadioSetTxConfig+0x20c>)
 80077f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80077fa:	4a4a      	ldr	r2, [pc, #296]	; (8007924 <RadioSetTxConfig+0x21c>)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4413      	add	r3, r2
 8007800:	781a      	ldrb	r2, [r3, #0]
 8007802:	4b44      	ldr	r3, [pc, #272]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007808:	4a42      	ldr	r2, [pc, #264]	; (8007914 <RadioSetTxConfig+0x20c>)
 800780a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800780e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d105      	bne.n	8007824 <RadioSetTxConfig+0x11c>
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	2b0b      	cmp	r3, #11
 800781c:	d008      	beq.n	8007830 <RadioSetTxConfig+0x128>
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	2b0c      	cmp	r3, #12
 8007822:	d005      	beq.n	8007830 <RadioSetTxConfig+0x128>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d107      	bne.n	800783a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	2b0c      	cmp	r3, #12
 800782e:	d104      	bne.n	800783a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007830:	4b38      	ldr	r3, [pc, #224]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007838:	e003      	b.n	8007842 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800783a:	4b36      	ldr	r3, [pc, #216]	; (8007914 <RadioSetTxConfig+0x20c>)
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007842:	4b34      	ldr	r3, [pc, #208]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007844:	2201      	movs	r2, #1
 8007846:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007848:	4b32      	ldr	r3, [pc, #200]	; (8007914 <RadioSetTxConfig+0x20c>)
 800784a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800784e:	2b05      	cmp	r3, #5
 8007850:	d004      	beq.n	800785c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007852:	4b30      	ldr	r3, [pc, #192]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007854:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007858:	2b06      	cmp	r3, #6
 800785a:	d10a      	bne.n	8007872 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800785c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800785e:	2b0b      	cmp	r3, #11
 8007860:	d803      	bhi.n	800786a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007862:	4b2c      	ldr	r3, [pc, #176]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007864:	220c      	movs	r2, #12
 8007866:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007868:	e006      	b.n	8007878 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800786a:	4a2a      	ldr	r2, [pc, #168]	; (8007914 <RadioSetTxConfig+0x20c>)
 800786c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800786e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007870:	e002      	b.n	8007878 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007872:	4a28      	ldr	r2, [pc, #160]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007874:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007876:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007878:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800787c:	4b25      	ldr	r3, [pc, #148]	; (8007914 <RadioSetTxConfig+0x20c>)
 800787e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007880:	4b29      	ldr	r3, [pc, #164]	; (8007928 <RadioSetTxConfig+0x220>)
 8007882:	781a      	ldrb	r2, [r3, #0]
 8007884:	4b23      	ldr	r3, [pc, #140]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007886:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007888:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800788c:	4b21      	ldr	r3, [pc, #132]	; (8007914 <RadioSetTxConfig+0x20c>)
 800788e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007892:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007896:	4b1f      	ldr	r3, [pc, #124]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007898:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800789c:	f000 fab5 	bl	8007e0a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80078a0:	2001      	movs	r0, #1
 80078a2:	f7ff fc51 	bl	8007148 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078a6:	481c      	ldr	r0, [pc, #112]	; (8007918 <RadioSetTxConfig+0x210>)
 80078a8:	f002 f874 	bl	8009994 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078ac:	481b      	ldr	r0, [pc, #108]	; (800791c <RadioSetTxConfig+0x214>)
 80078ae:	f002 f943 	bl	8009b38 <SUBGRF_SetPacketParams>
            break;
 80078b2:	e012      	b.n	80078da <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80078b4:	2004      	movs	r0, #4
 80078b6:	f7ff fc47 	bl	8007148 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80078ba:	4b16      	ldr	r3, [pc, #88]	; (8007914 <RadioSetTxConfig+0x20c>)
 80078bc:	2202      	movs	r2, #2
 80078be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80078c2:	4a14      	ldr	r2, [pc, #80]	; (8007914 <RadioSetTxConfig+0x20c>)
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80078c8:	4b12      	ldr	r3, [pc, #72]	; (8007914 <RadioSetTxConfig+0x20c>)
 80078ca:	2216      	movs	r2, #22
 80078cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078d0:	4811      	ldr	r0, [pc, #68]	; (8007918 <RadioSetTxConfig+0x210>)
 80078d2:	f002 f85f 	bl	8009994 <SUBGRF_SetModulationParams>
            break;
 80078d6:	e000      	b.n	80078da <RadioSetTxConfig+0x1d2>
            break;
 80078d8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80078da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078de:	4618      	mov	r0, r3
 80078e0:	f002 fb8e 	bl	800a000 <SUBGRF_SetRfTxPower>
 80078e4:	4603      	mov	r3, r0
 80078e6:	461a      	mov	r2, r3
 80078e8:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <RadioSetTxConfig+0x20c>)
 80078ea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80078ee:	210e      	movs	r1, #14
 80078f0:	f640 101f 	movw	r0, #2335	; 0x91f
 80078f4:	f002 fa68 	bl	8009dc8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80078f8:	4b06      	ldr	r3, [pc, #24]	; (8007914 <RadioSetTxConfig+0x20c>)
 80078fa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80078fe:	4618      	mov	r0, r3
 8007900:	f002 fd5d 	bl	800a3be <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007904:	4a03      	ldr	r2, [pc, #12]	; (8007914 <RadioSetTxConfig+0x20c>)
 8007906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007908:	6053      	str	r3, [r2, #4]
}
 800790a:	bf00      	nop
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	2000060c 	.word	0x2000060c
 8007918:	20000644 	.word	0x20000644
 800791c:	2000061a 	.word	0x2000061a
 8007920:	0800bcb8 	.word	0x0800bcb8
 8007924:	0800be54 	.word	0x0800be54
 8007928:	20000011 	.word	0x20000011

0800792c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
    return true;
 8007934:	2301      	movs	r3, #1
}
 8007936:	4618      	mov	r0, r3
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	bc80      	pop	{r7}
 800793e:	4770      	bx	lr

08007940 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	2b0a      	cmp	r3, #10
 8007952:	d83e      	bhi.n	80079d2 <RadioGetLoRaBandwidthInHz+0x92>
 8007954:	a201      	add	r2, pc, #4	; (adr r2, 800795c <RadioGetLoRaBandwidthInHz+0x1c>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	08007989 	.word	0x08007989
 8007960:	08007999 	.word	0x08007999
 8007964:	080079a9 	.word	0x080079a9
 8007968:	080079b9 	.word	0x080079b9
 800796c:	080079c1 	.word	0x080079c1
 8007970:	080079c7 	.word	0x080079c7
 8007974:	080079cd 	.word	0x080079cd
 8007978:	080079d3 	.word	0x080079d3
 800797c:	08007991 	.word	0x08007991
 8007980:	080079a1 	.word	0x080079a1
 8007984:	080079b1 	.word	0x080079b1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007988:	f641 6384 	movw	r3, #7812	; 0x1e84
 800798c:	60fb      	str	r3, [r7, #12]
        break;
 800798e:	e020      	b.n	80079d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007990:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007994:	60fb      	str	r3, [r7, #12]
        break;
 8007996:	e01c      	b.n	80079d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007998:	f643 5309 	movw	r3, #15625	; 0x3d09
 800799c:	60fb      	str	r3, [r7, #12]
        break;
 800799e:	e018      	b.n	80079d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80079a0:	f245 1361 	movw	r3, #20833	; 0x5161
 80079a4:	60fb      	str	r3, [r7, #12]
        break;
 80079a6:	e014      	b.n	80079d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80079a8:	f647 2312 	movw	r3, #31250	; 0x7a12
 80079ac:	60fb      	str	r3, [r7, #12]
        break;
 80079ae:	e010      	b.n	80079d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80079b0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80079b4:	60fb      	str	r3, [r7, #12]
        break;
 80079b6:	e00c      	b.n	80079d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80079b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80079bc:	60fb      	str	r3, [r7, #12]
        break;
 80079be:	e008      	b.n	80079d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <RadioGetLoRaBandwidthInHz+0xa0>)
 80079c2:	60fb      	str	r3, [r7, #12]
        break;
 80079c4:	e005      	b.n	80079d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80079c6:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <RadioGetLoRaBandwidthInHz+0xa4>)
 80079c8:	60fb      	str	r3, [r7, #12]
        break;
 80079ca:	e002      	b.n	80079d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80079cc:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <RadioGetLoRaBandwidthInHz+0xa8>)
 80079ce:	60fb      	str	r3, [r7, #12]
        break;
 80079d0:	bf00      	nop
    }

    return bandwidthInHz;
 80079d2:	68fb      	ldr	r3, [r7, #12]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	bc80      	pop	{r7}
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	0001e848 	.word	0x0001e848
 80079e4:	0003d090 	.word	0x0003d090
 80079e8:	0007a120 	.word	0x0007a120

080079ec <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	4608      	mov	r0, r1
 80079f6:	4611      	mov	r1, r2
 80079f8:	461a      	mov	r2, r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	70fb      	strb	r3, [r7, #3]
 80079fe:	460b      	mov	r3, r1
 8007a00:	803b      	strh	r3, [r7, #0]
 8007a02:	4613      	mov	r3, r2
 8007a04:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007a06:	883b      	ldrh	r3, [r7, #0]
 8007a08:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007a0a:	78ba      	ldrb	r2, [r7, #2]
 8007a0c:	f082 0201 	eor.w	r2, r2, #1
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	2a00      	cmp	r2, #0
 8007a14:	d001      	beq.n	8007a1a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007a16:	2208      	movs	r2, #8
 8007a18:	e000      	b.n	8007a1c <RadioGetGfskTimeOnAirNumerator+0x30>
 8007a1a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007a1c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007a1e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007a22:	7c3b      	ldrb	r3, [r7, #16]
 8007a24:	7d39      	ldrb	r1, [r7, #20]
 8007a26:	2900      	cmp	r1, #0
 8007a28:	d001      	beq.n	8007a2e <RadioGetGfskTimeOnAirNumerator+0x42>
 8007a2a:	2102      	movs	r1, #2
 8007a2c:	e000      	b.n	8007a30 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007a2e:	2100      	movs	r1, #0
 8007a30:	440b      	add	r3, r1
 8007a32:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007a34:	4413      	add	r3, r2
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bc80      	pop	{r7}
 8007a3e:	4770      	bx	lr

08007a40 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b08b      	sub	sp, #44	; 0x2c
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	460b      	mov	r3, r1
 8007a50:	71fb      	strb	r3, [r7, #7]
 8007a52:	4613      	mov	r3, r2
 8007a54:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b05      	cmp	r3, #5
 8007a66:	d002      	beq.n	8007a6e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b06      	cmp	r3, #6
 8007a6c:	d104      	bne.n	8007a78 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007a6e:	88bb      	ldrh	r3, [r7, #4]
 8007a70:	2b0b      	cmp	r3, #11
 8007a72:	d801      	bhi.n	8007a78 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007a74:	230c      	movs	r3, #12
 8007a76:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d105      	bne.n	8007a8a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b0b      	cmp	r3, #11
 8007a82:	d008      	beq.n	8007a96 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b0c      	cmp	r3, #12
 8007a88:	d005      	beq.n	8007a96 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d105      	bne.n	8007a9c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b0c      	cmp	r3, #12
 8007a94:	d102      	bne.n	8007a9c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007a96:	2301      	movs	r3, #1
 8007a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007a9c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007aa0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007aa2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007aa6:	2a00      	cmp	r2, #0
 8007aa8:	d001      	beq.n	8007aae <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007aaa:	2210      	movs	r2, #16
 8007aac:	e000      	b.n	8007ab0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007aae:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007ab0:	4413      	add	r3, r2
 8007ab2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007ab8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007aba:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	d001      	beq.n	8007ac6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	e000      	b.n	8007ac8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007ac6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007ac8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007aca:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b06      	cmp	r3, #6
 8007ad0:	d803      	bhi.n	8007ada <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	623b      	str	r3, [r7, #32]
 8007ad8:	e00e      	b.n	8007af8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	3308      	adds	r3, #8
 8007ade:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d004      	beq.n	8007af2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3b02      	subs	r3, #2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	623b      	str	r3, [r7, #32]
 8007af0:	e002      	b.n	8007af8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da01      	bge.n	8007b02 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	4413      	add	r3, r2
 8007b08:	1e5a      	subs	r2, r3, #1
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	fb03 f202 	mul.w	r2, r3, r2
 8007b16:	88bb      	ldrh	r3, [r7, #4]
 8007b18:	4413      	add	r3, r2
    int32_t intermediate =
 8007b1a:	330c      	adds	r3, #12
 8007b1c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b06      	cmp	r3, #6
 8007b22:	d802      	bhi.n	8007b2a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	3302      	adds	r3, #2
 8007b28:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	3b02      	subs	r3, #2
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	372c      	adds	r7, #44	; 0x2c
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bc80      	pop	{r7}
 8007b40:	4770      	bx	lr
	...

08007b44 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af04      	add	r7, sp, #16
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
 8007b54:	4613      	mov	r3, r2
 8007b56:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <RadioTimeOnAir+0x28>
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d017      	beq.n	8007b9a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007b6a:	e035      	b.n	8007bd8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007b6c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007b70:	8c3a      	ldrh	r2, [r7, #32]
 8007b72:	7bb9      	ldrb	r1, [r7, #14]
 8007b74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	4603      	mov	r3, r0
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff ff32 	bl	80079ec <RadioGetGfskTimeOnAirNumerator>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b8e:	fb02 f303 	mul.w	r3, r2, r3
 8007b92:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	613b      	str	r3, [r7, #16]
        break;
 8007b98:	e01e      	b.n	8007bd8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007b9a:	8c39      	ldrh	r1, [r7, #32]
 8007b9c:	7bba      	ldrb	r2, [r7, #14]
 8007b9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ba2:	9302      	str	r3, [sp, #8]
 8007ba4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ba8:	9301      	str	r3, [sp, #4]
 8007baa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	68b8      	ldr	r0, [r7, #8]
 8007bb6:	f7ff ff43 	bl	8007a40 <RadioGetLoRaTimeOnAirNumerator>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bc0:	fb02 f303 	mul.w	r3, r2, r3
 8007bc4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007bc6:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <RadioTimeOnAir+0xac>)
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	4413      	add	r3, r2
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff feb6 	bl	8007940 <RadioGetLoRaBandwidthInHz>
 8007bd4:	6138      	str	r0, [r7, #16]
        break;
 8007bd6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	4413      	add	r3, r2
 8007bde:	1e5a      	subs	r2, r3, #1
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	0800be54 	.word	0x0800be54

08007bf4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007c00:	2300      	movs	r3, #0
 8007c02:	2200      	movs	r2, #0
 8007c04:	f240 2101 	movw	r1, #513	; 0x201
 8007c08:	f240 2001 	movw	r0, #513	; 0x201
 8007c0c:	f001 fd2c 	bl	8009668 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007c10:	4b70      	ldr	r3, [pc, #448]	; (8007dd4 <RadioSend+0x1e0>)
 8007c12:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007c16:	2101      	movs	r1, #1
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f002 f9c9 	bl	8009fb0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007c1e:	4b6d      	ldr	r3, [pc, #436]	; (8007dd4 <RadioSend+0x1e0>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d112      	bne.n	8007c4c <RadioSend+0x58>
 8007c26:	4b6b      	ldr	r3, [pc, #428]	; (8007dd4 <RadioSend+0x1e0>)
 8007c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c2c:	2b06      	cmp	r3, #6
 8007c2e:	d10d      	bne.n	8007c4c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007c30:	f640 0089 	movw	r0, #2185	; 0x889
 8007c34:	f002 f8dc 	bl	8009df0 <SUBGRF_ReadRegister>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f023 0304 	bic.w	r3, r3, #4
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	4619      	mov	r1, r3
 8007c42:	f640 0089 	movw	r0, #2185	; 0x889
 8007c46:	f002 f8bf 	bl	8009dc8 <SUBGRF_WriteRegister>
 8007c4a:	e00c      	b.n	8007c66 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007c4c:	f640 0089 	movw	r0, #2185	; 0x889
 8007c50:	f002 f8ce 	bl	8009df0 <SUBGRF_ReadRegister>
 8007c54:	4603      	mov	r3, r0
 8007c56:	f043 0304 	orr.w	r3, r3, #4
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f640 0089 	movw	r0, #2185	; 0x889
 8007c62:	f002 f8b1 	bl	8009dc8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007c66:	4b5b      	ldr	r3, [pc, #364]	; (8007dd4 <RadioSend+0x1e0>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	f200 80a2 	bhi.w	8007db4 <RadioSend+0x1c0>
 8007c70:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <RadioSend+0x84>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007ca7 	.word	0x08007ca7
 8007c7c:	08007c8d 	.word	0x08007c8d
 8007c80:	08007ca7 	.word	0x08007ca7
 8007c84:	08007cfd 	.word	0x08007cfd
 8007c88:	08007d1d 	.word	0x08007d1d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007c8c:	4a51      	ldr	r2, [pc, #324]	; (8007dd4 <RadioSend+0x1e0>)
 8007c8e:	78fb      	ldrb	r3, [r7, #3]
 8007c90:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007c92:	4851      	ldr	r0, [pc, #324]	; (8007dd8 <RadioSend+0x1e4>)
 8007c94:	f001 ff50 	bl	8009b38 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 fa00 	bl	80090a4 <SUBGRF_SendPayload>
            break;
 8007ca4:	e087      	b.n	8007db6 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007ca6:	f002 fb7c 	bl	800a3a2 <RFW_Is_Init>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d118      	bne.n	8007ce2 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007cb0:	f107 020d 	add.w	r2, r7, #13
 8007cb4:	78fb      	ldrb	r3, [r7, #3]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f002 fb8a 	bl	800a3d2 <RFW_TransmitInit>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10c      	bne.n	8007cde <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007cc4:	7b7a      	ldrb	r2, [r7, #13]
 8007cc6:	4b43      	ldr	r3, [pc, #268]	; (8007dd4 <RadioSend+0x1e0>)
 8007cc8:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007cca:	4843      	ldr	r0, [pc, #268]	; (8007dd8 <RadioSend+0x1e4>)
 8007ccc:	f001 ff34 	bl	8009b38 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8007cd0:	7b7b      	ldrb	r3, [r7, #13]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 f9e4 	bl	80090a4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007cdc:	e06b      	b.n	8007db6 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e073      	b.n	8007dca <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007ce2:	4a3c      	ldr	r2, [pc, #240]	; (8007dd4 <RadioSend+0x1e0>)
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ce8:	483b      	ldr	r0, [pc, #236]	; (8007dd8 <RadioSend+0x1e4>)
 8007cea:	f001 ff25 	bl	8009b38 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8007cee:	78fb      	ldrb	r3, [r7, #3]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 f9d5 	bl	80090a4 <SUBGRF_SendPayload>
            break;
 8007cfa:	e05c      	b.n	8007db6 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007cfc:	4b35      	ldr	r3, [pc, #212]	; (8007dd4 <RadioSend+0x1e0>)
 8007cfe:	2202      	movs	r2, #2
 8007d00:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007d02:	4a34      	ldr	r2, [pc, #208]	; (8007dd4 <RadioSend+0x1e0>)
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d08:	4833      	ldr	r0, [pc, #204]	; (8007dd8 <RadioSend+0x1e4>)
 8007d0a:	f001 ff15 	bl	8009b38 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	2200      	movs	r2, #0
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 f9c5 	bl	80090a4 <SUBGRF_SendPayload>
            break;
 8007d1a:	e04c      	b.n	8007db6 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	482e      	ldr	r0, [pc, #184]	; (8007ddc <RadioSend+0x1e8>)
 8007d24:	f000 fc98 	bl	8008658 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007d28:	4b2a      	ldr	r3, [pc, #168]	; (8007dd4 <RadioSend+0x1e0>)
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	3301      	adds	r3, #1
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	4b27      	ldr	r3, [pc, #156]	; (8007dd4 <RadioSend+0x1e0>)
 8007d36:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d38:	4827      	ldr	r0, [pc, #156]	; (8007dd8 <RadioSend+0x1e4>)
 8007d3a:	f001 fefd 	bl	8009b38 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007d3e:	2100      	movs	r1, #0
 8007d40:	20f1      	movs	r0, #241	; 0xf1
 8007d42:	f000 f964 	bl	800800e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007d46:	2100      	movs	r1, #0
 8007d48:	20f0      	movs	r0, #240	; 0xf0
 8007d4a:	f000 f960 	bl	800800e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007d4e:	4b21      	ldr	r3, [pc, #132]	; (8007dd4 <RadioSend+0x1e0>)
 8007d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d52:	2b64      	cmp	r3, #100	; 0x64
 8007d54:	d108      	bne.n	8007d68 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007d56:	2170      	movs	r1, #112	; 0x70
 8007d58:	20f3      	movs	r0, #243	; 0xf3
 8007d5a:	f000 f958 	bl	800800e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007d5e:	211d      	movs	r1, #29
 8007d60:	20f2      	movs	r0, #242	; 0xf2
 8007d62:	f000 f954 	bl	800800e <RadioWrite>
 8007d66:	e007      	b.n	8007d78 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007d68:	21e1      	movs	r1, #225	; 0xe1
 8007d6a:	20f3      	movs	r0, #243	; 0xf3
 8007d6c:	f000 f94f 	bl	800800e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007d70:	2104      	movs	r1, #4
 8007d72:	20f2      	movs	r0, #242	; 0xf2
 8007d74:	f000 f94b 	bl	800800e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	3302      	adds	r3, #2
 8007d82:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007d84:	89fb      	ldrh	r3, [r7, #14]
 8007d86:	0a1b      	lsrs	r3, r3, #8
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	20f4      	movs	r0, #244	; 0xf4
 8007d90:	f000 f93d 	bl	800800e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007d94:	89fb      	ldrh	r3, [r7, #14]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	4619      	mov	r1, r3
 8007d9a:	20f5      	movs	r0, #245	; 0xf5
 8007d9c:	f000 f937 	bl	800800e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	3301      	adds	r3, #1
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007daa:	4619      	mov	r1, r3
 8007dac:	480b      	ldr	r0, [pc, #44]	; (8007ddc <RadioSend+0x1e8>)
 8007dae:	f001 f979 	bl	80090a4 <SUBGRF_SendPayload>
            break;
 8007db2:	e000      	b.n	8007db6 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007db4:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007db6:	4b07      	ldr	r3, [pc, #28]	; (8007dd4 <RadioSend+0x1e0>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	4808      	ldr	r0, [pc, #32]	; (8007de0 <RadioSend+0x1ec>)
 8007dbe:	f002 fdcf 	bl	800a960 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8007dc2:	4807      	ldr	r0, [pc, #28]	; (8007de0 <RadioSend+0x1ec>)
 8007dc4:	f002 fcee 	bl	800a7a4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	2000060c 	.word	0x2000060c
 8007dd8:	2000061a 	.word	0x2000061a
 8007ddc:	20000508 	.word	0x20000508
 8007de0:	20000668 	.word	0x20000668

08007de4 <RadioSleep>:

static void RadioSleep( void )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8007dea:	2300      	movs	r3, #0
 8007dec:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8007dee:	793b      	ldrb	r3, [r7, #4]
 8007df0:	f043 0304 	orr.w	r3, r3, #4
 8007df4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007df6:	7938      	ldrb	r0, [r7, #4]
 8007df8:	f001 fa30 	bl	800925c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007dfc:	2002      	movs	r0, #2
 8007dfe:	f7f9 fde3 	bl	80019c8 <HAL_Delay>
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <RadioStandby>:

static void RadioStandby( void )
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8007e0e:	2000      	movs	r0, #0
 8007e10:	f001 fa56 	bl	80092c0 <SUBGRF_SetStandby>
}
 8007e14:	bf00      	nop
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8007e20:	f002 fabf 	bl	800a3a2 <RFW_Is_Init>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d102      	bne.n	8007e30 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8007e2a:	f002 fae2 	bl	800a3f2 <RFW_ReceiveInit>
 8007e2e:	e007      	b.n	8007e40 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007e30:	2300      	movs	r3, #0
 8007e32:	2200      	movs	r2, #0
 8007e34:	f240 2162 	movw	r1, #610	; 0x262
 8007e38:	f240 2062 	movw	r0, #610	; 0x262
 8007e3c:	f001 fc14 	bl	8009668 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d006      	beq.n	8007e54 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	4811      	ldr	r0, [pc, #68]	; (8007e90 <RadioRx+0x78>)
 8007e4a:	f002 fd89 	bl	800a960 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007e4e:	4810      	ldr	r0, [pc, #64]	; (8007e90 <RadioRx+0x78>)
 8007e50:	f002 fca8 	bl	800a7a4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007e54:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <RadioRx+0x7c>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007e5a:	4b0e      	ldr	r3, [pc, #56]	; (8007e94 <RadioRx+0x7c>)
 8007e5c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007e60:	2100      	movs	r1, #0
 8007e62:	4618      	mov	r0, r3
 8007e64:	f002 f8a4 	bl	8009fb0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <RadioRx+0x7c>)
 8007e6a:	785b      	ldrb	r3, [r3, #1]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007e70:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007e74:	f001 fa60 	bl	8009338 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007e78:	e005      	b.n	8007e86 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007e7a:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <RadioRx+0x7c>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	019b      	lsls	r3, r3, #6
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 fa59 	bl	8009338 <SUBGRF_SetRx>
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000680 	.word	0x20000680
 8007e94:	2000060c 	.word	0x2000060c

08007e98 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8007ea0:	f002 fa7f 	bl	800a3a2 <RFW_Is_Init>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d102      	bne.n	8007eb0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8007eaa:	f002 faa2 	bl	800a3f2 <RFW_ReceiveInit>
 8007eae:	e007      	b.n	8007ec0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f240 2162 	movw	r1, #610	; 0x262
 8007eb8:	f240 2062 	movw	r0, #610	; 0x262
 8007ebc:	f001 fbd4 	bl	8009668 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d006      	beq.n	8007ed4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007ec6:	6879      	ldr	r1, [r7, #4]
 8007ec8:	4811      	ldr	r0, [pc, #68]	; (8007f10 <RadioRxBoosted+0x78>)
 8007eca:	f002 fd49 	bl	800a960 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007ece:	4810      	ldr	r0, [pc, #64]	; (8007f10 <RadioRxBoosted+0x78>)
 8007ed0:	f002 fc68 	bl	800a7a4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007ed4:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <RadioRxBoosted+0x7c>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007eda:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <RadioRxBoosted+0x7c>)
 8007edc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f002 f864 	bl	8009fb0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <RadioRxBoosted+0x7c>)
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8007ef0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007ef4:	f001 fa40 	bl	8009378 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007ef8:	e005      	b.n	8007f06 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <RadioRxBoosted+0x7c>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	019b      	lsls	r3, r3, #6
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 fa39 	bl	8009378 <SUBGRF_SetRxBoosted>
}
 8007f06:	bf00      	nop
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000680 	.word	0x20000680
 8007f14:	2000060c 	.word	0x2000060c

08007f18 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	005a      	lsls	r2, r3, #1
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	4413      	add	r3, r2
 8007f2a:	4a0c      	ldr	r2, [pc, #48]	; (8007f5c <RadioSetRxDutyCycle+0x44>)
 8007f2c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2200      	movs	r2, #0
 8007f32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007f3a:	f001 fb95 	bl	8009668 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007f3e:	4b07      	ldr	r3, [pc, #28]	; (8007f5c <RadioSetRxDutyCycle+0x44>)
 8007f40:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f002 f832 	bl	8009fb0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 fa36 	bl	80093c0 <SUBGRF_SetRxDutyCycle>
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	2000060c 	.word	0x2000060c

08007f60 <RadioStartCad>:

static void RadioStartCad( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007f64:	4b09      	ldr	r3, [pc, #36]	; (8007f8c <RadioStartCad+0x2c>)
 8007f66:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f002 f81f 	bl	8009fb0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8007f72:	2300      	movs	r3, #0
 8007f74:	2200      	movs	r2, #0
 8007f76:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007f7a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007f7e:	f001 fb73 	bl	8009668 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8007f82:	f001 fa49 	bl	8009418 <SUBGRF_SetCad>
}
 8007f86:	bf00      	nop
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	2000060c 	.word	0x2000060c

08007f90 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8007fa0:	883b      	ldrh	r3, [r7, #0]
 8007fa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fa6:	fb02 f303 	mul.w	r3, r2, r3
 8007faa:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 fbb7 	bl	8009720 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8007fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f002 f822 	bl	800a000 <SUBGRF_SetRfTxPower>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007fc0:	210e      	movs	r1, #14
 8007fc2:	f640 101f 	movw	r0, #2335	; 0x91f
 8007fc6:	f001 feff 	bl	8009dc8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8007fca:	7afb      	ldrb	r3, [r7, #11]
 8007fcc:	2101      	movs	r1, #1
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f001 ffee 	bl	8009fb0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8007fd4:	f001 fa2e 	bl	8009434 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007fd8:	68f9      	ldr	r1, [r7, #12]
 8007fda:	4805      	ldr	r0, [pc, #20]	; (8007ff0 <RadioSetTxContinuousWave+0x60>)
 8007fdc:	f002 fcc0 	bl	800a960 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8007fe0:	4803      	ldr	r0, [pc, #12]	; (8007ff0 <RadioSetTxContinuousWave+0x60>)
 8007fe2:	f002 fbdf 	bl	800a7a4 <UTIL_TIMER_Start>
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000668 	.word	0x20000668

08007ff4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8007ffe:	f001 fe50 	bl	8009ca2 <SUBGRF_GetRssiInst>
 8008002:	4603      	mov	r3, r0
 8008004:	b21b      	sxth	r3, r3
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	4603      	mov	r3, r0
 8008016:	460a      	mov	r2, r1
 8008018:	80fb      	strh	r3, [r7, #6]
 800801a:	4613      	mov	r3, r2
 800801c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800801e:	797a      	ldrb	r2, [r7, #5]
 8008020:	88fb      	ldrh	r3, [r7, #6]
 8008022:	4611      	mov	r1, r2
 8008024:	4618      	mov	r0, r3
 8008026:	f001 fecf 	bl	8009dc8 <SUBGRF_WriteRegister>
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	4603      	mov	r3, r0
 800803a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	4618      	mov	r0, r3
 8008040:	f001 fed6 	bl	8009df0 <SUBGRF_ReadRegister>
 8008044:	4603      	mov	r3, r0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	4603      	mov	r3, r0
 8008056:	6039      	str	r1, [r7, #0]
 8008058:	80fb      	strh	r3, [r7, #6]
 800805a:	4613      	mov	r3, r2
 800805c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800805e:	797b      	ldrb	r3, [r7, #5]
 8008060:	b29a      	uxth	r2, r3
 8008062:	88fb      	ldrh	r3, [r7, #6]
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f001 fed6 	bl	8009e18 <SUBGRF_WriteRegisters>
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	6039      	str	r1, [r7, #0]
 800807e:	80fb      	strh	r3, [r7, #6]
 8008080:	4613      	mov	r3, r2
 8008082:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008084:	797b      	ldrb	r3, [r7, #5]
 8008086:	b29a      	uxth	r2, r3
 8008088:	88fb      	ldrh	r3, [r7, #6]
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	4618      	mov	r0, r3
 800808e:	f001 fee5 	bl	8009e5c <SUBGRF_ReadRegisters>
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
	...

0800809c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	460a      	mov	r2, r1
 80080a6:	71fb      	strb	r3, [r7, #7]
 80080a8:	4613      	mov	r3, r2
 80080aa:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80080ac:	79fb      	ldrb	r3, [r7, #7]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d10a      	bne.n	80080c8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80080b2:	4a0e      	ldr	r2, [pc, #56]	; (80080ec <RadioSetMaxPayloadLength+0x50>)
 80080b4:	79bb      	ldrb	r3, [r7, #6]
 80080b6:	7013      	strb	r3, [r2, #0]
 80080b8:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <RadioSetMaxPayloadLength+0x50>)
 80080ba:	781a      	ldrb	r2, [r3, #0]
 80080bc:	4b0c      	ldr	r3, [pc, #48]	; (80080f0 <RadioSetMaxPayloadLength+0x54>)
 80080be:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80080c0:	480c      	ldr	r0, [pc, #48]	; (80080f4 <RadioSetMaxPayloadLength+0x58>)
 80080c2:	f001 fd39 	bl	8009b38 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80080c6:	e00d      	b.n	80080e4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80080c8:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <RadioSetMaxPayloadLength+0x54>)
 80080ca:	7d5b      	ldrb	r3, [r3, #21]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d109      	bne.n	80080e4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80080d0:	4a06      	ldr	r2, [pc, #24]	; (80080ec <RadioSetMaxPayloadLength+0x50>)
 80080d2:	79bb      	ldrb	r3, [r7, #6]
 80080d4:	7013      	strb	r3, [r2, #0]
 80080d6:	4b05      	ldr	r3, [pc, #20]	; (80080ec <RadioSetMaxPayloadLength+0x50>)
 80080d8:	781a      	ldrb	r2, [r3, #0]
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <RadioSetMaxPayloadLength+0x54>)
 80080dc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80080de:	4805      	ldr	r0, [pc, #20]	; (80080f4 <RadioSetMaxPayloadLength+0x58>)
 80080e0:	f001 fd2a 	bl	8009b38 <SUBGRF_SetPacketParams>
}
 80080e4:	bf00      	nop
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	20000011 	.word	0x20000011
 80080f0:	2000060c 	.word	0x2000060c
 80080f4:	2000061a 	.word	0x2000061a

080080f8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8008102:	4a13      	ldr	r2, [pc, #76]	; (8008150 <RadioSetPublicNetwork+0x58>)
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	7313      	strb	r3, [r2, #12]
 8008108:	4b11      	ldr	r3, [pc, #68]	; (8008150 <RadioSetPublicNetwork+0x58>)
 800810a:	7b1a      	ldrb	r2, [r3, #12]
 800810c:	4b10      	ldr	r3, [pc, #64]	; (8008150 <RadioSetPublicNetwork+0x58>)
 800810e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008110:	2001      	movs	r0, #1
 8008112:	f7ff f819 	bl	8007148 <RadioSetModem>
    if( enable == true )
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800811c:	2134      	movs	r1, #52	; 0x34
 800811e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008122:	f001 fe51 	bl	8009dc8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008126:	2144      	movs	r1, #68	; 0x44
 8008128:	f240 7041 	movw	r0, #1857	; 0x741
 800812c:	f001 fe4c 	bl	8009dc8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008130:	e009      	b.n	8008146 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8008132:	2114      	movs	r1, #20
 8008134:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008138:	f001 fe46 	bl	8009dc8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800813c:	2124      	movs	r1, #36	; 0x24
 800813e:	f240 7041 	movw	r0, #1857	; 0x741
 8008142:	f001 fe41 	bl	8009dc8 <SUBGRF_WriteRegister>
}
 8008146:	bf00      	nop
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	2000060c 	.word	0x2000060c

08008154 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008158:	f001 ff86 	bl	800a068 <SUBGRF_GetRadioWakeUpTime>
 800815c:	4603      	mov	r3, r0
 800815e:	3303      	adds	r3, #3
}
 8008160:	4618      	mov	r0, r3
 8008162:	bd80      	pop	{r7, pc}

08008164 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800816c:	f000 f80e 	bl	800818c <RadioOnTxTimeoutProcess>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008180:	f000 f818 	bl	80081b4 <RadioOnRxTimeoutProcess>
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008190:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <RadioOnTxTimeoutProcess+0x24>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d008      	beq.n	80081aa <RadioOnTxTimeoutProcess+0x1e>
 8008198:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <RadioOnTxTimeoutProcess+0x24>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80081a2:	4b03      	ldr	r3, [pc, #12]	; (80081b0 <RadioOnTxTimeoutProcess+0x24>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	4798      	blx	r3
    }
}
 80081aa:	bf00      	nop
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000608 	.word	0x20000608

080081b4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80081b8:	4b07      	ldr	r3, [pc, #28]	; (80081d8 <RadioOnRxTimeoutProcess+0x24>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d008      	beq.n	80081d2 <RadioOnRxTimeoutProcess+0x1e>
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <RadioOnRxTimeoutProcess+0x24>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80081ca:	4b03      	ldr	r3, [pc, #12]	; (80081d8 <RadioOnRxTimeoutProcess+0x24>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	4798      	blx	r3
    }
}
 80081d2:	bf00      	nop
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20000608 	.word	0x20000608

080081dc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80081e6:	4a05      	ldr	r2, [pc, #20]	; (80081fc <RadioOnDioIrq+0x20>)
 80081e8:	88fb      	ldrh	r3, [r7, #6]
 80081ea:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80081ee:	f000 f807 	bl	8008200 <RadioIrqProcess>
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	2000060c 	.word	0x2000060c

08008200 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008200:	b5b0      	push	{r4, r5, r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800820e:	4ba5      	ldr	r3, [pc, #660]	; (80084a4 <RadioIrqProcess+0x2a4>)
 8008210:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008218:	f000 810d 	beq.w	8008436 <RadioIrqProcess+0x236>
 800821c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008220:	f300 81c0 	bgt.w	80085a4 <RadioIrqProcess+0x3a4>
 8008224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008228:	f000 80f1 	beq.w	800840e <RadioIrqProcess+0x20e>
 800822c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008230:	f300 81b8 	bgt.w	80085a4 <RadioIrqProcess+0x3a4>
 8008234:	2b80      	cmp	r3, #128	; 0x80
 8008236:	f000 80d6 	beq.w	80083e6 <RadioIrqProcess+0x1e6>
 800823a:	2b80      	cmp	r3, #128	; 0x80
 800823c:	f300 81b2 	bgt.w	80085a4 <RadioIrqProcess+0x3a4>
 8008240:	2b20      	cmp	r3, #32
 8008242:	dc49      	bgt.n	80082d8 <RadioIrqProcess+0xd8>
 8008244:	2b00      	cmp	r3, #0
 8008246:	f340 81ad 	ble.w	80085a4 <RadioIrqProcess+0x3a4>
 800824a:	3b01      	subs	r3, #1
 800824c:	2b1f      	cmp	r3, #31
 800824e:	f200 81a9 	bhi.w	80085a4 <RadioIrqProcess+0x3a4>
 8008252:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <RadioIrqProcess+0x58>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	080082e1 	.word	0x080082e1
 800825c:	0800831b 	.word	0x0800831b
 8008260:	080085a5 	.word	0x080085a5
 8008264:	080084c1 	.word	0x080084c1
 8008268:	080085a5 	.word	0x080085a5
 800826c:	080085a5 	.word	0x080085a5
 8008270:	080085a5 	.word	0x080085a5
 8008274:	0800852f 	.word	0x0800852f
 8008278:	080085a5 	.word	0x080085a5
 800827c:	080085a5 	.word	0x080085a5
 8008280:	080085a5 	.word	0x080085a5
 8008284:	080085a5 	.word	0x080085a5
 8008288:	080085a5 	.word	0x080085a5
 800828c:	080085a5 	.word	0x080085a5
 8008290:	080085a5 	.word	0x080085a5
 8008294:	080085a5 	.word	0x080085a5
 8008298:	080085a5 	.word	0x080085a5
 800829c:	080085a5 	.word	0x080085a5
 80082a0:	080085a5 	.word	0x080085a5
 80082a4:	080085a5 	.word	0x080085a5
 80082a8:	080085a5 	.word	0x080085a5
 80082ac:	080085a5 	.word	0x080085a5
 80082b0:	080085a5 	.word	0x080085a5
 80082b4:	080085a5 	.word	0x080085a5
 80082b8:	080085a5 	.word	0x080085a5
 80082bc:	080085a5 	.word	0x080085a5
 80082c0:	080085a5 	.word	0x080085a5
 80082c4:	080085a5 	.word	0x080085a5
 80082c8:	080085a5 	.word	0x080085a5
 80082cc:	080085a5 	.word	0x080085a5
 80082d0:	080085a5 	.word	0x080085a5
 80082d4:	0800853f 	.word	0x0800853f
 80082d8:	2b40      	cmp	r3, #64	; 0x40
 80082da:	f000 814b 	beq.w	8008574 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80082de:	e161      	b.n	80085a4 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 80082e0:	4871      	ldr	r0, [pc, #452]	; (80084a8 <RadioIrqProcess+0x2a8>)
 80082e2:	f002 facd 	bl	800a880 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80082e6:	2000      	movs	r0, #0
 80082e8:	f000 ffea 	bl	80092c0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80082ec:	f002 f860 	bl	800a3b0 <RFW_Is_LongPacketModeEnabled>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d101      	bne.n	80082fa <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80082f6:	f002 f884 	bl	800a402 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80082fa:	4b6c      	ldr	r3, [pc, #432]	; (80084ac <RadioIrqProcess+0x2ac>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 8152 	beq.w	80085a8 <RadioIrqProcess+0x3a8>
 8008304:	4b69      	ldr	r3, [pc, #420]	; (80084ac <RadioIrqProcess+0x2ac>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 814c 	beq.w	80085a8 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8008310:	4b66      	ldr	r3, [pc, #408]	; (80084ac <RadioIrqProcess+0x2ac>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4798      	blx	r3
        break;
 8008318:	e146      	b.n	80085a8 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800831a:	4865      	ldr	r0, [pc, #404]	; (80084b0 <RadioIrqProcess+0x2b0>)
 800831c:	f002 fab0 	bl	800a880 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008320:	4b60      	ldr	r3, [pc, #384]	; (80084a4 <RadioIrqProcess+0x2a4>)
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	f083 0301 	eor.w	r3, r3, #1
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d014      	beq.n	8008358 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800832e:	2000      	movs	r0, #0
 8008330:	f000 ffc6 	bl	80092c0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008334:	2100      	movs	r1, #0
 8008336:	f640 1002 	movw	r0, #2306	; 0x902
 800833a:	f001 fd45 	bl	8009dc8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800833e:	f640 1044 	movw	r0, #2372	; 0x944
 8008342:	f001 fd55 	bl	8009df0 <SUBGRF_ReadRegister>
 8008346:	4603      	mov	r3, r0
 8008348:	f043 0302 	orr.w	r3, r3, #2
 800834c:	b2db      	uxtb	r3, r3
 800834e:	4619      	mov	r1, r3
 8008350:	f640 1044 	movw	r0, #2372	; 0x944
 8008354:	f001 fd38 	bl	8009dc8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008358:	1dfb      	adds	r3, r7, #7
 800835a:	22ff      	movs	r2, #255	; 0xff
 800835c:	4619      	mov	r1, r3
 800835e:	4855      	ldr	r0, [pc, #340]	; (80084b4 <RadioIrqProcess+0x2b4>)
 8008360:	f000 fe7e 	bl	8009060 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008364:	4854      	ldr	r0, [pc, #336]	; (80084b8 <RadioIrqProcess+0x2b8>)
 8008366:	f001 fcdd 	bl	8009d24 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800836a:	4b50      	ldr	r3, [pc, #320]	; (80084ac <RadioIrqProcess+0x2ac>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 811c 	beq.w	80085ac <RadioIrqProcess+0x3ac>
 8008374:	4b4d      	ldr	r3, [pc, #308]	; (80084ac <RadioIrqProcess+0x2ac>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 8116 	beq.w	80085ac <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8008380:	4b48      	ldr	r3, [pc, #288]	; (80084a4 <RadioIrqProcess+0x2a4>)
 8008382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008386:	2b01      	cmp	r3, #1
 8008388:	d10e      	bne.n	80083a8 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800838a:	4b48      	ldr	r3, [pc, #288]	; (80084ac <RadioIrqProcess+0x2ac>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689c      	ldr	r4, [r3, #8]
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	b299      	uxth	r1, r3
 8008394:	4b43      	ldr	r3, [pc, #268]	; (80084a4 <RadioIrqProcess+0x2a4>)
 8008396:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800839a:	b21a      	sxth	r2, r3
 800839c:	4b41      	ldr	r3, [pc, #260]	; (80084a4 <RadioIrqProcess+0x2a4>)
 800839e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80083a2:	4844      	ldr	r0, [pc, #272]	; (80084b4 <RadioIrqProcess+0x2b4>)
 80083a4:	47a0      	blx	r4
                break;
 80083a6:	e01d      	b.n	80083e4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80083a8:	4b3e      	ldr	r3, [pc, #248]	; (80084a4 <RadioIrqProcess+0x2a4>)
 80083aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ac:	463a      	mov	r2, r7
 80083ae:	4611      	mov	r1, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f001 ff4b 	bl	800a24c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80083b6:	4b3d      	ldr	r3, [pc, #244]	; (80084ac <RadioIrqProcess+0x2ac>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689c      	ldr	r4, [r3, #8]
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	b299      	uxth	r1, r3
 80083c0:	4b38      	ldr	r3, [pc, #224]	; (80084a4 <RadioIrqProcess+0x2a4>)
 80083c2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80083c6:	b218      	sxth	r0, r3
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80083ce:	4a3b      	ldr	r2, [pc, #236]	; (80084bc <RadioIrqProcess+0x2bc>)
 80083d0:	fb82 5203 	smull	r5, r2, r2, r3
 80083d4:	1192      	asrs	r2, r2, #6
 80083d6:	17db      	asrs	r3, r3, #31
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	b25b      	sxtb	r3, r3
 80083dc:	4602      	mov	r2, r0
 80083de:	4835      	ldr	r0, [pc, #212]	; (80084b4 <RadioIrqProcess+0x2b4>)
 80083e0:	47a0      	blx	r4
                break;
 80083e2:	bf00      	nop
        break;
 80083e4:	e0e2      	b.n	80085ac <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80083e6:	2000      	movs	r0, #0
 80083e8:	f000 ff6a 	bl	80092c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80083ec:	4b2f      	ldr	r3, [pc, #188]	; (80084ac <RadioIrqProcess+0x2ac>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 80dd 	beq.w	80085b0 <RadioIrqProcess+0x3b0>
 80083f6:	4b2d      	ldr	r3, [pc, #180]	; (80084ac <RadioIrqProcess+0x2ac>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 80d7 	beq.w	80085b0 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8008402:	4b2a      	ldr	r3, [pc, #168]	; (80084ac <RadioIrqProcess+0x2ac>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	2000      	movs	r0, #0
 800840a:	4798      	blx	r3
        break;
 800840c:	e0d0      	b.n	80085b0 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 800840e:	2000      	movs	r0, #0
 8008410:	f000 ff56 	bl	80092c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008414:	4b25      	ldr	r3, [pc, #148]	; (80084ac <RadioIrqProcess+0x2ac>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 80cb 	beq.w	80085b4 <RadioIrqProcess+0x3b4>
 800841e:	4b23      	ldr	r3, [pc, #140]	; (80084ac <RadioIrqProcess+0x2ac>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 80c5 	beq.w	80085b4 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 800842a:	4b20      	ldr	r3, [pc, #128]	; (80084ac <RadioIrqProcess+0x2ac>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	2001      	movs	r0, #1
 8008432:	4798      	blx	r3
        break;
 8008434:	e0be      	b.n	80085b4 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8008436:	f000 fdf9 	bl	800902c <SUBGRF_GetOperatingMode>
 800843a:	4603      	mov	r3, r0
 800843c:	2b04      	cmp	r3, #4
 800843e:	d115      	bne.n	800846c <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8008440:	4819      	ldr	r0, [pc, #100]	; (80084a8 <RadioIrqProcess+0x2a8>)
 8008442:	f002 fa1d 	bl	800a880 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008446:	2000      	movs	r0, #0
 8008448:	f000 ff3a 	bl	80092c0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800844c:	4b17      	ldr	r3, [pc, #92]	; (80084ac <RadioIrqProcess+0x2ac>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 80b1 	beq.w	80085b8 <RadioIrqProcess+0x3b8>
 8008456:	4b15      	ldr	r3, [pc, #84]	; (80084ac <RadioIrqProcess+0x2ac>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 80ab 	beq.w	80085b8 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8008462:	4b12      	ldr	r3, [pc, #72]	; (80084ac <RadioIrqProcess+0x2ac>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	4798      	blx	r3
        break;
 800846a:	e0a5      	b.n	80085b8 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800846c:	f000 fdde 	bl	800902c <SUBGRF_GetOperatingMode>
 8008470:	4603      	mov	r3, r0
 8008472:	2b05      	cmp	r3, #5
 8008474:	f040 80a0 	bne.w	80085b8 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8008478:	480d      	ldr	r0, [pc, #52]	; (80084b0 <RadioIrqProcess+0x2b0>)
 800847a:	f002 fa01 	bl	800a880 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800847e:	2000      	movs	r0, #0
 8008480:	f000 ff1e 	bl	80092c0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008484:	4b09      	ldr	r3, [pc, #36]	; (80084ac <RadioIrqProcess+0x2ac>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8095 	beq.w	80085b8 <RadioIrqProcess+0x3b8>
 800848e:	4b07      	ldr	r3, [pc, #28]	; (80084ac <RadioIrqProcess+0x2ac>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 808f 	beq.w	80085b8 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 800849a:	4b04      	ldr	r3, [pc, #16]	; (80084ac <RadioIrqProcess+0x2ac>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	4798      	blx	r3
        break;
 80084a2:	e089      	b.n	80085b8 <RadioIrqProcess+0x3b8>
 80084a4:	2000060c 	.word	0x2000060c
 80084a8:	20000668 	.word	0x20000668
 80084ac:	20000608 	.word	0x20000608
 80084b0:	20000680 	.word	0x20000680
 80084b4:	20000508 	.word	0x20000508
 80084b8:	20000630 	.word	0x20000630
 80084bc:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80084c0:	4b44      	ldr	r3, [pc, #272]	; (80085d4 <RadioIrqProcess+0x3d4>)
 80084c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d079      	beq.n	80085bc <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80084c8:	4a43      	ldr	r2, [pc, #268]	; (80085d8 <RadioIrqProcess+0x3d8>)
 80084ca:	4b42      	ldr	r3, [pc, #264]	; (80085d4 <RadioIrqProcess+0x3d4>)
 80084cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	4619      	mov	r1, r3
 80084d4:	f640 1003 	movw	r0, #2307	; 0x903
 80084d8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80084da:	4a3f      	ldr	r2, [pc, #252]	; (80085d8 <RadioIrqProcess+0x3d8>)
 80084dc:	4b3d      	ldr	r3, [pc, #244]	; (80085d4 <RadioIrqProcess+0x3d4>)
 80084de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e0:	0a1b      	lsrs	r3, r3, #8
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	4619      	mov	r1, r3
 80084e6:	f640 1004 	movw	r0, #2308	; 0x904
 80084ea:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80084ec:	4a3a      	ldr	r2, [pc, #232]	; (80085d8 <RadioIrqProcess+0x3d8>)
 80084ee:	4b39      	ldr	r3, [pc, #228]	; (80085d4 <RadioIrqProcess+0x3d4>)
 80084f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	4619      	mov	r1, r3
 80084f6:	f640 1005 	movw	r0, #2309	; 0x905
 80084fa:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80084fc:	4c36      	ldr	r4, [pc, #216]	; (80085d8 <RadioIrqProcess+0x3d8>)
 80084fe:	4b37      	ldr	r3, [pc, #220]	; (80085dc <RadioIrqProcess+0x3dc>)
 8008500:	f640 1002 	movw	r0, #2306	; 0x902
 8008504:	4798      	blx	r3
 8008506:	4603      	mov	r3, r0
 8008508:	f043 0301 	orr.w	r3, r3, #1
 800850c:	b2db      	uxtb	r3, r3
 800850e:	4619      	mov	r1, r3
 8008510:	f640 1002 	movw	r0, #2306	; 0x902
 8008514:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8008516:	4b2f      	ldr	r3, [pc, #188]	; (80085d4 <RadioIrqProcess+0x3d4>)
 8008518:	2200      	movs	r2, #0
 800851a:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800851c:	2300      	movs	r3, #0
 800851e:	2200      	movs	r2, #0
 8008520:	f240 2162 	movw	r1, #610	; 0x262
 8008524:	f240 2062 	movw	r0, #610	; 0x262
 8008528:	f001 f89e 	bl	8009668 <SUBGRF_SetDioIrqParams>
        break;
 800852c:	e046      	b.n	80085bc <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 800852e:	f001 ff38 	bl	800a3a2 <RFW_Is_Init>
 8008532:	4603      	mov	r3, r0
 8008534:	2b01      	cmp	r3, #1
 8008536:	d143      	bne.n	80085c0 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8008538:	f001 ff69 	bl	800a40e <RFW_ReceivePayload>
        break;
 800853c:	e040      	b.n	80085c0 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800853e:	4828      	ldr	r0, [pc, #160]	; (80085e0 <RadioIrqProcess+0x3e0>)
 8008540:	f002 f99e 	bl	800a880 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008544:	4b23      	ldr	r3, [pc, #140]	; (80085d4 <RadioIrqProcess+0x3d4>)
 8008546:	785b      	ldrb	r3, [r3, #1]
 8008548:	f083 0301 	eor.w	r3, r3, #1
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d002      	beq.n	8008558 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8008552:	2000      	movs	r0, #0
 8008554:	f000 feb4 	bl	80092c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008558:	4b22      	ldr	r3, [pc, #136]	; (80085e4 <RadioIrqProcess+0x3e4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d031      	beq.n	80085c4 <RadioIrqProcess+0x3c4>
 8008560:	4b20      	ldr	r3, [pc, #128]	; (80085e4 <RadioIrqProcess+0x3e4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d02c      	beq.n	80085c4 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 800856a:	4b1e      	ldr	r3, [pc, #120]	; (80085e4 <RadioIrqProcess+0x3e4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	4798      	blx	r3
        break;
 8008572:	e027      	b.n	80085c4 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8008574:	4b17      	ldr	r3, [pc, #92]	; (80085d4 <RadioIrqProcess+0x3d4>)
 8008576:	785b      	ldrb	r3, [r3, #1]
 8008578:	f083 0301 	eor.w	r3, r3, #1
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8008582:	2000      	movs	r0, #0
 8008584:	f000 fe9c 	bl	80092c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008588:	4b16      	ldr	r3, [pc, #88]	; (80085e4 <RadioIrqProcess+0x3e4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01b      	beq.n	80085c8 <RadioIrqProcess+0x3c8>
 8008590:	4b14      	ldr	r3, [pc, #80]	; (80085e4 <RadioIrqProcess+0x3e4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d016      	beq.n	80085c8 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800859a:	4b12      	ldr	r3, [pc, #72]	; (80085e4 <RadioIrqProcess+0x3e4>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	4798      	blx	r3
        break;
 80085a2:	e011      	b.n	80085c8 <RadioIrqProcess+0x3c8>
        break;
 80085a4:	bf00      	nop
 80085a6:	e010      	b.n	80085ca <RadioIrqProcess+0x3ca>
        break;
 80085a8:	bf00      	nop
 80085aa:	e00e      	b.n	80085ca <RadioIrqProcess+0x3ca>
        break;
 80085ac:	bf00      	nop
 80085ae:	e00c      	b.n	80085ca <RadioIrqProcess+0x3ca>
        break;
 80085b0:	bf00      	nop
 80085b2:	e00a      	b.n	80085ca <RadioIrqProcess+0x3ca>
        break;
 80085b4:	bf00      	nop
 80085b6:	e008      	b.n	80085ca <RadioIrqProcess+0x3ca>
        break;
 80085b8:	bf00      	nop
 80085ba:	e006      	b.n	80085ca <RadioIrqProcess+0x3ca>
        break;
 80085bc:	bf00      	nop
 80085be:	e004      	b.n	80085ca <RadioIrqProcess+0x3ca>
        break;
 80085c0:	bf00      	nop
 80085c2:	e002      	b.n	80085ca <RadioIrqProcess+0x3ca>
        break;
 80085c4:	bf00      	nop
 80085c6:	e000      	b.n	80085ca <RadioIrqProcess+0x3ca>
        break;
 80085c8:	bf00      	nop
    }
}
 80085ca:	bf00      	nop
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bdb0      	pop	{r4, r5, r7, pc}
 80085d2:	bf00      	nop
 80085d4:	2000060c 	.word	0x2000060c
 80085d8:	0800800f 	.word	0x0800800f
 80085dc:	08008033 	.word	0x08008033
 80085e0:	20000680 	.word	0x20000680
 80085e4:	20000608 	.word	0x20000608

080085e8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80085ec:	4b09      	ldr	r3, [pc, #36]	; (8008614 <RadioTxPrbs+0x2c>)
 80085ee:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80085f2:	2101      	movs	r1, #1
 80085f4:	4618      	mov	r0, r3
 80085f6:	f001 fcdb 	bl	8009fb0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80085fa:	4b07      	ldr	r3, [pc, #28]	; (8008618 <RadioTxPrbs+0x30>)
 80085fc:	212d      	movs	r1, #45	; 0x2d
 80085fe:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008602:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8008604:	f000 ff1f 	bl	8009446 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8008608:	4804      	ldr	r0, [pc, #16]	; (800861c <RadioTxPrbs+0x34>)
 800860a:	f000 fe75 	bl	80092f8 <SUBGRF_SetTx>
}
 800860e:	bf00      	nop
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	2000060c 	.word	0x2000060c
 8008618:	0800800f 	.word	0x0800800f
 800861c:	000fffff 	.word	0x000fffff

08008620 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800862a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800862e:	4618      	mov	r0, r3
 8008630:	f001 fce6 	bl	800a000 <SUBGRF_SetRfTxPower>
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008638:	210e      	movs	r1, #14
 800863a:	f640 101f 	movw	r0, #2335	; 0x91f
 800863e:	f001 fbc3 	bl	8009dc8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	2101      	movs	r1, #1
 8008646:	4618      	mov	r0, r3
 8008648:	f001 fcb2 	bl	8009fb0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800864c:	f000 fef2 	bl	8009434 <SUBGRF_SetTxContinuousWave>
}
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008658:	b480      	push	{r7}
 800865a:	b089      	sub	sp, #36	; 0x24
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	4613      	mov	r3, r2
 8008664:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800866e:	2300      	movs	r3, #0
 8008670:	61bb      	str	r3, [r7, #24]
 8008672:	e011      	b.n	8008698 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	4413      	add	r3, r2
 800867a:	781a      	ldrb	r2, [r3, #0]
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	440b      	add	r3, r1
 8008682:	43d2      	mvns	r2, r2
 8008684:	b2d2      	uxtb	r2, r2
 8008686:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4413      	add	r3, r2
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	3301      	adds	r3, #1
 8008696:	61bb      	str	r3, [r7, #24]
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	429a      	cmp	r2, r3
 800869e:	dbe9      	blt.n	8008674 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80086a0:	2300      	movs	r3, #0
 80086a2:	61bb      	str	r3, [r7, #24]
 80086a4:	e049      	b.n	800873a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	425a      	negs	r2, r3
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	f002 0207 	and.w	r2, r2, #7
 80086b2:	bf58      	it	pl
 80086b4:	4253      	negpl	r3, r2
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f1c3 0307 	rsb	r3, r3, #7
 80086bc:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	da00      	bge.n	80086c6 <payload_integration+0x6e>
 80086c4:	3307      	adds	r3, #7
 80086c6:	10db      	asrs	r3, r3, #3
 80086c8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	3301      	adds	r3, #1
 80086ce:	425a      	negs	r2, r3
 80086d0:	f003 0307 	and.w	r3, r3, #7
 80086d4:	f002 0207 	and.w	r2, r2, #7
 80086d8:	bf58      	it	pl
 80086da:	4253      	negpl	r3, r2
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	f1c3 0307 	rsb	r3, r3, #7
 80086e2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	3301      	adds	r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da00      	bge.n	80086ee <payload_integration+0x96>
 80086ec:	3307      	adds	r3, #7
 80086ee:	10db      	asrs	r3, r3, #3
 80086f0:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80086f2:	7dbb      	ldrb	r3, [r7, #22]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	4413      	add	r3, r2
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
 80086fe:	fa42 f303 	asr.w	r3, r2, r3
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800870a:	7ffa      	ldrb	r2, [r7, #31]
 800870c:	7cfb      	ldrb	r3, [r7, #19]
 800870e:	4053      	eors	r3, r2
 8008710:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8008712:	7d3b      	ldrb	r3, [r7, #20]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	b25a      	sxtb	r2, r3
 800871c:	7ff9      	ldrb	r1, [r7, #31]
 800871e:	7d7b      	ldrb	r3, [r7, #21]
 8008720:	fa01 f303 	lsl.w	r3, r1, r3
 8008724:	b25b      	sxtb	r3, r3
 8008726:	4313      	orrs	r3, r2
 8008728:	b259      	sxtb	r1, r3
 800872a:	7d3b      	ldrb	r3, [r7, #20]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	b2ca      	uxtb	r2, r1
 8008732:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	3301      	adds	r3, #1
 8008738:	61bb      	str	r3, [r7, #24]
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	429a      	cmp	r2, r3
 8008742:	dbb0      	blt.n	80086a6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008744:	7ffb      	ldrb	r3, [r7, #31]
 8008746:	01db      	lsls	r3, r3, #7
 8008748:	b25a      	sxtb	r2, r3
 800874a:	7ffb      	ldrb	r3, [r7, #31]
 800874c:	019b      	lsls	r3, r3, #6
 800874e:	b25b      	sxtb	r3, r3
 8008750:	4313      	orrs	r3, r2
 8008752:	b25b      	sxtb	r3, r3
 8008754:	7ffa      	ldrb	r2, [r7, #31]
 8008756:	2a00      	cmp	r2, #0
 8008758:	d101      	bne.n	800875e <payload_integration+0x106>
 800875a:	2220      	movs	r2, #32
 800875c:	e000      	b.n	8008760 <payload_integration+0x108>
 800875e:	2200      	movs	r2, #0
 8008760:	4313      	orrs	r3, r2
 8008762:	b259      	sxtb	r1, r3
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	4413      	add	r3, r2
 800876a:	b2ca      	uxtb	r2, r1
 800876c:	701a      	strb	r2, [r3, #0]
}
 800876e:	bf00      	nop
 8008770:	3724      	adds	r7, #36	; 0x24
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr

08008778 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08c      	sub	sp, #48	; 0x30
 800877c:	af00      	add	r7, sp, #0
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800878c:	2300      	movs	r3, #0
 800878e:	623b      	str	r3, [r7, #32]
 8008790:	2300      	movs	r3, #0
 8008792:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008794:	f001 fdff 	bl	800a396 <RFW_DeInit>

    if( rxContinuous != 0 )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	bf14      	ite	ne
 80087a8:	2301      	movne	r3, #1
 80087aa:	2300      	moveq	r3, #0
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	4ba3      	ldr	r3, [pc, #652]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 80087b0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <RadioSetRxGenericConfig+0x48>
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	f000 80dc 	beq.w	8008976 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80087be:	e194      	b.n	8008aea <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d003      	beq.n	80087d0 <RadioSetRxGenericConfig+0x58>
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d102      	bne.n	80087d6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 80087d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087d4:	e18a      	b.n	8008aec <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	7f9b      	ldrb	r3, [r3, #30]
 80087da:	2b08      	cmp	r3, #8
 80087dc:	d902      	bls.n	80087e4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80087de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087e2:	e183      	b.n	8008aec <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	6919      	ldr	r1, [r3, #16]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	7f9b      	ldrb	r3, [r3, #30]
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	f107 0320 	add.w	r3, r7, #32
 80087f2:	4618      	mov	r0, r3
 80087f4:	f001 ff66 	bl	800a6c4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bf14      	ite	ne
 8008800:	2301      	movne	r3, #1
 8008802:	2300      	moveq	r3, #0
 8008804:	b2db      	uxtb	r3, r3
 8008806:	4618      	mov	r0, r3
 8008808:	f000 fe26 	bl	8009458 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800880c:	4b8b      	ldr	r3, [pc, #556]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	4a88      	ldr	r2, [pc, #544]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 800881a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008822:	4b86      	ldr	r3, [pc, #536]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	4618      	mov	r0, r3
 800882e:	f001 fce5 	bl	800a1fc <SUBGRF_GetFskBandwidthRegValue>
 8008832:	4603      	mov	r3, r0
 8008834:	461a      	mov	r2, r3
 8008836:	4b81      	ldr	r3, [pc, #516]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800883c:	4b7f      	ldr	r3, [pc, #508]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 800883e:	2200      	movs	r2, #0
 8008840:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	b29b      	uxth	r3, r3
 8008848:	00db      	lsls	r3, r3, #3
 800884a:	b29a      	uxth	r2, r3
 800884c:	4b7b      	ldr	r3, [pc, #492]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 800884e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	7fda      	ldrb	r2, [r3, #31]
 8008854:	4b79      	ldr	r3, [pc, #484]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008856:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	7f9b      	ldrb	r3, [r3, #30]
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	b2da      	uxtb	r2, r3
 8008860:	4b76      	ldr	r3, [pc, #472]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008862:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800886a:	4b74      	ldr	r3, [pc, #464]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 800886c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008874:	2b00      	cmp	r3, #0
 8008876:	d105      	bne.n	8008884 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	b2da      	uxtb	r2, r3
 800887e:	4b6f      	ldr	r3, [pc, #444]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008880:	759a      	strb	r2, [r3, #22]
 8008882:	e00b      	b.n	800889c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800888a:	2b02      	cmp	r3, #2
 800888c:	d103      	bne.n	8008896 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800888e:	4b6b      	ldr	r3, [pc, #428]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008890:	22ff      	movs	r2, #255	; 0xff
 8008892:	759a      	strb	r2, [r3, #22]
 8008894:	e002      	b.n	800889c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008896:	4b69      	ldr	r3, [pc, #420]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008898:	22ff      	movs	r2, #255	; 0xff
 800889a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d004      	beq.n	80088b0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d12d      	bne.n	800890c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80088b6:	2bf1      	cmp	r3, #241	; 0xf1
 80088b8:	d00c      	beq.n	80088d4 <RadioSetRxGenericConfig+0x15c>
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80088c0:	2bf2      	cmp	r3, #242	; 0xf2
 80088c2:	d007      	beq.n	80088d4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d002      	beq.n	80088d4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 80088ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088d2:	e10b      	b.n	8008aec <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80088d4:	2300      	movs	r3, #0
 80088d6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80088dc:	4b58      	ldr	r3, [pc, #352]	; (8008a40 <RadioSetRxGenericConfig+0x2c8>)
 80088de:	6819      	ldr	r1, [r3, #0]
 80088e0:	f107 0314 	add.w	r3, r7, #20
 80088e4:	4a57      	ldr	r2, [pc, #348]	; (8008a44 <RadioSetRxGenericConfig+0x2cc>)
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 fd48 	bl	800a37c <RFW_Init>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <RadioSetRxGenericConfig+0x180>
                return -1;
 80088f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088f6:	e0f9      	b.n	8008aec <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80088f8:	4b50      	ldr	r3, [pc, #320]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80088fe:	4b4f      	ldr	r3, [pc, #316]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008900:	2201      	movs	r2, #1
 8008902:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008904:	4b4d      	ldr	r3, [pc, #308]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008906:	2200      	movs	r2, #0
 8008908:	755a      	strb	r2, [r3, #21]
        {
 800890a:	e00e      	b.n	800892a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008912:	4b4a      	ldr	r3, [pc, #296]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008914:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800891c:	4b47      	ldr	r3, [pc, #284]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 800891e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008926:	4b45      	ldr	r3, [pc, #276]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008928:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800892a:	f7ff fa6e 	bl	8007e0a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800892e:	2000      	movs	r0, #0
 8008930:	f7fe fc0a 	bl	8007148 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008934:	4844      	ldr	r0, [pc, #272]	; (8008a48 <RadioSetRxGenericConfig+0x2d0>)
 8008936:	f001 f82d 	bl	8009994 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800893a:	4844      	ldr	r0, [pc, #272]	; (8008a4c <RadioSetRxGenericConfig+0x2d4>)
 800893c:	f001 f8fc 	bl	8009b38 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008940:	f107 0320 	add.w	r3, r7, #32
 8008944:	4618      	mov	r0, r3
 8008946:	f000 fbc0 	bl	80090ca <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	8b9b      	ldrh	r3, [r3, #28]
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fc0a 	bl	8009168 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	8b1b      	ldrh	r3, [r3, #24]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fbe5 	bl	8009128 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008964:	fb03 f202 	mul.w	r2, r3, r2
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008970:	4a32      	ldr	r2, [pc, #200]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008972:	6093      	str	r3, [r2, #8]
        break;
 8008974:	e0b9      	b.n	8008aea <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800897e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008982:	e0b3      	b.n	8008aec <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800898a:	2b01      	cmp	r3, #1
 800898c:	d104      	bne.n	8008998 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008996:	e002      	b.n	800899e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008998:	23ff      	movs	r3, #255	; 0xff
 800899a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	bf14      	ite	ne
 80089a6:	2301      	movne	r3, #1
 80089a8:	2300      	moveq	r3, #0
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 fd53 	bl	8009458 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fd5d 	bl	8009476 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80089bc:	4b1f      	ldr	r3, [pc, #124]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80089ca:	4b1c      	ldr	r3, [pc, #112]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 80089cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80089d6:	4b19      	ldr	r3, [pc, #100]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 80089d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80089e2:	4b16      	ldr	r3, [pc, #88]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 80089e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d010      	beq.n	8008a14 <RadioSetRxGenericConfig+0x29c>
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	dc2c      	bgt.n	8008a50 <RadioSetRxGenericConfig+0x2d8>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <RadioSetRxGenericConfig+0x288>
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d005      	beq.n	8008a0a <RadioSetRxGenericConfig+0x292>
            break;
 80089fe:	e027      	b.n	8008a50 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008a00:	4b0e      	ldr	r3, [pc, #56]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008a08:	e023      	b.n	8008a52 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008a0a:	4b0c      	ldr	r3, [pc, #48]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008a12:	e01e      	b.n	8008a52 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a1a:	2b0b      	cmp	r3, #11
 8008a1c:	d004      	beq.n	8008a28 <RadioSetRxGenericConfig+0x2b0>
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a24:	2b0c      	cmp	r3, #12
 8008a26:	d104      	bne.n	8008a32 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008a28:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008a30:	e00f      	b.n	8008a52 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008a32:	4b02      	ldr	r3, [pc, #8]	; (8008a3c <RadioSetRxGenericConfig+0x2c4>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008a3a:	e00a      	b.n	8008a52 <RadioSetRxGenericConfig+0x2da>
 8008a3c:	2000060c 	.word	0x2000060c
 8008a40:	20000608 	.word	0x20000608
 8008a44:	20000680 	.word	0x20000680
 8008a48:	20000644 	.word	0x20000644
 8008a4c:	2000061a 	.word	0x2000061a
            break;
 8008a50:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008a52:	4b28      	ldr	r3, [pc, #160]	; (8008af4 <RadioSetRxGenericConfig+0x37c>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008a5c:	4b25      	ldr	r3, [pc, #148]	; (8008af4 <RadioSetRxGenericConfig+0x37c>)
 8008a5e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008a66:	4b23      	ldr	r3, [pc, #140]	; (8008af4 <RadioSetRxGenericConfig+0x37c>)
 8008a68:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008a6a:	4a22      	ldr	r2, [pc, #136]	; (8008af4 <RadioSetRxGenericConfig+0x37c>)
 8008a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a70:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008a78:	4b1e      	ldr	r3, [pc, #120]	; (8008af4 <RadioSetRxGenericConfig+0x37c>)
 8008a7a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008a84:	4b1b      	ldr	r3, [pc, #108]	; (8008af4 <RadioSetRxGenericConfig+0x37c>)
 8008a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008a8a:	f7ff f9be 	bl	8007e0a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008a8e:	2001      	movs	r0, #1
 8008a90:	f7fe fb5a 	bl	8007148 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008a94:	4818      	ldr	r0, [pc, #96]	; (8008af8 <RadioSetRxGenericConfig+0x380>)
 8008a96:	f000 ff7d 	bl	8009994 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a9a:	4818      	ldr	r0, [pc, #96]	; (8008afc <RadioSetRxGenericConfig+0x384>)
 8008a9c:	f001 f84c 	bl	8009b38 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008aa0:	4b14      	ldr	r3, [pc, #80]	; (8008af4 <RadioSetRxGenericConfig+0x37c>)
 8008aa2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d10d      	bne.n	8008ac6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008aaa:	f240 7036 	movw	r0, #1846	; 0x736
 8008aae:	f001 f99f 	bl	8009df0 <SUBGRF_ReadRegister>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f023 0304 	bic.w	r3, r3, #4
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	4619      	mov	r1, r3
 8008abc:	f240 7036 	movw	r0, #1846	; 0x736
 8008ac0:	f001 f982 	bl	8009dc8 <SUBGRF_WriteRegister>
 8008ac4:	e00c      	b.n	8008ae0 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008ac6:	f240 7036 	movw	r0, #1846	; 0x736
 8008aca:	f001 f991 	bl	8009df0 <SUBGRF_ReadRegister>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	f043 0304 	orr.w	r3, r3, #4
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	f240 7036 	movw	r0, #1846	; 0x736
 8008adc:	f001 f974 	bl	8009dc8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008ae0:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <RadioSetRxGenericConfig+0x37c>)
 8008ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ae6:	609a      	str	r2, [r3, #8]
        break;
 8008ae8:	bf00      	nop
    }
    return status;
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3730      	adds	r7, #48	; 0x30
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	2000060c 	.word	0x2000060c
 8008af8:	20000644 	.word	0x20000644
 8008afc:	2000061a 	.word	0x2000061a

08008b00 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08e      	sub	sp, #56	; 0x38
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607b      	str	r3, [r7, #4]
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73fb      	strb	r3, [r7, #15]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008b12:	2300      	movs	r3, #0
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b16:	2300      	movs	r3, #0
 8008b18:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008b1a:	f001 fc3c 	bl	800a396 <RFW_DeInit>
    switch( modem )
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	f200 8204 	bhi.w	8008f2e <RadioSetTxGenericConfig+0x42e>
 8008b26:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <RadioSetTxGenericConfig+0x2c>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008cb1 	.word	0x08008cb1
 8008b30:	08008df9 	.word	0x08008df9
 8008b34:	08008ef1 	.word	0x08008ef1
 8008b38:	08008b3d 	.word	0x08008b3d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	7c9b      	ldrb	r3, [r3, #18]
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d902      	bls.n	8008b4a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b48:	e206      	b.n	8008f58 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6899      	ldr	r1, [r3, #8]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	7c9b      	ldrb	r3, [r3, #18]
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f001 fdb3 	bl	800a6c4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b6a:	e1f5      	b.n	8008f58 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d813      	bhi.n	8008ba0 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008b7e:	4b99      	ldr	r3, [pc, #612]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008b80:	2203      	movs	r2, #3
 8008b82:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008b84:	4b97      	ldr	r3, [pc, #604]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008b86:	2203      	movs	r2, #3
 8008b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a94      	ldr	r2, [pc, #592]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008b92:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	7cda      	ldrb	r2, [r3, #19]
 8008b98:	4b92      	ldr	r3, [pc, #584]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b9e:	e017      	b.n	8008bd0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008ba6:	4b8f      	ldr	r3, [pc, #572]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008bac:	4b8d      	ldr	r3, [pc, #564]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a8a      	ldr	r2, [pc, #552]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008bba:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	7cda      	ldrb	r2, [r3, #19]
 8008bc0:	4b88      	ldr	r3, [pc, #544]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	089b      	lsrs	r3, r3, #2
 8008bcc:	4a85      	ldr	r2, [pc, #532]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008bce:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	4b82      	ldr	r3, [pc, #520]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008bdc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008bde:	4b81      	ldr	r3, [pc, #516]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008be0:	2204      	movs	r2, #4
 8008be2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	7c9b      	ldrb	r3, [r3, #18]
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	4b7d      	ldr	r3, [pc, #500]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008bee:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008bf0:	4b7c      	ldr	r3, [pc, #496]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	7d9b      	ldrb	r3, [r3, #22]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d003      	beq.n	8008c06 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	7d1b      	ldrb	r3, [r3, #20]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d12b      	bne.n	8008c5e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	7d5b      	ldrb	r3, [r3, #21]
 8008c0a:	2bf1      	cmp	r3, #241	; 0xf1
 8008c0c:	d00a      	beq.n	8008c24 <RadioSetTxGenericConfig+0x124>
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	7d5b      	ldrb	r3, [r3, #21]
 8008c12:	2bf2      	cmp	r3, #242	; 0xf2
 8008c14:	d006      	beq.n	8008c24 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	7d5b      	ldrb	r3, [r3, #21]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d002      	beq.n	8008c24 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8008c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c22:	e199      	b.n	8008f58 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008c2e:	4b6e      	ldr	r3, [pc, #440]	; (8008de8 <RadioSetTxGenericConfig+0x2e8>)
 8008c30:	6819      	ldr	r1, [r3, #0]
 8008c32:	f107 0320 	add.w	r3, r7, #32
 8008c36:	4a6d      	ldr	r2, [pc, #436]	; (8008dec <RadioSetTxGenericConfig+0x2ec>)
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 fb9f 	bl	800a37c <RFW_Init>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8008c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c48:	e186      	b.n	8008f58 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008c4a:	4b66      	ldr	r3, [pc, #408]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008c50:	4b64      	ldr	r3, [pc, #400]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008c52:	2201      	movs	r2, #1
 8008c54:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008c56:	4b63      	ldr	r3, [pc, #396]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	755a      	strb	r2, [r3, #21]
        {
 8008c5c:	e00b      	b.n	8008c76 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	7d5a      	ldrb	r2, [r3, #21]
 8008c62:	4b60      	ldr	r3, [pc, #384]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008c64:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	7d9a      	ldrb	r2, [r3, #22]
 8008c6a:	4b5e      	ldr	r3, [pc, #376]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008c6c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	7d1a      	ldrb	r2, [r3, #20]
 8008c72:	4b5c      	ldr	r3, [pc, #368]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008c74:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008c76:	f7ff f8c8 	bl	8007e0a <RadioStandby>
        RadioSetModem( radio_modem );
 8008c7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe fa62 	bl	8007148 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008c84:	485a      	ldr	r0, [pc, #360]	; (8008df0 <RadioSetTxGenericConfig+0x2f0>)
 8008c86:	f000 fe85 	bl	8009994 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c8a:	485a      	ldr	r0, [pc, #360]	; (8008df4 <RadioSetTxGenericConfig+0x2f4>)
 8008c8c:	f000 ff54 	bl	8009b38 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 fa18 	bl	80090ca <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	8a1b      	ldrh	r3, [r3, #16]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fa62 	bl	8009168 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	899b      	ldrh	r3, [r3, #12]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 fa3d 	bl	8009128 <SUBGRF_SetCrcPolynomial>
        break;
 8008cae:	e13f      	b.n	8008f30 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d102      	bne.n	8008cbe <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cbc:	e14c      	b.n	8008f58 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	7c9b      	ldrb	r3, [r3, #18]
 8008cc2:	2b08      	cmp	r3, #8
 8008cc4:	d902      	bls.n	8008ccc <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cca:	e145      	b.n	8008f58 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	6899      	ldr	r1, [r3, #8]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	7c9b      	ldrb	r3, [r3, #18]
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f001 fcf2 	bl	800a6c4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008ce0:	4b40      	ldr	r3, [pc, #256]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a3d      	ldr	r2, [pc, #244]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008cee:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	7cda      	ldrb	r2, [r3, #19]
 8008cf4:	4b3b      	ldr	r3, [pc, #236]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	4a39      	ldr	r2, [pc, #228]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008d00:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008d02:	4b38      	ldr	r3, [pc, #224]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	4b34      	ldr	r3, [pc, #208]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008d14:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008d16:	4b33      	ldr	r3, [pc, #204]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008d18:	2204      	movs	r2, #4
 8008d1a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	7c9b      	ldrb	r3, [r3, #18]
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	4b2f      	ldr	r3, [pc, #188]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008d26:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008d28:	4b2e      	ldr	r3, [pc, #184]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	7d9b      	ldrb	r3, [r3, #22]
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d003      	beq.n	8008d3e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	7d1b      	ldrb	r3, [r3, #20]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d12a      	bne.n	8008d94 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	7d5b      	ldrb	r3, [r3, #21]
 8008d42:	2bf1      	cmp	r3, #241	; 0xf1
 8008d44:	d00a      	beq.n	8008d5c <RadioSetTxGenericConfig+0x25c>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	7d5b      	ldrb	r3, [r3, #21]
 8008d4a:	2bf2      	cmp	r3, #242	; 0xf2
 8008d4c:	d006      	beq.n	8008d5c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	7d5b      	ldrb	r3, [r3, #21]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d002      	beq.n	8008d5c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8008d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d5a:	e0fd      	b.n	8008f58 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008d64:	4b20      	ldr	r3, [pc, #128]	; (8008de8 <RadioSetTxGenericConfig+0x2e8>)
 8008d66:	6819      	ldr	r1, [r3, #0]
 8008d68:	f107 0314 	add.w	r3, r7, #20
 8008d6c:	4a1f      	ldr	r2, [pc, #124]	; (8008dec <RadioSetTxGenericConfig+0x2ec>)
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 fb04 	bl	800a37c <RFW_Init>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8008d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d7e:	e0eb      	b.n	8008f58 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008d80:	4b18      	ldr	r3, [pc, #96]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008d86:	4b17      	ldr	r3, [pc, #92]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008d88:	2201      	movs	r2, #1
 8008d8a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008d8c:	4b15      	ldr	r3, [pc, #84]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	755a      	strb	r2, [r3, #21]
        {
 8008d92:	e00b      	b.n	8008dac <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	7d5a      	ldrb	r2, [r3, #21]
 8008d98:	4b12      	ldr	r3, [pc, #72]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008d9a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	7d9a      	ldrb	r2, [r3, #22]
 8008da0:	4b10      	ldr	r3, [pc, #64]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008da2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	7d1a      	ldrb	r2, [r3, #20]
 8008da8:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <RadioSetTxGenericConfig+0x2e4>)
 8008daa:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008dac:	f7ff f82d 	bl	8007e0a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008db0:	2000      	movs	r0, #0
 8008db2:	f7fe f9c9 	bl	8007148 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008db6:	480e      	ldr	r0, [pc, #56]	; (8008df0 <RadioSetTxGenericConfig+0x2f0>)
 8008db8:	f000 fdec 	bl	8009994 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008dbc:	480d      	ldr	r0, [pc, #52]	; (8008df4 <RadioSetTxGenericConfig+0x2f4>)
 8008dbe:	f000 febb 	bl	8009b38 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 f97f 	bl	80090ca <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	8a1b      	ldrh	r3, [r3, #16]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 f9c9 	bl	8009168 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	899b      	ldrh	r3, [r3, #12]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f9a4 	bl	8009128 <SUBGRF_SetCrcPolynomial>
        break;
 8008de0:	e0a6      	b.n	8008f30 <RadioSetTxGenericConfig+0x430>
 8008de2:	bf00      	nop
 8008de4:	2000060c 	.word	0x2000060c
 8008de8:	20000608 	.word	0x20000608
 8008dec:	20000668 	.word	0x20000668
 8008df0:	20000644 	.word	0x20000644
 8008df4:	2000061a 	.word	0x2000061a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008df8:	4b59      	ldr	r3, [pc, #356]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	781a      	ldrb	r2, [r3, #0]
 8008e04:	4b56      	ldr	r3, [pc, #344]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	785a      	ldrb	r2, [r3, #1]
 8008e0e:	4b54      	ldr	r3, [pc, #336]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	789a      	ldrb	r2, [r3, #2]
 8008e18:	4b51      	ldr	r3, [pc, #324]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	78db      	ldrb	r3, [r3, #3]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d010      	beq.n	8008e48 <RadioSetTxGenericConfig+0x348>
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	dc20      	bgt.n	8008e6c <RadioSetTxGenericConfig+0x36c>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <RadioSetTxGenericConfig+0x334>
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d005      	beq.n	8008e3e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8008e32:	e01b      	b.n	8008e6c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008e34:	4b4a      	ldr	r3, [pc, #296]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e3c:	e017      	b.n	8008e6e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008e3e:	4b48      	ldr	r3, [pc, #288]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e46:	e012      	b.n	8008e6e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b0b      	cmp	r3, #11
 8008e4e:	d003      	beq.n	8008e58 <RadioSetTxGenericConfig+0x358>
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	2b0c      	cmp	r3, #12
 8008e56:	d104      	bne.n	8008e62 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008e58:	4b41      	ldr	r3, [pc, #260]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e60:	e005      	b.n	8008e6e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008e62:	4b3f      	ldr	r3, [pc, #252]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e6a:	e000      	b.n	8008e6e <RadioSetTxGenericConfig+0x36e>
            break;
 8008e6c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008e6e:	4b3c      	ldr	r3, [pc, #240]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e70:	2201      	movs	r2, #1
 8008e72:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	889a      	ldrh	r2, [r3, #4]
 8008e78:	4b39      	ldr	r3, [pc, #228]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e7a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	799a      	ldrb	r2, [r3, #6]
 8008e80:	4b37      	ldr	r3, [pc, #220]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e82:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	79da      	ldrb	r2, [r3, #7]
 8008e88:	4b35      	ldr	r3, [pc, #212]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e8a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	7a1a      	ldrb	r2, [r3, #8]
 8008e92:	4b33      	ldr	r3, [pc, #204]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8008e98:	f7fe ffb7 	bl	8007e0a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008e9c:	2001      	movs	r0, #1
 8008e9e:	f7fe f953 	bl	8007148 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008ea2:	4830      	ldr	r0, [pc, #192]	; (8008f64 <RadioSetTxGenericConfig+0x464>)
 8008ea4:	f000 fd76 	bl	8009994 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008ea8:	482f      	ldr	r0, [pc, #188]	; (8008f68 <RadioSetTxGenericConfig+0x468>)
 8008eaa:	f000 fe45 	bl	8009b38 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8008eae:	4b2c      	ldr	r3, [pc, #176]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008eb4:	2b06      	cmp	r3, #6
 8008eb6:	d10d      	bne.n	8008ed4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008eb8:	f640 0089 	movw	r0, #2185	; 0x889
 8008ebc:	f000 ff98 	bl	8009df0 <SUBGRF_ReadRegister>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	f023 0304 	bic.w	r3, r3, #4
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	4619      	mov	r1, r3
 8008eca:	f640 0089 	movw	r0, #2185	; 0x889
 8008ece:	f000 ff7b 	bl	8009dc8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8008ed2:	e02d      	b.n	8008f30 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008ed4:	f640 0089 	movw	r0, #2185	; 0x889
 8008ed8:	f000 ff8a 	bl	8009df0 <SUBGRF_ReadRegister>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f043 0304 	orr.w	r3, r3, #4
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f640 0089 	movw	r0, #2185	; 0x889
 8008eea:	f000 ff6d 	bl	8009dc8 <SUBGRF_WriteRegister>
        break;
 8008eee:	e01f      	b.n	8008f30 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d004      	beq.n	8008f02 <RadioSetTxGenericConfig+0x402>
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f00:	d902      	bls.n	8008f08 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f06:	e027      	b.n	8008f58 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8008f08:	2003      	movs	r0, #3
 8008f0a:	f7fe f91d 	bl	8007148 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008f0e:	4b14      	ldr	r3, [pc, #80]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008f10:	2202      	movs	r2, #2
 8008f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a11      	ldr	r2, [pc, #68]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008f1c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008f1e:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008f20:	2216      	movs	r2, #22
 8008f22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008f26:	480f      	ldr	r0, [pc, #60]	; (8008f64 <RadioSetTxGenericConfig+0x464>)
 8008f28:	f000 fd34 	bl	8009994 <SUBGRF_SetModulationParams>
        break;
 8008f2c:	e000      	b.n	8008f30 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8008f2e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f001 f863 	bl	800a000 <SUBGRF_SetRfTxPower>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4b08      	ldr	r3, [pc, #32]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008f40:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008f44:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008f46:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 fa37 	bl	800a3be <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008f50:	4a03      	ldr	r2, [pc, #12]	; (8008f60 <RadioSetTxGenericConfig+0x460>)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6053      	str	r3, [r2, #4]
    return 0;
 8008f56:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3738      	adds	r7, #56	; 0x38
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	2000060c 	.word	0x2000060c
 8008f64:	20000644 	.word	0x20000644
 8008f68:	2000061a 	.word	0x2000061a

08008f6c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008f74:	2301      	movs	r3, #1
 8008f76:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bc80      	pop	{r7}
 8008f82:	4770      	bx	lr

08008f84 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008f8e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bc80      	pop	{r7}
 8008f98:	4770      	bx	lr
	...

08008f9c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8008faa:	4a1d      	ldr	r2, [pc, #116]	; (8009020 <SUBGRF_Init+0x84>)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8008fb0:	f7f8 fcca 	bl	8001948 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008fb4:	2002      	movs	r0, #2
 8008fb6:	f001 f8ff 	bl	800a1b8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8008fba:	4b1a      	ldr	r3, [pc, #104]	; (8009024 <SUBGRF_Init+0x88>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	f000 f97d 	bl	80092c0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8008fc6:	f001 fb52 	bl	800a66e <RBI_IsTCXO>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d10e      	bne.n	8008fee <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8008fd0:	2140      	movs	r1, #64	; 0x40
 8008fd2:	2001      	movs	r0, #1
 8008fd4:	f000 fb82 	bl	80096dc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8008fd8:	2100      	movs	r1, #0
 8008fda:	f640 1011 	movw	r0, #2321	; 0x911
 8008fde:	f000 fef3 	bl	8009dc8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8008fe2:	237f      	movs	r3, #127	; 0x7f
 8008fe4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8008fe6:	7b38      	ldrb	r0, [r7, #12]
 8008fe8:	f000 fa8b 	bl	8009502 <SUBGRF_Calibrate>
 8008fec:	e009      	b.n	8009002 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008fee:	2120      	movs	r1, #32
 8008ff0:	f640 1011 	movw	r0, #2321	; 0x911
 8008ff4:	f000 fee8 	bl	8009dc8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008ff8:	2120      	movs	r1, #32
 8008ffa:	f640 1012 	movw	r0, #2322	; 0x912
 8008ffe:	f000 fee3 	bl	8009dc8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009002:	210e      	movs	r1, #14
 8009004:	f640 101f 	movw	r0, #2335	; 0x91f
 8009008:	f000 fede 	bl	8009dc8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800900c:	f001 fa86 	bl	800a51c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009010:	4b05      	ldr	r3, [pc, #20]	; (8009028 <SUBGRF_Init+0x8c>)
 8009012:	2201      	movs	r2, #1
 8009014:	701a      	strb	r2, [r3, #0]
}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	200006a4 	.word	0x200006a4
 8009024:	200006a0 	.word	0x200006a0
 8009028:	20000698 	.word	0x20000698

0800902c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009030:	4b02      	ldr	r3, [pc, #8]	; (800903c <SUBGRF_GetOperatingMode+0x10>)
 8009032:	781b      	ldrb	r3, [r3, #0]
}
 8009034:	4618      	mov	r0, r3
 8009036:	46bd      	mov	sp, r7
 8009038:	bc80      	pop	{r7}
 800903a:	4770      	bx	lr
 800903c:	20000698 	.word	0x20000698

08009040 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	461a      	mov	r2, r3
 8009050:	6879      	ldr	r1, [r7, #4]
 8009052:	2000      	movs	r0, #0
 8009054:	f000 ff24 	bl	8009ea0 <SUBGRF_WriteBuffer>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	4613      	mov	r3, r2
 800906c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800906e:	2300      	movs	r3, #0
 8009070:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009072:	f107 0317 	add.w	r3, r7, #23
 8009076:	4619      	mov	r1, r3
 8009078:	68b8      	ldr	r0, [r7, #8]
 800907a:	f000 fe27 	bl	8009ccc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	79fa      	ldrb	r2, [r7, #7]
 8009084:	429a      	cmp	r2, r3
 8009086:	d201      	bcs.n	800908c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009088:	2301      	movs	r3, #1
 800908a:	e007      	b.n	800909c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800908c:	7df8      	ldrb	r0, [r7, #23]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	68f9      	ldr	r1, [r7, #12]
 8009096:	f000 ff25 	bl	8009ee4 <SUBGRF_ReadBuffer>

    return 0;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	460b      	mov	r3, r1
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80090b2:	7afb      	ldrb	r3, [r7, #11]
 80090b4:	4619      	mov	r1, r3
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff ffc2 	bl	8009040 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f91b 	bl	80092f8 <SUBGRF_SetTx>
}
 80090c2:	bf00      	nop
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80090d2:	2208      	movs	r2, #8
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80090da:	f000 fe9d 	bl	8009e18 <SUBGRF_WriteRegisters>
    return 0;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	0a1b      	lsrs	r3, r3, #8
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80090fc:	88fb      	ldrh	r3, [r7, #6]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009102:	f000 fb6f 	bl	80097e4 <SUBGRF_GetPacketType>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d108      	bne.n	800911e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800910c:	f107 030c 	add.w	r3, r7, #12
 8009110:	2202      	movs	r2, #2
 8009112:	4619      	mov	r1, r3
 8009114:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009118:	f000 fe7e 	bl	8009e18 <SUBGRF_WriteRegisters>
            break;
 800911c:	e000      	b.n	8009120 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800911e:	bf00      	nop
    }
}
 8009120:	bf00      	nop
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009132:	88fb      	ldrh	r3, [r7, #6]
 8009134:	0a1b      	lsrs	r3, r3, #8
 8009136:	b29b      	uxth	r3, r3
 8009138:	b2db      	uxtb	r3, r3
 800913a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800913c:	88fb      	ldrh	r3, [r7, #6]
 800913e:	b2db      	uxtb	r3, r3
 8009140:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009142:	f000 fb4f 	bl	80097e4 <SUBGRF_GetPacketType>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d108      	bne.n	800915e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800914c:	f107 030c 	add.w	r3, r7, #12
 8009150:	2202      	movs	r2, #2
 8009152:	4619      	mov	r1, r3
 8009154:	f240 60be 	movw	r0, #1726	; 0x6be
 8009158:	f000 fe5e 	bl	8009e18 <SUBGRF_WriteRegisters>
            break;
 800915c:	e000      	b.n	8009160 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800915e:	bf00      	nop
    }
}
 8009160:	bf00      	nop
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009176:	f000 fb35 	bl	80097e4 <SUBGRF_GetPacketType>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d121      	bne.n	80091c4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009180:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009184:	f000 fe34 	bl	8009df0 <SUBGRF_ReadRegister>
 8009188:	4603      	mov	r3, r0
 800918a:	f023 0301 	bic.w	r3, r3, #1
 800918e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	0a1b      	lsrs	r3, r3, #8
 8009194:	b29b      	uxth	r3, r3
 8009196:	b25b      	sxtb	r3, r3
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	b25a      	sxtb	r2, r3
 800919e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	b25b      	sxtb	r3, r3
 80091a6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
 80091aa:	4619      	mov	r1, r3
 80091ac:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80091b0:	f000 fe0a 	bl	8009dc8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80091b4:	88fb      	ldrh	r3, [r7, #6]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	4619      	mov	r1, r3
 80091ba:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80091be:	f000 fe03 	bl	8009dc8 <SUBGRF_WriteRegister>
            break;
 80091c2:	e000      	b.n	80091c6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80091c4:	bf00      	nop
    }
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80091e0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80091e4:	f000 fe04 	bl	8009df0 <SUBGRF_ReadRegister>
 80091e8:	4603      	mov	r3, r0
 80091ea:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	f023 0301 	bic.w	r3, r3, #1
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	4619      	mov	r1, r3
 80091f6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80091fa:	f000 fde5 	bl	8009dc8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80091fe:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009202:	f000 fdf5 	bl	8009df0 <SUBGRF_ReadRegister>
 8009206:	4603      	mov	r3, r0
 8009208:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800920a:	79bb      	ldrb	r3, [r7, #6]
 800920c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009210:	b2db      	uxtb	r3, r3
 8009212:	4619      	mov	r1, r3
 8009214:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009218:	f000 fdd6 	bl	8009dc8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800921c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009220:	f000 f88a 	bl	8009338 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009224:	463b      	mov	r3, r7
 8009226:	2204      	movs	r2, #4
 8009228:	4619      	mov	r1, r3
 800922a:	f640 0019 	movw	r0, #2073	; 0x819
 800922e:	f000 fe15 	bl	8009e5c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8009232:	2000      	movs	r0, #0
 8009234:	f000 f844 	bl	80092c0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	4619      	mov	r1, r3
 800923c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009240:	f000 fdc2 	bl	8009dc8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009244:	79bb      	ldrb	r3, [r7, #6]
 8009246:	4619      	mov	r1, r3
 8009248:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800924c:	f000 fdbc 	bl	8009dc8 <SUBGRF_WriteRegister>

    return number;
 8009250:	683b      	ldr	r3, [r7, #0]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
	...

0800925c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009264:	2000      	movs	r0, #0
 8009266:	f001 f999 	bl	800a59c <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800926a:	2002      	movs	r0, #2
 800926c:	f000 ffa4 	bl	800a1b8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009270:	793b      	ldrb	r3, [r7, #4]
 8009272:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009276:	b2db      	uxtb	r3, r3
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800927c:	793b      	ldrb	r3, [r7, #4]
 800927e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009282:	b2db      	uxtb	r3, r3
 8009284:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009286:	b25b      	sxtb	r3, r3
 8009288:	4313      	orrs	r3, r2
 800928a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800928c:	793b      	ldrb	r3, [r7, #4]
 800928e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009292:	b2db      	uxtb	r3, r3
 8009294:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009296:	4313      	orrs	r3, r2
 8009298:	b25b      	sxtb	r3, r3
 800929a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800929c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800929e:	f107 030f 	add.w	r3, r7, #15
 80092a2:	2201      	movs	r2, #1
 80092a4:	4619      	mov	r1, r3
 80092a6:	2084      	movs	r0, #132	; 0x84
 80092a8:	f000 fe3e 	bl	8009f28 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80092ac:	4b03      	ldr	r3, [pc, #12]	; (80092bc <SUBGRF_SetSleep+0x60>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	701a      	strb	r2, [r3, #0]
}
 80092b2:	bf00      	nop
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20000698 	.word	0x20000698

080092c0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80092ca:	1dfb      	adds	r3, r7, #7
 80092cc:	2201      	movs	r2, #1
 80092ce:	4619      	mov	r1, r3
 80092d0:	2080      	movs	r0, #128	; 0x80
 80092d2:	f000 fe29 	bl	8009f28 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d103      	bne.n	80092e4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80092dc:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <SUBGRF_SetStandby+0x34>)
 80092de:	2201      	movs	r2, #1
 80092e0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80092e2:	e002      	b.n	80092ea <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80092e4:	4b03      	ldr	r3, [pc, #12]	; (80092f4 <SUBGRF_SetStandby+0x34>)
 80092e6:	2202      	movs	r2, #2
 80092e8:	701a      	strb	r2, [r3, #0]
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	20000698 	.word	0x20000698

080092f8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8009300:	4b0c      	ldr	r3, [pc, #48]	; (8009334 <SUBGRF_SetTx+0x3c>)
 8009302:	2204      	movs	r2, #4
 8009304:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	0c1b      	lsrs	r3, r3, #16
 800930a:	b2db      	uxtb	r3, r3
 800930c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	0a1b      	lsrs	r3, r3, #8
 8009312:	b2db      	uxtb	r3, r3
 8009314:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800931c:	f107 030c 	add.w	r3, r7, #12
 8009320:	2203      	movs	r2, #3
 8009322:	4619      	mov	r1, r3
 8009324:	2083      	movs	r0, #131	; 0x83
 8009326:	f000 fdff 	bl	8009f28 <SUBGRF_WriteCommand>
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000698 	.word	0x20000698

08009338 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009340:	4b0c      	ldr	r3, [pc, #48]	; (8009374 <SUBGRF_SetRx+0x3c>)
 8009342:	2205      	movs	r2, #5
 8009344:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	0c1b      	lsrs	r3, r3, #16
 800934a:	b2db      	uxtb	r3, r3
 800934c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	0a1b      	lsrs	r3, r3, #8
 8009352:	b2db      	uxtb	r3, r3
 8009354:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	b2db      	uxtb	r3, r3
 800935a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800935c:	f107 030c 	add.w	r3, r7, #12
 8009360:	2203      	movs	r2, #3
 8009362:	4619      	mov	r1, r3
 8009364:	2082      	movs	r0, #130	; 0x82
 8009366:	f000 fddf 	bl	8009f28 <SUBGRF_WriteCommand>
}
 800936a:	bf00      	nop
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	20000698 	.word	0x20000698

08009378 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009380:	4b0e      	ldr	r3, [pc, #56]	; (80093bc <SUBGRF_SetRxBoosted+0x44>)
 8009382:	2205      	movs	r2, #5
 8009384:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009386:	2197      	movs	r1, #151	; 0x97
 8009388:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800938c:	f000 fd1c 	bl	8009dc8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	0c1b      	lsrs	r3, r3, #16
 8009394:	b2db      	uxtb	r3, r3
 8009396:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	0a1b      	lsrs	r3, r3, #8
 800939c:	b2db      	uxtb	r3, r3
 800939e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80093a6:	f107 030c 	add.w	r3, r7, #12
 80093aa:	2203      	movs	r2, #3
 80093ac:	4619      	mov	r1, r3
 80093ae:	2082      	movs	r0, #130	; 0x82
 80093b0:	f000 fdba 	bl	8009f28 <SUBGRF_WriteCommand>
}
 80093b4:	bf00      	nop
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20000698 	.word	0x20000698

080093c0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	0c1b      	lsrs	r3, r3, #16
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	0a1b      	lsrs	r3, r3, #8
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	0c1b      	lsrs	r3, r3, #16
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	0a1b      	lsrs	r3, r3, #8
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80093f6:	f107 0308 	add.w	r3, r7, #8
 80093fa:	2206      	movs	r2, #6
 80093fc:	4619      	mov	r1, r3
 80093fe:	2094      	movs	r0, #148	; 0x94
 8009400:	f000 fd92 	bl	8009f28 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009404:	4b03      	ldr	r3, [pc, #12]	; (8009414 <SUBGRF_SetRxDutyCycle+0x54>)
 8009406:	2206      	movs	r2, #6
 8009408:	701a      	strb	r2, [r3, #0]
}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20000698 	.word	0x20000698

08009418 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800941c:	2200      	movs	r2, #0
 800941e:	2100      	movs	r1, #0
 8009420:	20c5      	movs	r0, #197	; 0xc5
 8009422:	f000 fd81 	bl	8009f28 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009426:	4b02      	ldr	r3, [pc, #8]	; (8009430 <SUBGRF_SetCad+0x18>)
 8009428:	2207      	movs	r2, #7
 800942a:	701a      	strb	r2, [r3, #0]
}
 800942c:	bf00      	nop
 800942e:	bd80      	pop	{r7, pc}
 8009430:	20000698 	.word	0x20000698

08009434 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009438:	2200      	movs	r2, #0
 800943a:	2100      	movs	r1, #0
 800943c:	20d1      	movs	r0, #209	; 0xd1
 800943e:	f000 fd73 	bl	8009f28 <SUBGRF_WriteCommand>
}
 8009442:	bf00      	nop
 8009444:	bd80      	pop	{r7, pc}

08009446 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009446:	b580      	push	{r7, lr}
 8009448:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800944a:	2200      	movs	r2, #0
 800944c:	2100      	movs	r1, #0
 800944e:	20d2      	movs	r0, #210	; 0xd2
 8009450:	f000 fd6a 	bl	8009f28 <SUBGRF_WriteCommand>
}
 8009454:	bf00      	nop
 8009456:	bd80      	pop	{r7, pc}

08009458 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	4603      	mov	r3, r0
 8009460:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8009462:	1dfb      	adds	r3, r7, #7
 8009464:	2201      	movs	r2, #1
 8009466:	4619      	mov	r1, r3
 8009468:	209f      	movs	r0, #159	; 0x9f
 800946a:	f000 fd5d 	bl	8009f28 <SUBGRF_WriteCommand>
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b084      	sub	sp, #16
 800947a:	af00      	add	r7, sp, #0
 800947c:	4603      	mov	r3, r0
 800947e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009480:	1dfb      	adds	r3, r7, #7
 8009482:	2201      	movs	r2, #1
 8009484:	4619      	mov	r1, r3
 8009486:	20a0      	movs	r0, #160	; 0xa0
 8009488:	f000 fd4e 	bl	8009f28 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800948c:	79fb      	ldrb	r3, [r7, #7]
 800948e:	2b3f      	cmp	r3, #63	; 0x3f
 8009490:	d91c      	bls.n	80094cc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8009492:	79fb      	ldrb	r3, [r7, #7]
 8009494:	085b      	lsrs	r3, r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80094a0:	e005      	b.n	80094ae <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
 80094a4:	089b      	lsrs	r3, r3, #2
 80094a6:	73fb      	strb	r3, [r7, #15]
            exp++;
 80094a8:	7bbb      	ldrb	r3, [r7, #14]
 80094aa:	3301      	adds	r3, #1
 80094ac:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	2b1f      	cmp	r3, #31
 80094b2:	d8f6      	bhi.n	80094a2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	4413      	add	r3, r2
 80094be:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80094c0:	7b7b      	ldrb	r3, [r7, #13]
 80094c2:	4619      	mov	r1, r3
 80094c4:	f240 7006 	movw	r0, #1798	; 0x706
 80094c8:	f000 fc7e 	bl	8009dc8 <SUBGRF_WriteRegister>
    }
}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80094da:	f001 f8d3 	bl	800a684 <RBI_IsDCDC>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d102      	bne.n	80094ea <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80094e4:	2301      	movs	r3, #1
 80094e6:	71fb      	strb	r3, [r7, #7]
 80094e8:	e001      	b.n	80094ee <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80094ea:	2300      	movs	r3, #0
 80094ec:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80094ee:	1dfb      	adds	r3, r7, #7
 80094f0:	2201      	movs	r2, #1
 80094f2:	4619      	mov	r1, r3
 80094f4:	2096      	movs	r0, #150	; 0x96
 80094f6:	f000 fd17 	bl	8009f28 <SUBGRF_WriteCommand>
}
 80094fa:	bf00      	nop
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800950a:	793b      	ldrb	r3, [r7, #4]
 800950c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009510:	b2db      	uxtb	r3, r3
 8009512:	019b      	lsls	r3, r3, #6
 8009514:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009516:	793b      	ldrb	r3, [r7, #4]
 8009518:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800951c:	b2db      	uxtb	r3, r3
 800951e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009520:	b25b      	sxtb	r3, r3
 8009522:	4313      	orrs	r3, r2
 8009524:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009526:	793b      	ldrb	r3, [r7, #4]
 8009528:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800952c:	b2db      	uxtb	r3, r3
 800952e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009530:	b25b      	sxtb	r3, r3
 8009532:	4313      	orrs	r3, r2
 8009534:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009536:	793b      	ldrb	r3, [r7, #4]
 8009538:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800953c:	b2db      	uxtb	r3, r3
 800953e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009540:	b25b      	sxtb	r3, r3
 8009542:	4313      	orrs	r3, r2
 8009544:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009546:	793b      	ldrb	r3, [r7, #4]
 8009548:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800954c:	b2db      	uxtb	r3, r3
 800954e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009550:	b25b      	sxtb	r3, r3
 8009552:	4313      	orrs	r3, r2
 8009554:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009556:	793b      	ldrb	r3, [r7, #4]
 8009558:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800955c:	b2db      	uxtb	r3, r3
 800955e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009560:	b25b      	sxtb	r3, r3
 8009562:	4313      	orrs	r3, r2
 8009564:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009566:	793b      	ldrb	r3, [r7, #4]
 8009568:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800956c:	b2db      	uxtb	r3, r3
 800956e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009570:	4313      	orrs	r3, r2
 8009572:	b25b      	sxtb	r3, r3
 8009574:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009576:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009578:	f107 030f 	add.w	r3, r7, #15
 800957c:	2201      	movs	r2, #1
 800957e:	4619      	mov	r1, r3
 8009580:	2089      	movs	r0, #137	; 0x89
 8009582:	f000 fcd1 	bl	8009f28 <SUBGRF_WriteCommand>
}
 8009586:	bf00      	nop
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a1d      	ldr	r2, [pc, #116]	; (8009610 <SUBGRF_CalibrateImage+0x80>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d904      	bls.n	80095aa <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80095a0:	23e1      	movs	r3, #225	; 0xe1
 80095a2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80095a4:	23e9      	movs	r3, #233	; 0xe9
 80095a6:	737b      	strb	r3, [r7, #13]
 80095a8:	e027      	b.n	80095fa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a19      	ldr	r2, [pc, #100]	; (8009614 <SUBGRF_CalibrateImage+0x84>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d904      	bls.n	80095bc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80095b2:	23d7      	movs	r3, #215	; 0xd7
 80095b4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80095b6:	23db      	movs	r3, #219	; 0xdb
 80095b8:	737b      	strb	r3, [r7, #13]
 80095ba:	e01e      	b.n	80095fa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a16      	ldr	r2, [pc, #88]	; (8009618 <SUBGRF_CalibrateImage+0x88>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d904      	bls.n	80095ce <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80095c4:	23c1      	movs	r3, #193	; 0xc1
 80095c6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80095c8:	23c5      	movs	r3, #197	; 0xc5
 80095ca:	737b      	strb	r3, [r7, #13]
 80095cc:	e015      	b.n	80095fa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a12      	ldr	r2, [pc, #72]	; (800961c <SUBGRF_CalibrateImage+0x8c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d904      	bls.n	80095e0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80095d6:	2375      	movs	r3, #117	; 0x75
 80095d8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80095da:	2381      	movs	r3, #129	; 0x81
 80095dc:	737b      	strb	r3, [r7, #13]
 80095de:	e00c      	b.n	80095fa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a0f      	ldr	r2, [pc, #60]	; (8009620 <SUBGRF_CalibrateImage+0x90>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d904      	bls.n	80095f2 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80095e8:	236b      	movs	r3, #107	; 0x6b
 80095ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80095ec:	236f      	movs	r3, #111	; 0x6f
 80095ee:	737b      	strb	r3, [r7, #13]
 80095f0:	e003      	b.n	80095fa <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80095f2:	2329      	movs	r3, #41	; 0x29
 80095f4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80095f6:	232b      	movs	r3, #43	; 0x2b
 80095f8:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80095fa:	f107 030c 	add.w	r3, r7, #12
 80095fe:	2202      	movs	r2, #2
 8009600:	4619      	mov	r1, r3
 8009602:	2098      	movs	r0, #152	; 0x98
 8009604:	f000 fc90 	bl	8009f28 <SUBGRF_WriteCommand>
}
 8009608:	bf00      	nop
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	35a4e900 	.word	0x35a4e900
 8009614:	32a9f880 	.word	0x32a9f880
 8009618:	2de54480 	.word	0x2de54480
 800961c:	1b6b0b00 	.word	0x1b6b0b00
 8009620:	1954fc40 	.word	0x1954fc40

08009624 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8009624:	b590      	push	{r4, r7, lr}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	4604      	mov	r4, r0
 800962c:	4608      	mov	r0, r1
 800962e:	4611      	mov	r1, r2
 8009630:	461a      	mov	r2, r3
 8009632:	4623      	mov	r3, r4
 8009634:	71fb      	strb	r3, [r7, #7]
 8009636:	4603      	mov	r3, r0
 8009638:	71bb      	strb	r3, [r7, #6]
 800963a:	460b      	mov	r3, r1
 800963c:	717b      	strb	r3, [r7, #5]
 800963e:	4613      	mov	r3, r2
 8009640:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8009642:	79fb      	ldrb	r3, [r7, #7]
 8009644:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8009646:	79bb      	ldrb	r3, [r7, #6]
 8009648:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800964a:	797b      	ldrb	r3, [r7, #5]
 800964c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800964e:	793b      	ldrb	r3, [r7, #4]
 8009650:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8009652:	f107 030c 	add.w	r3, r7, #12
 8009656:	2204      	movs	r2, #4
 8009658:	4619      	mov	r1, r3
 800965a:	2095      	movs	r0, #149	; 0x95
 800965c:	f000 fc64 	bl	8009f28 <SUBGRF_WriteCommand>
}
 8009660:	bf00      	nop
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	bd90      	pop	{r4, r7, pc}

08009668 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009668:	b590      	push	{r4, r7, lr}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	4604      	mov	r4, r0
 8009670:	4608      	mov	r0, r1
 8009672:	4611      	mov	r1, r2
 8009674:	461a      	mov	r2, r3
 8009676:	4623      	mov	r3, r4
 8009678:	80fb      	strh	r3, [r7, #6]
 800967a:	4603      	mov	r3, r0
 800967c:	80bb      	strh	r3, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	807b      	strh	r3, [r7, #2]
 8009682:	4613      	mov	r3, r2
 8009684:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009686:	88fb      	ldrh	r3, [r7, #6]
 8009688:	0a1b      	lsrs	r3, r3, #8
 800968a:	b29b      	uxth	r3, r3
 800968c:	b2db      	uxtb	r3, r3
 800968e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009690:	88fb      	ldrh	r3, [r7, #6]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009696:	88bb      	ldrh	r3, [r7, #4]
 8009698:	0a1b      	lsrs	r3, r3, #8
 800969a:	b29b      	uxth	r3, r3
 800969c:	b2db      	uxtb	r3, r3
 800969e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80096a0:	88bb      	ldrh	r3, [r7, #4]
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80096a6:	887b      	ldrh	r3, [r7, #2]
 80096a8:	0a1b      	lsrs	r3, r3, #8
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80096b0:	887b      	ldrh	r3, [r7, #2]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80096b6:	883b      	ldrh	r3, [r7, #0]
 80096b8:	0a1b      	lsrs	r3, r3, #8
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80096c0:	883b      	ldrh	r3, [r7, #0]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80096c6:	f107 0308 	add.w	r3, r7, #8
 80096ca:	2208      	movs	r2, #8
 80096cc:	4619      	mov	r1, r3
 80096ce:	2008      	movs	r0, #8
 80096d0:	f000 fc2a 	bl	8009f28 <SUBGRF_WriteCommand>
}
 80096d4:	bf00      	nop
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd90      	pop	{r4, r7, pc}

080096dc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	6039      	str	r1, [r7, #0]
 80096e6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80096e8:	79fb      	ldrb	r3, [r7, #7]
 80096ea:	f003 0307 	and.w	r3, r3, #7
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	0c1b      	lsrs	r3, r3, #16
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	0a1b      	lsrs	r3, r3, #8
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	b2db      	uxtb	r3, r3
 8009706:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009708:	f107 030c 	add.w	r3, r7, #12
 800970c:	2204      	movs	r2, #4
 800970e:	4619      	mov	r1, r3
 8009710:	2097      	movs	r0, #151	; 0x97
 8009712:	f000 fc09 	bl	8009f28 <SUBGRF_WriteCommand>
}
 8009716:	bf00      	nop
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8009720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800972e:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <SUBGRF_SetRfFrequency+0x84>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	f083 0301 	eor.w	r3, r3, #1
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7ff ff27 	bl	8009590 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009742:	4b18      	ldr	r3, [pc, #96]	; (80097a4 <SUBGRF_SetRfFrequency+0x84>)
 8009744:	2201      	movs	r2, #1
 8009746:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	461c      	mov	r4, r3
 800974e:	4615      	mov	r5, r2
 8009750:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009754:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009758:	4a13      	ldr	r2, [pc, #76]	; (80097a8 <SUBGRF_SetRfFrequency+0x88>)
 800975a:	f04f 0300 	mov.w	r3, #0
 800975e:	4640      	mov	r0, r8
 8009760:	4649      	mov	r1, r9
 8009762:	f7f6 fd5d 	bl	8000220 <__aeabi_uldivmod>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	4613      	mov	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	0e1b      	lsrs	r3, r3, #24
 8009772:	b2db      	uxtb	r3, r3
 8009774:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	0c1b      	lsrs	r3, r3, #16
 800977a:	b2db      	uxtb	r3, r3
 800977c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	0a1b      	lsrs	r3, r3, #8
 8009782:	b2db      	uxtb	r3, r3
 8009784:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800978c:	f107 0308 	add.w	r3, r7, #8
 8009790:	2204      	movs	r2, #4
 8009792:	4619      	mov	r1, r3
 8009794:	2086      	movs	r0, #134	; 0x86
 8009796:	f000 fbc7 	bl	8009f28 <SUBGRF_WriteCommand>
}
 800979a:	bf00      	nop
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80097a4:	200006a0 	.word	0x200006a0
 80097a8:	01e84800 	.word	0x01e84800

080097ac <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80097b6:	79fa      	ldrb	r2, [r7, #7]
 80097b8:	4b09      	ldr	r3, [pc, #36]	; (80097e0 <SUBGRF_SetPacketType+0x34>)
 80097ba:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d104      	bne.n	80097cc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80097c2:	2100      	movs	r1, #0
 80097c4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80097c8:	f000 fafe 	bl	8009dc8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80097cc:	1dfb      	adds	r3, r7, #7
 80097ce:	2201      	movs	r2, #1
 80097d0:	4619      	mov	r1, r3
 80097d2:	208a      	movs	r0, #138	; 0x8a
 80097d4:	f000 fba8 	bl	8009f28 <SUBGRF_WriteCommand>
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	20000699 	.word	0x20000699

080097e4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
    return PacketType;
 80097e8:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <SUBGRF_GetPacketType+0x10>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bc80      	pop	{r7}
 80097f2:	4770      	bx	lr
 80097f4:	20000699 	.word	0x20000699

080097f8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	71fb      	strb	r3, [r7, #7]
 8009802:	460b      	mov	r3, r1
 8009804:	71bb      	strb	r3, [r7, #6]
 8009806:	4613      	mov	r3, r2
 8009808:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d149      	bne.n	80098a4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009810:	2000      	movs	r0, #0
 8009812:	f000 ff42 	bl	800a69a <RBI_GetRFOMaxPowerConfig>
 8009816:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009818:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	429a      	cmp	r2, r3
 8009820:	da01      	bge.n	8009826 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2b0e      	cmp	r3, #14
 800982a:	d10e      	bne.n	800984a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800982c:	2301      	movs	r3, #1
 800982e:	2201      	movs	r2, #1
 8009830:	2100      	movs	r1, #0
 8009832:	2004      	movs	r0, #4
 8009834:	f7ff fef6 	bl	8009624 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009838:	79ba      	ldrb	r2, [r7, #6]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	b2db      	uxtb	r3, r3
 8009842:	330e      	adds	r3, #14
 8009844:	b2db      	uxtb	r3, r3
 8009846:	71bb      	strb	r3, [r7, #6]
 8009848:	e01f      	b.n	800988a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2b0a      	cmp	r3, #10
 800984e:	d10e      	bne.n	800986e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009850:	2301      	movs	r3, #1
 8009852:	2201      	movs	r2, #1
 8009854:	2100      	movs	r1, #0
 8009856:	2001      	movs	r0, #1
 8009858:	f7ff fee4 	bl	8009624 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800985c:	79ba      	ldrb	r2, [r7, #6]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	b2db      	uxtb	r3, r3
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	b2db      	uxtb	r3, r3
 8009866:	330d      	adds	r3, #13
 8009868:	b2db      	uxtb	r3, r3
 800986a:	71bb      	strb	r3, [r7, #6]
 800986c:	e00d      	b.n	800988a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800986e:	2301      	movs	r3, #1
 8009870:	2201      	movs	r2, #1
 8009872:	2100      	movs	r1, #0
 8009874:	2007      	movs	r0, #7
 8009876:	f7ff fed5 	bl	8009624 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800987a:	79ba      	ldrb	r2, [r7, #6]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	b2db      	uxtb	r3, r3
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	b2db      	uxtb	r3, r3
 8009884:	330e      	adds	r3, #14
 8009886:	b2db      	uxtb	r3, r3
 8009888:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800988a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800988e:	f113 0f11 	cmn.w	r3, #17
 8009892:	da01      	bge.n	8009898 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009894:	23ef      	movs	r3, #239	; 0xef
 8009896:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009898:	2118      	movs	r1, #24
 800989a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800989e:	f000 fa93 	bl	8009dc8 <SUBGRF_WriteRegister>
 80098a2:	e067      	b.n	8009974 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80098a4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80098a8:	f000 faa2 	bl	8009df0 <SUBGRF_ReadRegister>
 80098ac:	4603      	mov	r3, r0
 80098ae:	f043 031e 	orr.w	r3, r3, #30
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	4619      	mov	r1, r3
 80098b6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80098ba:	f000 fa85 	bl	8009dc8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80098be:	2001      	movs	r0, #1
 80098c0:	f000 feeb 	bl	800a69a <RBI_GetRFOMaxPowerConfig>
 80098c4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80098c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	da01      	bge.n	80098d4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b14      	cmp	r3, #20
 80098d8:	d10e      	bne.n	80098f8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80098da:	2301      	movs	r3, #1
 80098dc:	2200      	movs	r2, #0
 80098de:	2105      	movs	r1, #5
 80098e0:	2003      	movs	r0, #3
 80098e2:	f7ff fe9f 	bl	8009624 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80098e6:	79ba      	ldrb	r2, [r7, #6]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	3316      	adds	r3, #22
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	71bb      	strb	r3, [r7, #6]
 80098f6:	e031      	b.n	800995c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2b11      	cmp	r3, #17
 80098fc:	d10e      	bne.n	800991c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80098fe:	2301      	movs	r3, #1
 8009900:	2200      	movs	r2, #0
 8009902:	2103      	movs	r1, #3
 8009904:	2002      	movs	r0, #2
 8009906:	f7ff fe8d 	bl	8009624 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800990a:	79ba      	ldrb	r2, [r7, #6]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	b2db      	uxtb	r3, r3
 8009914:	3316      	adds	r3, #22
 8009916:	b2db      	uxtb	r3, r3
 8009918:	71bb      	strb	r3, [r7, #6]
 800991a:	e01f      	b.n	800995c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2b0e      	cmp	r3, #14
 8009920:	d10e      	bne.n	8009940 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009922:	2301      	movs	r3, #1
 8009924:	2200      	movs	r2, #0
 8009926:	2102      	movs	r1, #2
 8009928:	2002      	movs	r0, #2
 800992a:	f7ff fe7b 	bl	8009624 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800992e:	79ba      	ldrb	r2, [r7, #6]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	b2db      	uxtb	r3, r3
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	b2db      	uxtb	r3, r3
 8009938:	330e      	adds	r3, #14
 800993a:	b2db      	uxtb	r3, r3
 800993c:	71bb      	strb	r3, [r7, #6]
 800993e:	e00d      	b.n	800995c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009940:	2301      	movs	r3, #1
 8009942:	2200      	movs	r2, #0
 8009944:	2107      	movs	r1, #7
 8009946:	2004      	movs	r0, #4
 8009948:	f7ff fe6c 	bl	8009624 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800994c:	79ba      	ldrb	r2, [r7, #6]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	b2db      	uxtb	r3, r3
 8009956:	3316      	adds	r3, #22
 8009958:	b2db      	uxtb	r3, r3
 800995a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800995c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009960:	f113 0f09 	cmn.w	r3, #9
 8009964:	da01      	bge.n	800996a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009966:	23f7      	movs	r3, #247	; 0xf7
 8009968:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800996a:	2138      	movs	r1, #56	; 0x38
 800996c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009970:	f000 fa2a 	bl	8009dc8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009974:	79bb      	ldrb	r3, [r7, #6]
 8009976:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009978:	797b      	ldrb	r3, [r7, #5]
 800997a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800997c:	f107 0308 	add.w	r3, r7, #8
 8009980:	2202      	movs	r2, #2
 8009982:	4619      	mov	r1, r3
 8009984:	208e      	movs	r0, #142	; 0x8e
 8009986:	f000 facf 	bl	8009f28 <SUBGRF_WriteCommand>
}
 800998a:	bf00      	nop
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
	...

08009994 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009994:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009998:	b086      	sub	sp, #24
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80099a2:	4a61      	ldr	r2, [pc, #388]	; (8009b28 <SUBGRF_SetModulationParams+0x194>)
 80099a4:	f107 0308 	add.w	r3, r7, #8
 80099a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099ac:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	781a      	ldrb	r2, [r3, #0]
 80099b4:	4b5d      	ldr	r3, [pc, #372]	; (8009b2c <SUBGRF_SetModulationParams+0x198>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d004      	beq.n	80099c6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff fef3 	bl	80097ac <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	f200 80a5 	bhi.w	8009b1a <SUBGRF_SetModulationParams+0x186>
 80099d0:	a201      	add	r2, pc, #4	; (adr r2, 80099d8 <SUBGRF_SetModulationParams+0x44>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	080099e9 	.word	0x080099e9
 80099dc:	08009aa9 	.word	0x08009aa9
 80099e0:	08009a6b 	.word	0x08009a6b
 80099e4:	08009ad7 	.word	0x08009ad7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80099e8:	2308      	movs	r3, #8
 80099ea:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	4a4f      	ldr	r2, [pc, #316]	; (8009b30 <SUBGRF_SetModulationParams+0x19c>)
 80099f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	0c1b      	lsrs	r3, r3, #16
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	0a1b      	lsrs	r3, r3, #8
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	7b1b      	ldrb	r3, [r3, #12]
 8009a12:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	7b5b      	ldrb	r3, [r3, #13]
 8009a18:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	461c      	mov	r4, r3
 8009a22:	4615      	mov	r5, r2
 8009a24:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009a28:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009a2c:	4a41      	ldr	r2, [pc, #260]	; (8009b34 <SUBGRF_SetModulationParams+0x1a0>)
 8009a2e:	f04f 0300 	mov.w	r3, #0
 8009a32:	4640      	mov	r0, r8
 8009a34:	4649      	mov	r1, r9
 8009a36:	f7f6 fbf3 	bl	8000220 <__aeabi_uldivmod>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4613      	mov	r3, r2
 8009a40:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	0c1b      	lsrs	r3, r3, #16
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	0a1b      	lsrs	r3, r3, #8
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009a58:	7cfb      	ldrb	r3, [r7, #19]
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	f107 0308 	add.w	r3, r7, #8
 8009a60:	4619      	mov	r1, r3
 8009a62:	208b      	movs	r0, #139	; 0x8b
 8009a64:	f000 fa60 	bl	8009f28 <SUBGRF_WriteCommand>
        break;
 8009a68:	e058      	b.n	8009b1c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009a6a:	2304      	movs	r3, #4
 8009a6c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	4a2f      	ldr	r2, [pc, #188]	; (8009b30 <SUBGRF_SetModulationParams+0x19c>)
 8009a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a78:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	0c1b      	lsrs	r3, r3, #16
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	0a1b      	lsrs	r3, r3, #8
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	7d1b      	ldrb	r3, [r3, #20]
 8009a94:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009a96:	7cfb      	ldrb	r3, [r7, #19]
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	f107 0308 	add.w	r3, r7, #8
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	208b      	movs	r0, #139	; 0x8b
 8009aa2:	f000 fa41 	bl	8009f28 <SUBGRF_WriteCommand>
        break;
 8009aa6:	e039      	b.n	8009b1c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009aa8:	2304      	movs	r3, #4
 8009aaa:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	7e1b      	ldrb	r3, [r3, #24]
 8009ab0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7e5b      	ldrb	r3, [r3, #25]
 8009ab6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7e9b      	ldrb	r3, [r3, #26]
 8009abc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	7edb      	ldrb	r3, [r3, #27]
 8009ac2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009ac4:	7cfb      	ldrb	r3, [r7, #19]
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	f107 0308 	add.w	r3, r7, #8
 8009acc:	4619      	mov	r1, r3
 8009ace:	208b      	movs	r0, #139	; 0x8b
 8009ad0:	f000 fa2a 	bl	8009f28 <SUBGRF_WriteCommand>

        break;
 8009ad4:	e022      	b.n	8009b1c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009ad6:	2305      	movs	r3, #5
 8009ad8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	4a14      	ldr	r2, [pc, #80]	; (8009b30 <SUBGRF_SetModulationParams+0x19c>)
 8009ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	0c1b      	lsrs	r3, r3, #16
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	0a1b      	lsrs	r3, r3, #8
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	7b1b      	ldrb	r3, [r3, #12]
 8009b00:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	7b5b      	ldrb	r3, [r3, #13]
 8009b06:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009b08:	7cfb      	ldrb	r3, [r7, #19]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	f107 0308 	add.w	r3, r7, #8
 8009b10:	4619      	mov	r1, r3
 8009b12:	208b      	movs	r0, #139	; 0x8b
 8009b14:	f000 fa08 	bl	8009f28 <SUBGRF_WriteCommand>
        break;
 8009b18:	e000      	b.n	8009b1c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009b1a:	bf00      	nop
    }
}
 8009b1c:	bf00      	nop
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009b26:	bf00      	nop
 8009b28:	0800bcc0 	.word	0x0800bcc0
 8009b2c:	20000699 	.word	0x20000699
 8009b30:	3d090000 	.word	0x3d090000
 8009b34:	01e84800 	.word	0x01e84800

08009b38 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009b40:	2300      	movs	r3, #0
 8009b42:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009b44:	4a48      	ldr	r2, [pc, #288]	; (8009c68 <SUBGRF_SetPacketParams+0x130>)
 8009b46:	f107 030c 	add.w	r3, r7, #12
 8009b4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b4c:	c303      	stmia	r3!, {r0, r1}
 8009b4e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	781a      	ldrb	r2, [r3, #0]
 8009b54:	4b45      	ldr	r3, [pc, #276]	; (8009c6c <SUBGRF_SetPacketParams+0x134>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d004      	beq.n	8009b66 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7ff fe23 	bl	80097ac <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d878      	bhi.n	8009c60 <SUBGRF_SetPacketParams+0x128>
 8009b6e:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <SUBGRF_SetPacketParams+0x3c>)
 8009b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b74:	08009b85 	.word	0x08009b85
 8009b78:	08009c15 	.word	0x08009c15
 8009b7c:	08009c09 	.word	0x08009c09
 8009b80:	08009b85 	.word	0x08009b85
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	7a5b      	ldrb	r3, [r3, #9]
 8009b88:	2bf1      	cmp	r3, #241	; 0xf1
 8009b8a:	d10a      	bne.n	8009ba2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009b8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009b90:	f7ff faaa 	bl	80090e8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009b94:	f248 0005 	movw	r0, #32773	; 0x8005
 8009b98:	f7ff fac6 	bl	8009128 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	75bb      	strb	r3, [r7, #22]
 8009ba0:	e011      	b.n	8009bc6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	7a5b      	ldrb	r3, [r3, #9]
 8009ba6:	2bf2      	cmp	r3, #242	; 0xf2
 8009ba8:	d10a      	bne.n	8009bc0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009baa:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009bae:	f7ff fa9b 	bl	80090e8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009bb2:	f241 0021 	movw	r0, #4129	; 0x1021
 8009bb6:	f7ff fab7 	bl	8009128 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009bba:	2306      	movs	r3, #6
 8009bbc:	75bb      	strb	r3, [r7, #22]
 8009bbe:	e002      	b.n	8009bc6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	7a5b      	ldrb	r3, [r3, #9]
 8009bc4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009bc6:	2309      	movs	r3, #9
 8009bc8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	885b      	ldrh	r3, [r3, #2]
 8009bce:	0a1b      	lsrs	r3, r3, #8
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	791b      	ldrb	r3, [r3, #4]
 8009be2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	795b      	ldrb	r3, [r3, #5]
 8009be8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	799b      	ldrb	r3, [r3, #6]
 8009bee:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	79db      	ldrb	r3, [r3, #7]
 8009bf4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	7a1b      	ldrb	r3, [r3, #8]
 8009bfa:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009bfc:	7dbb      	ldrb	r3, [r7, #22]
 8009bfe:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7a9b      	ldrb	r3, [r3, #10]
 8009c04:	753b      	strb	r3, [r7, #20]
        break;
 8009c06:	e022      	b.n	8009c4e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	7b1b      	ldrb	r3, [r3, #12]
 8009c10:	733b      	strb	r3, [r7, #12]
        break;
 8009c12:	e01c      	b.n	8009c4e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009c14:	2306      	movs	r3, #6
 8009c16:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	89db      	ldrh	r3, [r3, #14]
 8009c1c:	0a1b      	lsrs	r3, r3, #8
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	89db      	ldrh	r3, [r3, #14]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	7c1a      	ldrb	r2, [r3, #16]
 8009c30:	4b0f      	ldr	r3, [pc, #60]	; (8009c70 <SUBGRF_SetPacketParams+0x138>)
 8009c32:	4611      	mov	r1, r2
 8009c34:	7019      	strb	r1, [r3, #0]
 8009c36:	4613      	mov	r3, r2
 8009c38:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	7c5b      	ldrb	r3, [r3, #17]
 8009c3e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	7c9b      	ldrb	r3, [r3, #18]
 8009c44:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	7cdb      	ldrb	r3, [r3, #19]
 8009c4a:	747b      	strb	r3, [r7, #17]
        break;
 8009c4c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009c4e:	7dfb      	ldrb	r3, [r7, #23]
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	f107 030c 	add.w	r3, r7, #12
 8009c56:	4619      	mov	r1, r3
 8009c58:	208c      	movs	r0, #140	; 0x8c
 8009c5a:	f000 f965 	bl	8009f28 <SUBGRF_WriteCommand>
 8009c5e:	e000      	b.n	8009c62 <SUBGRF_SetPacketParams+0x12a>
        return;
 8009c60:	bf00      	nop
}
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	0800bcc8 	.word	0x0800bcc8
 8009c6c:	20000699 	.word	0x20000699
 8009c70:	2000069a 	.word	0x2000069a

08009c74 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	460a      	mov	r2, r1
 8009c7e:	71fb      	strb	r3, [r7, #7]
 8009c80:	4613      	mov	r3, r2
 8009c82:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009c84:	79fb      	ldrb	r3, [r7, #7]
 8009c86:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009c88:	79bb      	ldrb	r3, [r7, #6]
 8009c8a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009c8c:	f107 030c 	add.w	r3, r7, #12
 8009c90:	2202      	movs	r2, #2
 8009c92:	4619      	mov	r1, r3
 8009c94:	208f      	movs	r0, #143	; 0x8f
 8009c96:	f000 f947 	bl	8009f28 <SUBGRF_WriteCommand>
}
 8009c9a:	bf00      	nop
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b082      	sub	sp, #8
 8009ca6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009cac:	1d3b      	adds	r3, r7, #4
 8009cae:	2201      	movs	r2, #1
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	2015      	movs	r0, #21
 8009cb4:	f000 f95a 	bl	8009f6c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009cb8:	793b      	ldrb	r3, [r7, #4]
 8009cba:	425b      	negs	r3, r3
 8009cbc:	105b      	asrs	r3, r3, #1
 8009cbe:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009cd6:	f107 030c 	add.w	r3, r7, #12
 8009cda:	2202      	movs	r2, #2
 8009cdc:	4619      	mov	r1, r3
 8009cde:	2013      	movs	r0, #19
 8009ce0:	f000 f944 	bl	8009f6c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009ce4:	f7ff fd7e 	bl	80097e4 <SUBGRF_GetPacketType>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d10d      	bne.n	8009d0a <SUBGRF_GetRxBufferStatus+0x3e>
 8009cee:	4b0c      	ldr	r3, [pc, #48]	; (8009d20 <SUBGRF_GetRxBufferStatus+0x54>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d108      	bne.n	8009d0a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009cf8:	f240 7002 	movw	r0, #1794	; 0x702
 8009cfc:	f000 f878 	bl	8009df0 <SUBGRF_ReadRegister>
 8009d00:	4603      	mov	r3, r0
 8009d02:	461a      	mov	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	701a      	strb	r2, [r3, #0]
 8009d08:	e002      	b.n	8009d10 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009d0a:	7b3a      	ldrb	r2, [r7, #12]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009d10:	7b7a      	ldrb	r2, [r7, #13]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	701a      	strb	r2, [r3, #0]
}
 8009d16:	bf00      	nop
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	2000069a 	.word	0x2000069a

08009d24 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8009d2c:	f107 030c 	add.w	r3, r7, #12
 8009d30:	2203      	movs	r2, #3
 8009d32:	4619      	mov	r1, r3
 8009d34:	2014      	movs	r0, #20
 8009d36:	f000 f919 	bl	8009f6c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8009d3a:	f7ff fd53 	bl	80097e4 <SUBGRF_GetPacketType>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	461a      	mov	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <SUBGRF_GetPacketStatus+0x30>
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d013      	beq.n	8009d7a <SUBGRF_GetPacketStatus+0x56>
 8009d52:	e02a      	b.n	8009daa <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8009d54:	7b3a      	ldrb	r2, [r7, #12]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8009d5a:	7b7b      	ldrb	r3, [r7, #13]
 8009d5c:	425b      	negs	r3, r3
 8009d5e:	105b      	asrs	r3, r3, #1
 8009d60:	b25a      	sxtb	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	425b      	negs	r3, r3
 8009d6a:	105b      	asrs	r3, r3, #1
 8009d6c:	b25a      	sxtb	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	609a      	str	r2, [r3, #8]
            break;
 8009d78:	e020      	b.n	8009dbc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009d7a:	7b3b      	ldrb	r3, [r7, #12]
 8009d7c:	425b      	negs	r3, r3
 8009d7e:	105b      	asrs	r3, r3, #1
 8009d80:	b25a      	sxtb	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8009d86:	7b7b      	ldrb	r3, [r7, #13]
 8009d88:	b25b      	sxtb	r3, r3
 8009d8a:	3302      	adds	r3, #2
 8009d8c:	109b      	asrs	r3, r3, #2
 8009d8e:	b25a      	sxtb	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	425b      	negs	r3, r3
 8009d98:	105b      	asrs	r3, r3, #1
 8009d9a:	b25a      	sxtb	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009da0:	4b08      	ldr	r3, [pc, #32]	; (8009dc4 <SUBGRF_GetPacketStatus+0xa0>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	611a      	str	r2, [r3, #16]
            break;
 8009da8:	e008      	b.n	8009dbc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009daa:	2214      	movs	r2, #20
 8009dac:	2100      	movs	r1, #0
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fca7 	bl	800a702 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	220f      	movs	r2, #15
 8009db8:	701a      	strb	r2, [r3, #0]
            break;
 8009dba:	bf00      	nop
    }
}
 8009dbc:	bf00      	nop
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	2000069c 	.word	0x2000069c

08009dc8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	460a      	mov	r2, r1
 8009dd2:	80fb      	strh	r3, [r7, #6]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8009dd8:	1d7a      	adds	r2, r7, #5
 8009dda:	88f9      	ldrh	r1, [r7, #6]
 8009ddc:	2301      	movs	r3, #1
 8009dde:	4803      	ldr	r0, [pc, #12]	; (8009dec <SUBGRF_WriteRegister+0x24>)
 8009de0:	f7fa fc44 	bl	800466c <HAL_SUBGHZ_WriteRegisters>
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	2000026c 	.word	0x2000026c

08009df0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	4603      	mov	r3, r0
 8009df8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009dfa:	f107 020f 	add.w	r2, r7, #15
 8009dfe:	88f9      	ldrh	r1, [r7, #6]
 8009e00:	2301      	movs	r3, #1
 8009e02:	4804      	ldr	r0, [pc, #16]	; (8009e14 <SUBGRF_ReadRegister+0x24>)
 8009e04:	f7fa fc91 	bl	800472a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	2000026c 	.word	0x2000026c

08009e18 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	6039      	str	r1, [r7, #0]
 8009e22:	80fb      	strh	r3, [r7, #6]
 8009e24:	4613      	mov	r3, r2
 8009e26:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e28:	f3ef 8310 	mrs	r3, PRIMASK
 8009e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009e30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e32:	b672      	cpsid	i
}
 8009e34:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8009e36:	88bb      	ldrh	r3, [r7, #4]
 8009e38:	88f9      	ldrh	r1, [r7, #6]
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	4806      	ldr	r0, [pc, #24]	; (8009e58 <SUBGRF_WriteRegisters+0x40>)
 8009e3e:	f7fa fc15 	bl	800466c <HAL_SUBGHZ_WriteRegisters>
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	f383 8810 	msr	PRIMASK, r3
}
 8009e4c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009e4e:	bf00      	nop
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	2000026c 	.word	0x2000026c

08009e5c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	6039      	str	r1, [r7, #0]
 8009e66:	80fb      	strh	r3, [r7, #6]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e70:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009e74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e76:	b672      	cpsid	i
}
 8009e78:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009e7a:	88bb      	ldrh	r3, [r7, #4]
 8009e7c:	88f9      	ldrh	r1, [r7, #6]
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	4806      	ldr	r0, [pc, #24]	; (8009e9c <SUBGRF_ReadRegisters+0x40>)
 8009e82:	f7fa fc52 	bl	800472a <HAL_SUBGHZ_ReadRegisters>
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f383 8810 	msr	PRIMASK, r3
}
 8009e90:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009e92:	bf00      	nop
 8009e94:	3718      	adds	r7, #24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	2000026c 	.word	0x2000026c

08009ea0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	6039      	str	r1, [r7, #0]
 8009eaa:	71fb      	strb	r3, [r7, #7]
 8009eac:	4613      	mov	r3, r2
 8009eae:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8009eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009eb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eba:	b672      	cpsid	i
}
 8009ebc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8009ebe:	79bb      	ldrb	r3, [r7, #6]
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	79f9      	ldrb	r1, [r7, #7]
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	4806      	ldr	r0, [pc, #24]	; (8009ee0 <SUBGRF_WriteBuffer+0x40>)
 8009ec8:	f7fa fd43 	bl	8004952 <HAL_SUBGHZ_WriteBuffer>
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f383 8810 	msr	PRIMASK, r3
}
 8009ed6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009ed8:	bf00      	nop
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	2000026c 	.word	0x2000026c

08009ee4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	4603      	mov	r3, r0
 8009eec:	6039      	str	r1, [r7, #0]
 8009eee:	71fb      	strb	r3, [r7, #7]
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009efa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009efc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009efe:	b672      	cpsid	i
}
 8009f00:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8009f02:	79bb      	ldrb	r3, [r7, #6]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	79f9      	ldrb	r1, [r7, #7]
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	4806      	ldr	r0, [pc, #24]	; (8009f24 <SUBGRF_ReadBuffer+0x40>)
 8009f0c:	f7fa fd74 	bl	80049f8 <HAL_SUBGHZ_ReadBuffer>
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f383 8810 	msr	PRIMASK, r3
}
 8009f1a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009f1c:	bf00      	nop
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	2000026c 	.word	0x2000026c

08009f28 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	6039      	str	r1, [r7, #0]
 8009f32:	71fb      	strb	r3, [r7, #7]
 8009f34:	4613      	mov	r3, r2
 8009f36:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f38:	f3ef 8310 	mrs	r3, PRIMASK
 8009f3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009f40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f42:	b672      	cpsid	i
}
 8009f44:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8009f46:	88bb      	ldrh	r3, [r7, #4]
 8009f48:	79f9      	ldrb	r1, [r7, #7]
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	4806      	ldr	r0, [pc, #24]	; (8009f68 <SUBGRF_WriteCommand+0x40>)
 8009f4e:	f7fa fc4d 	bl	80047ec <HAL_SUBGHZ_ExecSetCmd>
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f383 8810 	msr	PRIMASK, r3
}
 8009f5c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009f5e:	bf00      	nop
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	2000026c 	.word	0x2000026c

08009f6c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	4603      	mov	r3, r0
 8009f74:	6039      	str	r1, [r7, #0]
 8009f76:	71fb      	strb	r3, [r7, #7]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8009f80:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009f84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f86:	b672      	cpsid	i
}
 8009f88:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8009f8a:	88bb      	ldrh	r3, [r7, #4]
 8009f8c:	79f9      	ldrb	r1, [r7, #7]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	4806      	ldr	r0, [pc, #24]	; (8009fac <SUBGRF_ReadCommand+0x40>)
 8009f92:	f7fa fc8a 	bl	80048aa <HAL_SUBGHZ_ExecGetCmd>
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f383 8810 	msr	PRIMASK, r3
}
 8009fa0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009fa2:	bf00      	nop
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	2000026c 	.word	0x2000026c

08009fb0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	460a      	mov	r2, r1
 8009fba:	71fb      	strb	r3, [r7, #7]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8009fc4:	79bb      	ldrb	r3, [r7, #6]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d10d      	bne.n	8009fe6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8009fca:	79fb      	ldrb	r3, [r7, #7]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d104      	bne.n	8009fda <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8009fd4:	2004      	movs	r0, #4
 8009fd6:	f000 f8ef 	bl	800a1b8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8009fda:	79fb      	ldrb	r3, [r7, #7]
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d107      	bne.n	8009ff0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	73fb      	strb	r3, [r7, #15]
 8009fe4:	e004      	b.n	8009ff0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8009fe6:	79bb      	ldrb	r3, [r7, #6]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8009fec:	2301      	movs	r3, #1
 8009fee:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 fad2 	bl	800a59c <RBI_ConfigRFSwitch>
}
 8009ff8:	bf00      	nop
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	4603      	mov	r3, r0
 800a008:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a00a:	2301      	movs	r3, #1
 800a00c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a00e:	f000 fb23 	bl	800a658 <RBI_GetTxConfig>
 800a012:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b02      	cmp	r3, #2
 800a018:	d016      	beq.n	800a048 <SUBGRF_SetRfTxPower+0x48>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	dc16      	bgt.n	800a04e <SUBGRF_SetRfTxPower+0x4e>
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d003      	beq.n	800a02e <SUBGRF_SetRfTxPower+0x2e>
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d00a      	beq.n	800a042 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a02c:	e00f      	b.n	800a04e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a02e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a032:	2b0f      	cmp	r3, #15
 800a034:	dd02      	ble.n	800a03c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a036:	2302      	movs	r3, #2
 800a038:	73fb      	strb	r3, [r7, #15]
            break;
 800a03a:	e009      	b.n	800a050 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a03c:	2301      	movs	r3, #1
 800a03e:	73fb      	strb	r3, [r7, #15]
            break;
 800a040:	e006      	b.n	800a050 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a042:	2301      	movs	r3, #1
 800a044:	73fb      	strb	r3, [r7, #15]
            break;
 800a046:	e003      	b.n	800a050 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a048:	2302      	movs	r3, #2
 800a04a:	73fb      	strb	r3, [r7, #15]
            break;
 800a04c:	e000      	b.n	800a050 <SUBGRF_SetRfTxPower+0x50>
            break;
 800a04e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a050:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	2202      	movs	r2, #2
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff fbcd 	bl	80097f8 <SUBGRF_SetTxParams>

    return paSelect;
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a068:	b480      	push	{r7}
 800a06a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a06c:	2301      	movs	r3, #1
}
 800a06e:	4618      	mov	r0, r3
 800a070:	46bd      	mov	sp, r7
 800a072:	bc80      	pop	{r7}
 800a074:	4770      	bx	lr
	...

0800a078 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a080:	4b03      	ldr	r3, [pc, #12]	; (800a090 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2001      	movs	r0, #1
 800a086:	4798      	blx	r3
}
 800a088:	bf00      	nop
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	200006a4 	.word	0x200006a4

0800a094 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a09c:	4b03      	ldr	r3, [pc, #12]	; (800a0ac <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2002      	movs	r0, #2
 800a0a2:	4798      	blx	r3
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	200006a4 	.word	0x200006a4

0800a0b0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a0b8:	4b03      	ldr	r3, [pc, #12]	; (800a0c8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2040      	movs	r0, #64	; 0x40
 800a0be:	4798      	blx	r3
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	200006a4 	.word	0x200006a4

0800a0cc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a0d8:	78fb      	ldrb	r3, [r7, #3]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d002      	beq.n	800a0e4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d005      	beq.n	800a0ee <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a0e2:	e00a      	b.n	800a0fa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a0e4:	4b07      	ldr	r3, [pc, #28]	; (800a104 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2080      	movs	r0, #128	; 0x80
 800a0ea:	4798      	blx	r3
            break;
 800a0ec:	e005      	b.n	800a0fa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a0ee:	4b05      	ldr	r3, [pc, #20]	; (800a104 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a0f6:	4798      	blx	r3
            break;
 800a0f8:	bf00      	nop
    }
}
 800a0fa:	bf00      	nop
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	200006a4 	.word	0x200006a4

0800a108 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a110:	4b04      	ldr	r3, [pc, #16]	; (800a124 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a118:	4798      	blx	r3
}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	200006a4 	.word	0x200006a4

0800a128 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a130:	4b03      	ldr	r3, [pc, #12]	; (800a140 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2020      	movs	r0, #32
 800a136:	4798      	blx	r3
}
 800a138:	bf00      	nop
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	200006a4 	.word	0x200006a4

0800a144 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a14c:	4b03      	ldr	r3, [pc, #12]	; (800a15c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2004      	movs	r0, #4
 800a152:	4798      	blx	r3
}
 800a154:	bf00      	nop
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	200006a4 	.word	0x200006a4

0800a160 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a168:	4b03      	ldr	r3, [pc, #12]	; (800a178 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2008      	movs	r0, #8
 800a16e:	4798      	blx	r3
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	200006a4 	.word	0x200006a4

0800a17c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a184:	4b03      	ldr	r3, [pc, #12]	; (800a194 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2010      	movs	r0, #16
 800a18a:	4798      	blx	r3
}
 800a18c:	bf00      	nop
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	200006a4 	.word	0x200006a4

0800a198 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a1a0:	4b04      	ldr	r3, [pc, #16]	; (800a1b4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a1a8:	4798      	blx	r3
}
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	200006a4 	.word	0x200006a4

0800a1b8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a1c2:	f000 fa5f 	bl	800a684 <RBI_IsDCDC>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d112      	bne.n	800a1f2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a1cc:	f640 1023 	movw	r0, #2339	; 0x923
 800a1d0:	f7ff fe0e 	bl	8009df0 <SUBGRF_ReadRegister>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	f023 0306 	bic.w	r3, r3, #6
 800a1de:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a1e0:	7bfa      	ldrb	r2, [r7, #15]
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	f640 1023 	movw	r0, #2339	; 0x923
 800a1ee:	f7ff fdeb 	bl	8009dc8 <SUBGRF_WriteRegister>
  }
}
 800a1f2:	bf00      	nop
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
	...

0800a1fc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a20a:	231f      	movs	r3, #31
 800a20c:	e016      	b.n	800a23c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a20e:	2300      	movs	r3, #0
 800a210:	73fb      	strb	r3, [r7, #15]
 800a212:	e00f      	b.n	800a234 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	4a0c      	ldr	r2, [pc, #48]	; (800a248 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d205      	bcs.n	800a22e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a222:	7bfb      	ldrb	r3, [r7, #15]
 800a224:	4a08      	ldr	r2, [pc, #32]	; (800a248 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a226:	00db      	lsls	r3, r3, #3
 800a228:	4413      	add	r3, r2
 800a22a:	791b      	ldrb	r3, [r3, #4]
 800a22c:	e006      	b.n	800a23c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	3301      	adds	r3, #1
 800a232:	73fb      	strb	r3, [r7, #15]
 800a234:	7bfb      	ldrb	r3, [r7, #15]
 800a236:	2b15      	cmp	r3, #21
 800a238:	d9ec      	bls.n	800a214 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a23a:	e7fe      	b.n	800a23a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	bc80      	pop	{r7}
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	0800be58 	.word	0x0800be58

0800a24c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08a      	sub	sp, #40	; 0x28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a256:	4b35      	ldr	r3, [pc, #212]	; (800a32c <SUBGRF_GetCFO+0xe0>)
 800a258:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a25a:	f640 0007 	movw	r0, #2055	; 0x807
 800a25e:	f7ff fdc7 	bl	8009df0 <SUBGRF_ReadRegister>
 800a262:	4603      	mov	r3, r0
 800a264:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a266:	7ffb      	ldrb	r3, [r7, #31]
 800a268:	08db      	lsrs	r3, r3, #3
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f003 0303 	and.w	r3, r3, #3
 800a270:	3328      	adds	r3, #40	; 0x28
 800a272:	443b      	add	r3, r7
 800a274:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a278:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a27a:	7ffb      	ldrb	r3, [r7, #31]
 800a27c:	f003 0307 	and.w	r3, r3, #7
 800a280:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a282:	7fba      	ldrb	r2, [r7, #30]
 800a284:	7f7b      	ldrb	r3, [r7, #29]
 800a286:	3301      	adds	r3, #1
 800a288:	fa02 f303 	lsl.w	r3, r2, r3
 800a28c:	461a      	mov	r2, r3
 800a28e:	4b28      	ldr	r3, [pc, #160]	; (800a330 <SUBGRF_GetCFO+0xe4>)
 800a290:	fbb3 f3f2 	udiv	r3, r3, r2
 800a294:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a296:	69ba      	ldr	r2, [r7, #24]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	fb02 f303 	mul.w	r3, r2, r3
 800a2b0:	2b07      	cmp	r3, #7
 800a2b2:	d802      	bhi.n	800a2ba <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800a2ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	fb02 f303 	mul.w	r3, r2, r3
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	d802      	bhi.n	800a2ce <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a2c8:	2304      	movs	r3, #4
 800a2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a2ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	fb02 f303 	mul.w	r3, r2, r3
 800a2d8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a2da:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800a2de:	f7ff fd87 	bl	8009df0 <SUBGRF_ReadRegister>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	021b      	lsls	r3, r3, #8
 800a2e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a2ea:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a2ec:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800a2f0:	f7ff fd7e 	bl	8009df0 <SUBGRF_ReadRegister>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a304:	2b00      	cmp	r3, #0
 800a306:	d005      	beq.n	800a314 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a30e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a312:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	095b      	lsrs	r3, r3, #5
 800a318:	6a3a      	ldr	r2, [r7, #32]
 800a31a:	fb02 f303 	mul.w	r3, r2, r3
 800a31e:	11da      	asrs	r2, r3, #7
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	601a      	str	r2, [r3, #0]
}
 800a324:	bf00      	nop
 800a326:	3728      	adds	r7, #40	; 0x28
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	0c0a0804 	.word	0x0c0a0804
 800a330:	01e84800 	.word	0x01e84800

0800a334 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a334:	b480      	push	{r7}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a34a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a34c:	697b      	ldr	r3, [r7, #20]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	371c      	adds	r7, #28
 800a352:	46bd      	mov	sp, r7
 800a354:	bc80      	pop	{r7}
 800a356:	4770      	bx	lr

0800a358 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a358:	b480      	push	{r7}
 800a35a:	b087      	sub	sp, #28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	4603      	mov	r3, r0
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a36a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a36e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a370:	697b      	ldr	r3, [r7, #20]
}
 800a372:	4618      	mov	r0, r3
 800a374:	371c      	adds	r7, #28
 800a376:	46bd      	mov	sp, r7
 800a378:	bc80      	pop	{r7}
 800a37a:	4770      	bx	lr

0800a37c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	bc80      	pop	{r7}
 800a394:	4770      	bx	lr

0800a396 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a396:	b480      	push	{r7}
 800a398:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a39a:	bf00      	nop
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bc80      	pop	{r7}
 800a3a0:	4770      	bx	lr

0800a3a2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a3a6:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bc80      	pop	{r7}
 800a3ae:	4770      	bx	lr

0800a3b0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a3b4:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bc80      	pop	{r7}
 800a3bc:	4770      	bx	lr

0800a3be <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bc80      	pop	{r7}
 800a3d0:	4770      	bx	lr

0800a3d2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b087      	sub	sp, #28
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	607a      	str	r2, [r7, #4]
 800a3de:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a3e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3e4:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a3e6:	697b      	ldr	r3, [r7, #20]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	371c      	adds	r7, #28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bc80      	pop	{r7}
 800a3f0:	4770      	bx	lr

0800a3f2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a3f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bc80      	pop	{r7}
 800a400:	4770      	bx	lr

0800a402 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a402:	b480      	push	{r7}
 800a404:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a406:	bf00      	nop
 800a408:	46bd      	mov	sp, r7
 800a40a:	bc80      	pop	{r7}
 800a40c:	4770      	bx	lr

0800a40e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a40e:	b480      	push	{r7}
 800a410:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a412:	bf00      	nop
 800a414:	46bd      	mov	sp, r7
 800a416:	bc80      	pop	{r7}
 800a418:	4770      	bx	lr

0800a41a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	4603      	mov	r3, r0
 800a422:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	bc80      	pop	{r7}
 800a42c:	4770      	bx	lr

0800a42e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a432:	f7f7 faae 	bl	8001992 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a436:	f000 f809 	bl	800a44c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a43a:	bf00      	nop
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a43e:	b480      	push	{r7}
 800a440:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800a442:	bf00      	nop
 800a444:	46bd      	mov	sp, r7
 800a446:	bc80      	pop	{r7}
 800a448:	4770      	bx	lr
	...

0800a44c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a450:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <SubghzApp_Init+0x30>)
 800a452:	4a0b      	ldr	r2, [pc, #44]	; (800a480 <SubghzApp_Init+0x34>)
 800a454:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a456:	4b09      	ldr	r3, [pc, #36]	; (800a47c <SubghzApp_Init+0x30>)
 800a458:	4a0a      	ldr	r2, [pc, #40]	; (800a484 <SubghzApp_Init+0x38>)
 800a45a:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a45c:	4b07      	ldr	r3, [pc, #28]	; (800a47c <SubghzApp_Init+0x30>)
 800a45e:	4a0a      	ldr	r2, [pc, #40]	; (800a488 <SubghzApp_Init+0x3c>)
 800a460:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a462:	4b06      	ldr	r3, [pc, #24]	; (800a47c <SubghzApp_Init+0x30>)
 800a464:	4a09      	ldr	r2, [pc, #36]	; (800a48c <SubghzApp_Init+0x40>)
 800a466:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a468:	4b04      	ldr	r3, [pc, #16]	; (800a47c <SubghzApp_Init+0x30>)
 800a46a:	4a09      	ldr	r2, [pc, #36]	; (800a490 <SubghzApp_Init+0x44>)
 800a46c:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a46e:	4b09      	ldr	r3, [pc, #36]	; (800a494 <SubghzApp_Init+0x48>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4802      	ldr	r0, [pc, #8]	; (800a47c <SubghzApp_Init+0x30>)
 800a474:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800a476:	bf00      	nop
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	200006a8 	.word	0x200006a8
 800a480:	0800a499 	.word	0x0800a499
 800a484:	0800a4a5 	.word	0x0800a4a5
 800a488:	0800a4c9 	.word	0x0800a4c9
 800a48c:	0800a4d5 	.word	0x0800a4d5
 800a490:	0800a4e1 	.word	0x0800a4e1
 800a494:	0800bdc8 	.word	0x0800bdc8

0800a498 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a498:	b480      	push	{r7}
 800a49a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800a49c:	bf00      	nop
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bc80      	pop	{r7}
 800a4a2:	4770      	bx	lr

0800a4a4 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	817b      	strh	r3, [r7, #10]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	813b      	strh	r3, [r7, #8]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800a4be:	bf00      	nop
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bc80      	pop	{r7}
 800a4c6:	4770      	bx	lr

0800a4c8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800a4cc:	bf00      	nop
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bc80      	pop	{r7}
 800a4d2:	4770      	bx	lr

0800a4d4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800a4d8:	bf00      	nop
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bc80      	pop	{r7}
 800a4de:	4770      	bx	lr

0800a4e0 <OnRxError>:

static void OnRxError(void)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800a4e4:	bf00      	nop
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bc80      	pop	{r7}
 800a4ea:	4770      	bx	lr

0800a4ec <LL_AHB2_GRP1_EnableClock>:
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a4f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4313      	orrs	r3, r2
 800a502:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4013      	ands	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a510:	68fb      	ldr	r3, [r7, #12]
}
 800a512:	bf00      	nop
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	bc80      	pop	{r7}
 800a51a:	4770      	bx	lr

0800a51c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800a526:	463b      	mov	r3, r7
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	605a      	str	r2, [r3, #4]
 800a52e:	609a      	str	r2, [r3, #8]
 800a530:	60da      	str	r2, [r3, #12]
 800a532:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800a534:	2004      	movs	r0, #4
 800a536:	f7ff ffd9 	bl	800a4ec <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800a53a:	2310      	movs	r3, #16
 800a53c:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800a53e:	2301      	movs	r3, #1
 800a540:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800a542:	2300      	movs	r3, #0
 800a544:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a546:	2303      	movs	r3, #3
 800a548:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800a54a:	463b      	mov	r3, r7
 800a54c:	4619      	mov	r1, r3
 800a54e:	4812      	ldr	r0, [pc, #72]	; (800a598 <RBI_Init+0x7c>)
 800a550:	f7f8 fae8 	bl	8002b24 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800a554:	2320      	movs	r3, #32
 800a556:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800a558:	463b      	mov	r3, r7
 800a55a:	4619      	mov	r1, r3
 800a55c:	480e      	ldr	r0, [pc, #56]	; (800a598 <RBI_Init+0x7c>)
 800a55e:	f7f8 fae1 	bl	8002b24 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800a562:	2308      	movs	r3, #8
 800a564:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800a566:	463b      	mov	r3, r7
 800a568:	4619      	mov	r1, r3
 800a56a:	480b      	ldr	r0, [pc, #44]	; (800a598 <RBI_Init+0x7c>)
 800a56c:	f7f8 fada 	bl	8002b24 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800a570:	2200      	movs	r2, #0
 800a572:	2120      	movs	r1, #32
 800a574:	4808      	ldr	r0, [pc, #32]	; (800a598 <RBI_Init+0x7c>)
 800a576:	f7f8 fc35 	bl	8002de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800a57a:	2200      	movs	r2, #0
 800a57c:	2110      	movs	r1, #16
 800a57e:	4806      	ldr	r0, [pc, #24]	; (800a598 <RBI_Init+0x7c>)
 800a580:	f7f8 fc30 	bl	8002de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800a584:	2200      	movs	r2, #0
 800a586:	2108      	movs	r1, #8
 800a588:	4803      	ldr	r0, [pc, #12]	; (800a598 <RBI_Init+0x7c>)
 800a58a:	f7f8 fc2b 	bl	8002de4 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800a58e:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800a590:	4618      	mov	r0, r3
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	48000800 	.word	0x48000800

0800a59c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
 800a5ac:	2b03      	cmp	r3, #3
 800a5ae:	d84b      	bhi.n	800a648 <RBI_ConfigRFSwitch+0xac>
 800a5b0:	a201      	add	r2, pc, #4	; (adr r2, 800a5b8 <RBI_ConfigRFSwitch+0x1c>)
 800a5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b6:	bf00      	nop
 800a5b8:	0800a5c9 	.word	0x0800a5c9
 800a5bc:	0800a5e9 	.word	0x0800a5e9
 800a5c0:	0800a609 	.word	0x0800a609
 800a5c4:	0800a629 	.word	0x0800a629
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2108      	movs	r1, #8
 800a5cc:	4821      	ldr	r0, [pc, #132]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a5ce:	f7f8 fc09 	bl	8002de4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	2110      	movs	r1, #16
 800a5d6:	481f      	ldr	r0, [pc, #124]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a5d8:	f7f8 fc04 	bl	8002de4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2120      	movs	r1, #32
 800a5e0:	481c      	ldr	r0, [pc, #112]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a5e2:	f7f8 fbff 	bl	8002de4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800a5e6:	e030      	b.n	800a64a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	2108      	movs	r1, #8
 800a5ec:	4819      	ldr	r0, [pc, #100]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a5ee:	f7f8 fbf9 	bl	8002de4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	2110      	movs	r1, #16
 800a5f6:	4817      	ldr	r0, [pc, #92]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a5f8:	f7f8 fbf4 	bl	8002de4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	2120      	movs	r1, #32
 800a600:	4814      	ldr	r0, [pc, #80]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a602:	f7f8 fbef 	bl	8002de4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800a606:	e020      	b.n	800a64a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a608:	2201      	movs	r2, #1
 800a60a:	2108      	movs	r1, #8
 800a60c:	4811      	ldr	r0, [pc, #68]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a60e:	f7f8 fbe9 	bl	8002de4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a612:	2201      	movs	r2, #1
 800a614:	2110      	movs	r1, #16
 800a616:	480f      	ldr	r0, [pc, #60]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a618:	f7f8 fbe4 	bl	8002de4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a61c:	2201      	movs	r2, #1
 800a61e:	2120      	movs	r1, #32
 800a620:	480c      	ldr	r0, [pc, #48]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a622:	f7f8 fbdf 	bl	8002de4 <HAL_GPIO_WritePin>
		break;
 800a626:	e010      	b.n	800a64a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a628:	2201      	movs	r2, #1
 800a62a:	2108      	movs	r1, #8
 800a62c:	4809      	ldr	r0, [pc, #36]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a62e:	f7f8 fbd9 	bl	8002de4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800a632:	2200      	movs	r2, #0
 800a634:	2110      	movs	r1, #16
 800a636:	4807      	ldr	r0, [pc, #28]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a638:	f7f8 fbd4 	bl	8002de4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a63c:	2201      	movs	r2, #1
 800a63e:	2120      	movs	r1, #32
 800a640:	4804      	ldr	r0, [pc, #16]	; (800a654 <RBI_ConfigRFSwitch+0xb8>)
 800a642:	f7f8 fbcf 	bl	8002de4 <HAL_GPIO_WritePin>
		break;
 800a646:	e000      	b.n	800a64a <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 800a648:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800a64a:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	48000800 	.word	0x48000800

0800a658 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800a65e:	2300      	movs	r3, #0
 800a660:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800a662:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a664:	4618      	mov	r0, r3
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	bc80      	pop	{r7}
 800a66c:	4770      	bx	lr

0800a66e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800a674:	2301      	movs	r3, #1
 800a676:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800a678:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	bc80      	pop	{r7}
 800a682:	4770      	bx	lr

0800a684 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800a68a:	2301      	movs	r3, #1
 800a68c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800a68e:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a690:	4618      	mov	r0, r3
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	bc80      	pop	{r7}
 800a698:	4770      	bx	lr

0800a69a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b085      	sub	sp, #20
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800a6a8:	79fb      	ldrb	r3, [r7, #7]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d102      	bne.n	800a6b4 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800a6ae:	230f      	movs	r3, #15
 800a6b0:	60fb      	str	r3, [r7, #12]
 800a6b2:	e001      	b.n	800a6b8 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800a6b4:	2316      	movs	r3, #22
 800a6b6:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bc80      	pop	{r7}
 800a6c2:	4770      	bx	lr

0800a6c4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	613b      	str	r3, [r7, #16]

  while( size-- )
 800a6da:	e007      	b.n	800a6ec <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	1c53      	adds	r3, r2, #1
 800a6e0:	613b      	str	r3, [r7, #16]
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	1c59      	adds	r1, r3, #1
 800a6e6:	6179      	str	r1, [r7, #20]
 800a6e8:	7812      	ldrb	r2, [r2, #0]
 800a6ea:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a6ec:	88fb      	ldrh	r3, [r7, #6]
 800a6ee:	1e5a      	subs	r2, r3, #1
 800a6f0:	80fa      	strh	r2, [r7, #6]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1f2      	bne.n	800a6dc <UTIL_MEM_cpy_8+0x18>
    }
}
 800a6f6:	bf00      	nop
 800a6f8:	bf00      	nop
 800a6fa:	371c      	adds	r7, #28
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc80      	pop	{r7}
 800a700:	4770      	bx	lr

0800a702 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800a702:	b480      	push	{r7}
 800a704:	b085      	sub	sp, #20
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	460b      	mov	r3, r1
 800a70c:	70fb      	strb	r3, [r7, #3]
 800a70e:	4613      	mov	r3, r2
 800a710:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800a716:	e004      	b.n	800a722 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	1c5a      	adds	r2, r3, #1
 800a71c:	60fa      	str	r2, [r7, #12]
 800a71e:	78fa      	ldrb	r2, [r7, #3]
 800a720:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a722:	883b      	ldrh	r3, [r7, #0]
 800a724:	1e5a      	subs	r2, r3, #1
 800a726:	803a      	strh	r2, [r7, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1f5      	bne.n	800a718 <UTIL_MEM_set_8+0x16>
  }
}
 800a72c:	bf00      	nop
 800a72e:	bf00      	nop
 800a730:	3714      	adds	r7, #20
 800a732:	46bd      	mov	sp, r7
 800a734:	bc80      	pop	{r7}
 800a736:	4770      	bx	lr

0800a738 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	4613      	mov	r3, r2
 800a746:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d023      	beq.n	800a796 <UTIL_TIMER_Create+0x5e>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d020      	beq.n	800a796 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800a75a:	4b11      	ldr	r3, [pc, #68]	; (800a7a0 <UTIL_TIMER_Create+0x68>)
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	68b8      	ldr	r0, [r7, #8]
 800a760:	4798      	blx	r3
 800a762:	4602      	mov	r2, r0
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	69ba      	ldr	r2, [r7, #24]
 800a784:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	79fa      	ldrb	r2, [r7, #7]
 800a78a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	e000      	b.n	800a798 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800a796:	2301      	movs	r3, #1
  }
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	0800bd74 	.word	0x0800bd74

0800a7a4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08a      	sub	sp, #40	; 0x28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d056      	beq.n	800a866 <UTIL_TIMER_Start+0xc2>
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f929 	bl	800aa10 <TimerExists>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	f083 0301 	eor.w	r3, r3, #1
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d04d      	beq.n	800a866 <UTIL_TIMER_Start+0xc2>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	7a5b      	ldrb	r3, [r3, #9]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d149      	bne.n	800a866 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a7d6:	613b      	str	r3, [r7, #16]
  return(result);
 800a7d8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a7da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7dc:	b672      	cpsid	i
}
 800a7de:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800a7e6:	4b24      	ldr	r3, [pc, #144]	; (800a878 <UTIL_TIMER_Start+0xd4>)
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	4798      	blx	r3
 800a7ec:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800a7ee:	6a3a      	ldr	r2, [r7, #32]
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d201      	bcs.n	800a7fa <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a3a      	ldr	r2, [r7, #32]
 800a7fe:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800a812:	4b1a      	ldr	r3, [pc, #104]	; (800a87c <UTIL_TIMER_Start+0xd8>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d106      	bne.n	800a828 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800a81a:	4b17      	ldr	r3, [pc, #92]	; (800a878 <UTIL_TIMER_Start+0xd4>)
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f96b 	bl	800aafc <TimerInsertNewHeadTimer>
 800a826:	e017      	b.n	800a858 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800a828:	4b13      	ldr	r3, [pc, #76]	; (800a878 <UTIL_TIMER_Start+0xd4>)
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	4798      	blx	r3
 800a82e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	441a      	add	r2, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	4b0e      	ldr	r3, [pc, #56]	; (800a87c <UTIL_TIMER_Start+0xd8>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	429a      	cmp	r2, r3
 800a848:	d203      	bcs.n	800a852 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f956 	bl	800aafc <TimerInsertNewHeadTimer>
 800a850:	e002      	b.n	800a858 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f922 	bl	800aa9c <TimerInsertTimer>
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f383 8810 	msr	PRIMASK, r3
}
 800a862:	bf00      	nop
  {
 800a864:	e002      	b.n	800a86c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800a866:	2301      	movs	r3, #1
 800a868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800a86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a870:	4618      	mov	r0, r3
 800a872:	3728      	adds	r7, #40	; 0x28
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	0800bd74 	.word	0x0800bd74
 800a87c:	200006c4 	.word	0x200006c4

0800a880 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b088      	sub	sp, #32
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d05b      	beq.n	800a94a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a892:	f3ef 8310 	mrs	r3, PRIMASK
 800a896:	60fb      	str	r3, [r7, #12]
  return(result);
 800a898:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a89a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a89c:	b672      	cpsid	i
}
 800a89e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800a8a0:	4b2d      	ldr	r3, [pc, #180]	; (800a958 <UTIL_TIMER_Stop+0xd8>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800a8a6:	4b2c      	ldr	r3, [pc, #176]	; (800a958 <UTIL_TIMER_Stop+0xd8>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800a8b2:	4b29      	ldr	r3, [pc, #164]	; (800a958 <UTIL_TIMER_Stop+0xd8>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d041      	beq.n	800a93e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800a8c0:	4b25      	ldr	r3, [pc, #148]	; (800a958 <UTIL_TIMER_Stop+0xd8>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d134      	bne.n	800a934 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800a8ca:	4b23      	ldr	r3, [pc, #140]	; (800a958 <UTIL_TIMER_Stop+0xd8>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800a8d2:	4b21      	ldr	r3, [pc, #132]	; (800a958 <UTIL_TIMER_Stop+0xd8>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00a      	beq.n	800a8f2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800a8dc:	4b1e      	ldr	r3, [pc, #120]	; (800a958 <UTIL_TIMER_Stop+0xd8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	4a1d      	ldr	r2, [pc, #116]	; (800a958 <UTIL_TIMER_Stop+0xd8>)
 800a8e4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800a8e6:	4b1c      	ldr	r3, [pc, #112]	; (800a958 <UTIL_TIMER_Stop+0xd8>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 f8ac 	bl	800aa48 <TimerSetTimeout>
 800a8f0:	e023      	b.n	800a93a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800a8f2:	4b1a      	ldr	r3, [pc, #104]	; (800a95c <UTIL_TIMER_Stop+0xdc>)
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	4798      	blx	r3
            TimerListHead = NULL;
 800a8f8:	4b17      	ldr	r3, [pc, #92]	; (800a958 <UTIL_TIMER_Stop+0xd8>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	e01c      	b.n	800a93a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	429a      	cmp	r2, r3
 800a906:	d110      	bne.n	800a92a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d006      	beq.n	800a91e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800a91c:	e00d      	b.n	800a93a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	615a      	str	r2, [r3, #20]
            break;
 800a928:	e007      	b.n	800a93a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1e2      	bne.n	800a900 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	77fb      	strb	r3, [r7, #31]
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	f383 8810 	msr	PRIMASK, r3
}
 800a948:	e001      	b.n	800a94e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800a94a:	2301      	movs	r3, #1
 800a94c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800a94e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3720      	adds	r7, #32
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	200006c4 	.word	0x200006c4
 800a95c:	0800bd74 	.word	0x0800bd74

0800a960 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d102      	bne.n	800a97a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800a974:	2301      	movs	r3, #1
 800a976:	73fb      	strb	r3, [r7, #15]
 800a978:	e014      	b.n	800a9a4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800a97a:	4b0d      	ldr	r3, [pc, #52]	; (800a9b0 <UTIL_TIMER_SetPeriod+0x50>)
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	6838      	ldr	r0, [r7, #0]
 800a980:	4798      	blx	r3
 800a982:	4602      	mov	r2, r0
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f841 	bl	800aa10 <TimerExists>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d007      	beq.n	800a9a4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7ff ff73 	bl	800a880 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f7ff ff02 	bl	800a7a4 <UTIL_TIMER_Start>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	0800bd74 	.word	0x0800bd74

0800a9b4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800a9ba:	4b06      	ldr	r3, [pc, #24]	; (800a9d4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	4798      	blx	r3
 800a9c0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800a9c2:	4b04      	ldr	r3, [pc, #16]	; (800a9d4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	4798      	blx	r3
 800a9ca:	4603      	mov	r3, r0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	0800bd74 	.word	0x0800bd74

0800a9d8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800a9e0:	4b0a      	ldr	r3, [pc, #40]	; (800aa0c <UTIL_TIMER_GetElapsedTime+0x34>)
 800a9e2:	69db      	ldr	r3, [r3, #28]
 800a9e4:	4798      	blx	r3
 800a9e6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800a9e8:	4b08      	ldr	r3, [pc, #32]	; (800aa0c <UTIL_TIMER_GetElapsedTime+0x34>)
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	4798      	blx	r3
 800a9f0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800a9f2:	4b06      	ldr	r3, [pc, #24]	; (800aa0c <UTIL_TIMER_GetElapsedTime+0x34>)
 800a9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	1a8a      	subs	r2, r1, r2
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4798      	blx	r3
 800aa00:	4603      	mov	r3, r0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	0800bd74 	.word	0x0800bd74

0800aa10 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800aa18:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <TimerExists+0x34>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800aa1e:	e008      	b.n	800aa32 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d101      	bne.n	800aa2c <TimerExists+0x1c>
    {
      return true;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e006      	b.n	800aa3a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1f3      	bne.n	800aa20 <TimerExists+0x10>
  }
  return false;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bc80      	pop	{r7}
 800aa42:	4770      	bx	lr
 800aa44:	200006c4 	.word	0x200006c4

0800aa48 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800aa48:	b590      	push	{r4, r7, lr}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800aa50:	4b11      	ldr	r3, [pc, #68]	; (800aa98 <TimerSetTimeout+0x50>)
 800aa52:	6a1b      	ldr	r3, [r3, #32]
 800aa54:	4798      	blx	r3
 800aa56:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681c      	ldr	r4, [r3, #0]
 800aa62:	4b0d      	ldr	r3, [pc, #52]	; (800aa98 <TimerSetTimeout+0x50>)
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	4798      	blx	r3
 800aa68:	4602      	mov	r2, r0
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	429c      	cmp	r4, r3
 800aa70:	d207      	bcs.n	800aa82 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800aa72:	4b09      	ldr	r3, [pc, #36]	; (800aa98 <TimerSetTimeout+0x50>)
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	4798      	blx	r3
 800aa78:	4602      	mov	r2, r0
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	441a      	add	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800aa82:	4b05      	ldr	r3, [pc, #20]	; (800aa98 <TimerSetTimeout+0x50>)
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	6812      	ldr	r2, [r2, #0]
 800aa8a:	4610      	mov	r0, r2
 800aa8c:	4798      	blx	r3
}
 800aa8e:	bf00      	nop
 800aa90:	3714      	adds	r7, #20
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd90      	pop	{r4, r7, pc}
 800aa96:	bf00      	nop
 800aa98:	0800bd74 	.word	0x0800bd74

0800aa9c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800aaa4:	4b14      	ldr	r3, [pc, #80]	; (800aaf8 <TimerInsertTimer+0x5c>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800aaaa:	4b13      	ldr	r3, [pc, #76]	; (800aaf8 <TimerInsertTimer+0x5c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800aab2:	e012      	b.n	800aada <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d905      	bls.n	800aacc <TimerInsertTimer+0x30>
    {
        cur = next;
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	60bb      	str	r3, [r7, #8]
 800aaca:	e006      	b.n	800aada <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	615a      	str	r2, [r3, #20]
        return;
 800aad8:	e009      	b.n	800aaee <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e8      	bne.n	800aab4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	615a      	str	r2, [r3, #20]
}
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bc80      	pop	{r7}
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	200006c4 	.word	0x200006c4

0800aafc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ab04:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <TimerInsertNewHeadTimer+0x38>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800ab1c:	4a05      	ldr	r2, [pc, #20]	; (800ab34 <TimerInsertNewHeadTimer+0x38>)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800ab22:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <TimerInsertNewHeadTimer+0x38>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff ff8e 	bl	800aa48 <TimerSetTimeout>
}
 800ab2c:	bf00      	nop
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	200006c4 	.word	0x200006c4

0800ab38 <_vsniprintf_r>:
 800ab38:	b530      	push	{r4, r5, lr}
 800ab3a:	4614      	mov	r4, r2
 800ab3c:	2c00      	cmp	r4, #0
 800ab3e:	b09b      	sub	sp, #108	; 0x6c
 800ab40:	4605      	mov	r5, r0
 800ab42:	461a      	mov	r2, r3
 800ab44:	da05      	bge.n	800ab52 <_vsniprintf_r+0x1a>
 800ab46:	238b      	movs	r3, #139	; 0x8b
 800ab48:	6003      	str	r3, [r0, #0]
 800ab4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab4e:	b01b      	add	sp, #108	; 0x6c
 800ab50:	bd30      	pop	{r4, r5, pc}
 800ab52:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ab56:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ab5a:	bf14      	ite	ne
 800ab5c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ab60:	4623      	moveq	r3, r4
 800ab62:	9302      	str	r3, [sp, #8]
 800ab64:	9305      	str	r3, [sp, #20]
 800ab66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab6a:	9100      	str	r1, [sp, #0]
 800ab6c:	9104      	str	r1, [sp, #16]
 800ab6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ab72:	4669      	mov	r1, sp
 800ab74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab76:	f000 f8b5 	bl	800ace4 <_svfiprintf_r>
 800ab7a:	1c43      	adds	r3, r0, #1
 800ab7c:	bfbc      	itt	lt
 800ab7e:	238b      	movlt	r3, #139	; 0x8b
 800ab80:	602b      	strlt	r3, [r5, #0]
 800ab82:	2c00      	cmp	r4, #0
 800ab84:	d0e3      	beq.n	800ab4e <_vsniprintf_r+0x16>
 800ab86:	9b00      	ldr	r3, [sp, #0]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	701a      	strb	r2, [r3, #0]
 800ab8c:	e7df      	b.n	800ab4e <_vsniprintf_r+0x16>
	...

0800ab90 <vsniprintf>:
 800ab90:	b507      	push	{r0, r1, r2, lr}
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	4613      	mov	r3, r2
 800ab96:	460a      	mov	r2, r1
 800ab98:	4601      	mov	r1, r0
 800ab9a:	4803      	ldr	r0, [pc, #12]	; (800aba8 <vsniprintf+0x18>)
 800ab9c:	6800      	ldr	r0, [r0, #0]
 800ab9e:	f7ff ffcb 	bl	800ab38 <_vsniprintf_r>
 800aba2:	b003      	add	sp, #12
 800aba4:	f85d fb04 	ldr.w	pc, [sp], #4
 800aba8:	20000060 	.word	0x20000060

0800abac <memset>:
 800abac:	4402      	add	r2, r0
 800abae:	4603      	mov	r3, r0
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d100      	bne.n	800abb6 <memset+0xa>
 800abb4:	4770      	bx	lr
 800abb6:	f803 1b01 	strb.w	r1, [r3], #1
 800abba:	e7f9      	b.n	800abb0 <memset+0x4>

0800abbc <__errno>:
 800abbc:	4b01      	ldr	r3, [pc, #4]	; (800abc4 <__errno+0x8>)
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	20000060 	.word	0x20000060

0800abc8 <__libc_init_array>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	4d0d      	ldr	r5, [pc, #52]	; (800ac00 <__libc_init_array+0x38>)
 800abcc:	4c0d      	ldr	r4, [pc, #52]	; (800ac04 <__libc_init_array+0x3c>)
 800abce:	1b64      	subs	r4, r4, r5
 800abd0:	10a4      	asrs	r4, r4, #2
 800abd2:	2600      	movs	r6, #0
 800abd4:	42a6      	cmp	r6, r4
 800abd6:	d109      	bne.n	800abec <__libc_init_array+0x24>
 800abd8:	4d0b      	ldr	r5, [pc, #44]	; (800ac08 <__libc_init_array+0x40>)
 800abda:	4c0c      	ldr	r4, [pc, #48]	; (800ac0c <__libc_init_array+0x44>)
 800abdc:	f000 fc68 	bl	800b4b0 <_init>
 800abe0:	1b64      	subs	r4, r4, r5
 800abe2:	10a4      	asrs	r4, r4, #2
 800abe4:	2600      	movs	r6, #0
 800abe6:	42a6      	cmp	r6, r4
 800abe8:	d105      	bne.n	800abf6 <__libc_init_array+0x2e>
 800abea:	bd70      	pop	{r4, r5, r6, pc}
 800abec:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf0:	4798      	blx	r3
 800abf2:	3601      	adds	r6, #1
 800abf4:	e7ee      	b.n	800abd4 <__libc_init_array+0xc>
 800abf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfa:	4798      	blx	r3
 800abfc:	3601      	adds	r6, #1
 800abfe:	e7f2      	b.n	800abe6 <__libc_init_array+0x1e>
 800ac00:	0800bf44 	.word	0x0800bf44
 800ac04:	0800bf44 	.word	0x0800bf44
 800ac08:	0800bf44 	.word	0x0800bf44
 800ac0c:	0800bf48 	.word	0x0800bf48

0800ac10 <__retarget_lock_acquire_recursive>:
 800ac10:	4770      	bx	lr

0800ac12 <__retarget_lock_release_recursive>:
 800ac12:	4770      	bx	lr

0800ac14 <memcpy>:
 800ac14:	440a      	add	r2, r1
 800ac16:	4291      	cmp	r1, r2
 800ac18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac1c:	d100      	bne.n	800ac20 <memcpy+0xc>
 800ac1e:	4770      	bx	lr
 800ac20:	b510      	push	{r4, lr}
 800ac22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac2a:	4291      	cmp	r1, r2
 800ac2c:	d1f9      	bne.n	800ac22 <memcpy+0xe>
 800ac2e:	bd10      	pop	{r4, pc}

0800ac30 <__ssputs_r>:
 800ac30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac34:	688e      	ldr	r6, [r1, #8]
 800ac36:	461f      	mov	r7, r3
 800ac38:	42be      	cmp	r6, r7
 800ac3a:	680b      	ldr	r3, [r1, #0]
 800ac3c:	4682      	mov	sl, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	4690      	mov	r8, r2
 800ac42:	d82c      	bhi.n	800ac9e <__ssputs_r+0x6e>
 800ac44:	898a      	ldrh	r2, [r1, #12]
 800ac46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac4a:	d026      	beq.n	800ac9a <__ssputs_r+0x6a>
 800ac4c:	6965      	ldr	r5, [r4, #20]
 800ac4e:	6909      	ldr	r1, [r1, #16]
 800ac50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac54:	eba3 0901 	sub.w	r9, r3, r1
 800ac58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac5c:	1c7b      	adds	r3, r7, #1
 800ac5e:	444b      	add	r3, r9
 800ac60:	106d      	asrs	r5, r5, #1
 800ac62:	429d      	cmp	r5, r3
 800ac64:	bf38      	it	cc
 800ac66:	461d      	movcc	r5, r3
 800ac68:	0553      	lsls	r3, r2, #21
 800ac6a:	d527      	bpl.n	800acbc <__ssputs_r+0x8c>
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	f000 f957 	bl	800af20 <_malloc_r>
 800ac72:	4606      	mov	r6, r0
 800ac74:	b360      	cbz	r0, 800acd0 <__ssputs_r+0xa0>
 800ac76:	6921      	ldr	r1, [r4, #16]
 800ac78:	464a      	mov	r2, r9
 800ac7a:	f7ff ffcb 	bl	800ac14 <memcpy>
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	6126      	str	r6, [r4, #16]
 800ac8c:	6165      	str	r5, [r4, #20]
 800ac8e:	444e      	add	r6, r9
 800ac90:	eba5 0509 	sub.w	r5, r5, r9
 800ac94:	6026      	str	r6, [r4, #0]
 800ac96:	60a5      	str	r5, [r4, #8]
 800ac98:	463e      	mov	r6, r7
 800ac9a:	42be      	cmp	r6, r7
 800ac9c:	d900      	bls.n	800aca0 <__ssputs_r+0x70>
 800ac9e:	463e      	mov	r6, r7
 800aca0:	6820      	ldr	r0, [r4, #0]
 800aca2:	4632      	mov	r2, r6
 800aca4:	4641      	mov	r1, r8
 800aca6:	f000 fb86 	bl	800b3b6 <memmove>
 800acaa:	68a3      	ldr	r3, [r4, #8]
 800acac:	1b9b      	subs	r3, r3, r6
 800acae:	60a3      	str	r3, [r4, #8]
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	4433      	add	r3, r6
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	2000      	movs	r0, #0
 800acb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acbc:	462a      	mov	r2, r5
 800acbe:	f000 fb4b 	bl	800b358 <_realloc_r>
 800acc2:	4606      	mov	r6, r0
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d1e0      	bne.n	800ac8a <__ssputs_r+0x5a>
 800acc8:	6921      	ldr	r1, [r4, #16]
 800acca:	4650      	mov	r0, sl
 800accc:	f000 fb9e 	bl	800b40c <_free_r>
 800acd0:	230c      	movs	r3, #12
 800acd2:	f8ca 3000 	str.w	r3, [sl]
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acdc:	81a3      	strh	r3, [r4, #12]
 800acde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ace2:	e7e9      	b.n	800acb8 <__ssputs_r+0x88>

0800ace4 <_svfiprintf_r>:
 800ace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace8:	4698      	mov	r8, r3
 800acea:	898b      	ldrh	r3, [r1, #12]
 800acec:	061b      	lsls	r3, r3, #24
 800acee:	b09d      	sub	sp, #116	; 0x74
 800acf0:	4607      	mov	r7, r0
 800acf2:	460d      	mov	r5, r1
 800acf4:	4614      	mov	r4, r2
 800acf6:	d50e      	bpl.n	800ad16 <_svfiprintf_r+0x32>
 800acf8:	690b      	ldr	r3, [r1, #16]
 800acfa:	b963      	cbnz	r3, 800ad16 <_svfiprintf_r+0x32>
 800acfc:	2140      	movs	r1, #64	; 0x40
 800acfe:	f000 f90f 	bl	800af20 <_malloc_r>
 800ad02:	6028      	str	r0, [r5, #0]
 800ad04:	6128      	str	r0, [r5, #16]
 800ad06:	b920      	cbnz	r0, 800ad12 <_svfiprintf_r+0x2e>
 800ad08:	230c      	movs	r3, #12
 800ad0a:	603b      	str	r3, [r7, #0]
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad10:	e0d0      	b.n	800aeb4 <_svfiprintf_r+0x1d0>
 800ad12:	2340      	movs	r3, #64	; 0x40
 800ad14:	616b      	str	r3, [r5, #20]
 800ad16:	2300      	movs	r3, #0
 800ad18:	9309      	str	r3, [sp, #36]	; 0x24
 800ad1a:	2320      	movs	r3, #32
 800ad1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad20:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad24:	2330      	movs	r3, #48	; 0x30
 800ad26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aecc <_svfiprintf_r+0x1e8>
 800ad2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad2e:	f04f 0901 	mov.w	r9, #1
 800ad32:	4623      	mov	r3, r4
 800ad34:	469a      	mov	sl, r3
 800ad36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad3a:	b10a      	cbz	r2, 800ad40 <_svfiprintf_r+0x5c>
 800ad3c:	2a25      	cmp	r2, #37	; 0x25
 800ad3e:	d1f9      	bne.n	800ad34 <_svfiprintf_r+0x50>
 800ad40:	ebba 0b04 	subs.w	fp, sl, r4
 800ad44:	d00b      	beq.n	800ad5e <_svfiprintf_r+0x7a>
 800ad46:	465b      	mov	r3, fp
 800ad48:	4622      	mov	r2, r4
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f7ff ff6f 	bl	800ac30 <__ssputs_r>
 800ad52:	3001      	adds	r0, #1
 800ad54:	f000 80a9 	beq.w	800aeaa <_svfiprintf_r+0x1c6>
 800ad58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad5a:	445a      	add	r2, fp
 800ad5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f000 80a1 	beq.w	800aeaa <_svfiprintf_r+0x1c6>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad72:	f10a 0a01 	add.w	sl, sl, #1
 800ad76:	9304      	str	r3, [sp, #16]
 800ad78:	9307      	str	r3, [sp, #28]
 800ad7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad7e:	931a      	str	r3, [sp, #104]	; 0x68
 800ad80:	4654      	mov	r4, sl
 800ad82:	2205      	movs	r2, #5
 800ad84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad88:	4850      	ldr	r0, [pc, #320]	; (800aecc <_svfiprintf_r+0x1e8>)
 800ad8a:	f7f5 f9f9 	bl	8000180 <memchr>
 800ad8e:	9a04      	ldr	r2, [sp, #16]
 800ad90:	b9d8      	cbnz	r0, 800adca <_svfiprintf_r+0xe6>
 800ad92:	06d0      	lsls	r0, r2, #27
 800ad94:	bf44      	itt	mi
 800ad96:	2320      	movmi	r3, #32
 800ad98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad9c:	0711      	lsls	r1, r2, #28
 800ad9e:	bf44      	itt	mi
 800ada0:	232b      	movmi	r3, #43	; 0x2b
 800ada2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ada6:	f89a 3000 	ldrb.w	r3, [sl]
 800adaa:	2b2a      	cmp	r3, #42	; 0x2a
 800adac:	d015      	beq.n	800adda <_svfiprintf_r+0xf6>
 800adae:	9a07      	ldr	r2, [sp, #28]
 800adb0:	4654      	mov	r4, sl
 800adb2:	2000      	movs	r0, #0
 800adb4:	f04f 0c0a 	mov.w	ip, #10
 800adb8:	4621      	mov	r1, r4
 800adba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adbe:	3b30      	subs	r3, #48	; 0x30
 800adc0:	2b09      	cmp	r3, #9
 800adc2:	d94d      	bls.n	800ae60 <_svfiprintf_r+0x17c>
 800adc4:	b1b0      	cbz	r0, 800adf4 <_svfiprintf_r+0x110>
 800adc6:	9207      	str	r2, [sp, #28]
 800adc8:	e014      	b.n	800adf4 <_svfiprintf_r+0x110>
 800adca:	eba0 0308 	sub.w	r3, r0, r8
 800adce:	fa09 f303 	lsl.w	r3, r9, r3
 800add2:	4313      	orrs	r3, r2
 800add4:	9304      	str	r3, [sp, #16]
 800add6:	46a2      	mov	sl, r4
 800add8:	e7d2      	b.n	800ad80 <_svfiprintf_r+0x9c>
 800adda:	9b03      	ldr	r3, [sp, #12]
 800addc:	1d19      	adds	r1, r3, #4
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	9103      	str	r1, [sp, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	bfbb      	ittet	lt
 800ade6:	425b      	neglt	r3, r3
 800ade8:	f042 0202 	orrlt.w	r2, r2, #2
 800adec:	9307      	strge	r3, [sp, #28]
 800adee:	9307      	strlt	r3, [sp, #28]
 800adf0:	bfb8      	it	lt
 800adf2:	9204      	strlt	r2, [sp, #16]
 800adf4:	7823      	ldrb	r3, [r4, #0]
 800adf6:	2b2e      	cmp	r3, #46	; 0x2e
 800adf8:	d10c      	bne.n	800ae14 <_svfiprintf_r+0x130>
 800adfa:	7863      	ldrb	r3, [r4, #1]
 800adfc:	2b2a      	cmp	r3, #42	; 0x2a
 800adfe:	d134      	bne.n	800ae6a <_svfiprintf_r+0x186>
 800ae00:	9b03      	ldr	r3, [sp, #12]
 800ae02:	1d1a      	adds	r2, r3, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	9203      	str	r2, [sp, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bfb8      	it	lt
 800ae0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae10:	3402      	adds	r4, #2
 800ae12:	9305      	str	r3, [sp, #20]
 800ae14:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800aed0 <_svfiprintf_r+0x1ec>
 800ae18:	7821      	ldrb	r1, [r4, #0]
 800ae1a:	2203      	movs	r2, #3
 800ae1c:	4650      	mov	r0, sl
 800ae1e:	f7f5 f9af 	bl	8000180 <memchr>
 800ae22:	b138      	cbz	r0, 800ae34 <_svfiprintf_r+0x150>
 800ae24:	9b04      	ldr	r3, [sp, #16]
 800ae26:	eba0 000a 	sub.w	r0, r0, sl
 800ae2a:	2240      	movs	r2, #64	; 0x40
 800ae2c:	4082      	lsls	r2, r0
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	3401      	adds	r4, #1
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	4826      	ldr	r0, [pc, #152]	; (800aed4 <_svfiprintf_r+0x1f0>)
 800ae3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae3e:	2206      	movs	r2, #6
 800ae40:	f7f5 f99e 	bl	8000180 <memchr>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d038      	beq.n	800aeba <_svfiprintf_r+0x1d6>
 800ae48:	4b23      	ldr	r3, [pc, #140]	; (800aed8 <_svfiprintf_r+0x1f4>)
 800ae4a:	bb1b      	cbnz	r3, 800ae94 <_svfiprintf_r+0x1b0>
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	3307      	adds	r3, #7
 800ae50:	f023 0307 	bic.w	r3, r3, #7
 800ae54:	3308      	adds	r3, #8
 800ae56:	9303      	str	r3, [sp, #12]
 800ae58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae5a:	4433      	add	r3, r6
 800ae5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5e:	e768      	b.n	800ad32 <_svfiprintf_r+0x4e>
 800ae60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae64:	460c      	mov	r4, r1
 800ae66:	2001      	movs	r0, #1
 800ae68:	e7a6      	b.n	800adb8 <_svfiprintf_r+0xd4>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	3401      	adds	r4, #1
 800ae6e:	9305      	str	r3, [sp, #20]
 800ae70:	4619      	mov	r1, r3
 800ae72:	f04f 0c0a 	mov.w	ip, #10
 800ae76:	4620      	mov	r0, r4
 800ae78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae7c:	3a30      	subs	r2, #48	; 0x30
 800ae7e:	2a09      	cmp	r2, #9
 800ae80:	d903      	bls.n	800ae8a <_svfiprintf_r+0x1a6>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0c6      	beq.n	800ae14 <_svfiprintf_r+0x130>
 800ae86:	9105      	str	r1, [sp, #20]
 800ae88:	e7c4      	b.n	800ae14 <_svfiprintf_r+0x130>
 800ae8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae8e:	4604      	mov	r4, r0
 800ae90:	2301      	movs	r3, #1
 800ae92:	e7f0      	b.n	800ae76 <_svfiprintf_r+0x192>
 800ae94:	ab03      	add	r3, sp, #12
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	462a      	mov	r2, r5
 800ae9a:	4b10      	ldr	r3, [pc, #64]	; (800aedc <_svfiprintf_r+0x1f8>)
 800ae9c:	a904      	add	r1, sp, #16
 800ae9e:	4638      	mov	r0, r7
 800aea0:	f3af 8000 	nop.w
 800aea4:	1c42      	adds	r2, r0, #1
 800aea6:	4606      	mov	r6, r0
 800aea8:	d1d6      	bne.n	800ae58 <_svfiprintf_r+0x174>
 800aeaa:	89ab      	ldrh	r3, [r5, #12]
 800aeac:	065b      	lsls	r3, r3, #25
 800aeae:	f53f af2d 	bmi.w	800ad0c <_svfiprintf_r+0x28>
 800aeb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeb4:	b01d      	add	sp, #116	; 0x74
 800aeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeba:	ab03      	add	r3, sp, #12
 800aebc:	9300      	str	r3, [sp, #0]
 800aebe:	462a      	mov	r2, r5
 800aec0:	4b06      	ldr	r3, [pc, #24]	; (800aedc <_svfiprintf_r+0x1f8>)
 800aec2:	a904      	add	r1, sp, #16
 800aec4:	4638      	mov	r0, r7
 800aec6:	f000 f919 	bl	800b0fc <_printf_i>
 800aeca:	e7eb      	b.n	800aea4 <_svfiprintf_r+0x1c0>
 800aecc:	0800bf08 	.word	0x0800bf08
 800aed0:	0800bf0e 	.word	0x0800bf0e
 800aed4:	0800bf12 	.word	0x0800bf12
 800aed8:	00000000 	.word	0x00000000
 800aedc:	0800ac31 	.word	0x0800ac31

0800aee0 <sbrk_aligned>:
 800aee0:	b570      	push	{r4, r5, r6, lr}
 800aee2:	4e0e      	ldr	r6, [pc, #56]	; (800af1c <sbrk_aligned+0x3c>)
 800aee4:	460c      	mov	r4, r1
 800aee6:	6831      	ldr	r1, [r6, #0]
 800aee8:	4605      	mov	r5, r0
 800aeea:	b911      	cbnz	r1, 800aef2 <sbrk_aligned+0x12>
 800aeec:	f000 fa7e 	bl	800b3ec <_sbrk_r>
 800aef0:	6030      	str	r0, [r6, #0]
 800aef2:	4621      	mov	r1, r4
 800aef4:	4628      	mov	r0, r5
 800aef6:	f000 fa79 	bl	800b3ec <_sbrk_r>
 800aefa:	1c43      	adds	r3, r0, #1
 800aefc:	d00a      	beq.n	800af14 <sbrk_aligned+0x34>
 800aefe:	1cc4      	adds	r4, r0, #3
 800af00:	f024 0403 	bic.w	r4, r4, #3
 800af04:	42a0      	cmp	r0, r4
 800af06:	d007      	beq.n	800af18 <sbrk_aligned+0x38>
 800af08:	1a21      	subs	r1, r4, r0
 800af0a:	4628      	mov	r0, r5
 800af0c:	f000 fa6e 	bl	800b3ec <_sbrk_r>
 800af10:	3001      	adds	r0, #1
 800af12:	d101      	bne.n	800af18 <sbrk_aligned+0x38>
 800af14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800af18:	4620      	mov	r0, r4
 800af1a:	bd70      	pop	{r4, r5, r6, pc}
 800af1c:	20000808 	.word	0x20000808

0800af20 <_malloc_r>:
 800af20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af24:	1ccd      	adds	r5, r1, #3
 800af26:	f025 0503 	bic.w	r5, r5, #3
 800af2a:	3508      	adds	r5, #8
 800af2c:	2d0c      	cmp	r5, #12
 800af2e:	bf38      	it	cc
 800af30:	250c      	movcc	r5, #12
 800af32:	2d00      	cmp	r5, #0
 800af34:	4607      	mov	r7, r0
 800af36:	db01      	blt.n	800af3c <_malloc_r+0x1c>
 800af38:	42a9      	cmp	r1, r5
 800af3a:	d905      	bls.n	800af48 <_malloc_r+0x28>
 800af3c:	230c      	movs	r3, #12
 800af3e:	603b      	str	r3, [r7, #0]
 800af40:	2600      	movs	r6, #0
 800af42:	4630      	mov	r0, r6
 800af44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b01c <_malloc_r+0xfc>
 800af4c:	f000 f9f8 	bl	800b340 <__malloc_lock>
 800af50:	f8d8 3000 	ldr.w	r3, [r8]
 800af54:	461c      	mov	r4, r3
 800af56:	bb5c      	cbnz	r4, 800afb0 <_malloc_r+0x90>
 800af58:	4629      	mov	r1, r5
 800af5a:	4638      	mov	r0, r7
 800af5c:	f7ff ffc0 	bl	800aee0 <sbrk_aligned>
 800af60:	1c43      	adds	r3, r0, #1
 800af62:	4604      	mov	r4, r0
 800af64:	d155      	bne.n	800b012 <_malloc_r+0xf2>
 800af66:	f8d8 4000 	ldr.w	r4, [r8]
 800af6a:	4626      	mov	r6, r4
 800af6c:	2e00      	cmp	r6, #0
 800af6e:	d145      	bne.n	800affc <_malloc_r+0xdc>
 800af70:	2c00      	cmp	r4, #0
 800af72:	d048      	beq.n	800b006 <_malloc_r+0xe6>
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	4631      	mov	r1, r6
 800af78:	4638      	mov	r0, r7
 800af7a:	eb04 0903 	add.w	r9, r4, r3
 800af7e:	f000 fa35 	bl	800b3ec <_sbrk_r>
 800af82:	4581      	cmp	r9, r0
 800af84:	d13f      	bne.n	800b006 <_malloc_r+0xe6>
 800af86:	6821      	ldr	r1, [r4, #0]
 800af88:	1a6d      	subs	r5, r5, r1
 800af8a:	4629      	mov	r1, r5
 800af8c:	4638      	mov	r0, r7
 800af8e:	f7ff ffa7 	bl	800aee0 <sbrk_aligned>
 800af92:	3001      	adds	r0, #1
 800af94:	d037      	beq.n	800b006 <_malloc_r+0xe6>
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	442b      	add	r3, r5
 800af9a:	6023      	str	r3, [r4, #0]
 800af9c:	f8d8 3000 	ldr.w	r3, [r8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d038      	beq.n	800b016 <_malloc_r+0xf6>
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	42a2      	cmp	r2, r4
 800afa8:	d12b      	bne.n	800b002 <_malloc_r+0xe2>
 800afaa:	2200      	movs	r2, #0
 800afac:	605a      	str	r2, [r3, #4]
 800afae:	e00f      	b.n	800afd0 <_malloc_r+0xb0>
 800afb0:	6822      	ldr	r2, [r4, #0]
 800afb2:	1b52      	subs	r2, r2, r5
 800afb4:	d41f      	bmi.n	800aff6 <_malloc_r+0xd6>
 800afb6:	2a0b      	cmp	r2, #11
 800afb8:	d917      	bls.n	800afea <_malloc_r+0xca>
 800afba:	1961      	adds	r1, r4, r5
 800afbc:	42a3      	cmp	r3, r4
 800afbe:	6025      	str	r5, [r4, #0]
 800afc0:	bf18      	it	ne
 800afc2:	6059      	strne	r1, [r3, #4]
 800afc4:	6863      	ldr	r3, [r4, #4]
 800afc6:	bf08      	it	eq
 800afc8:	f8c8 1000 	streq.w	r1, [r8]
 800afcc:	5162      	str	r2, [r4, r5]
 800afce:	604b      	str	r3, [r1, #4]
 800afd0:	4638      	mov	r0, r7
 800afd2:	f104 060b 	add.w	r6, r4, #11
 800afd6:	f000 f9b9 	bl	800b34c <__malloc_unlock>
 800afda:	f026 0607 	bic.w	r6, r6, #7
 800afde:	1d23      	adds	r3, r4, #4
 800afe0:	1af2      	subs	r2, r6, r3
 800afe2:	d0ae      	beq.n	800af42 <_malloc_r+0x22>
 800afe4:	1b9b      	subs	r3, r3, r6
 800afe6:	50a3      	str	r3, [r4, r2]
 800afe8:	e7ab      	b.n	800af42 <_malloc_r+0x22>
 800afea:	42a3      	cmp	r3, r4
 800afec:	6862      	ldr	r2, [r4, #4]
 800afee:	d1dd      	bne.n	800afac <_malloc_r+0x8c>
 800aff0:	f8c8 2000 	str.w	r2, [r8]
 800aff4:	e7ec      	b.n	800afd0 <_malloc_r+0xb0>
 800aff6:	4623      	mov	r3, r4
 800aff8:	6864      	ldr	r4, [r4, #4]
 800affa:	e7ac      	b.n	800af56 <_malloc_r+0x36>
 800affc:	4634      	mov	r4, r6
 800affe:	6876      	ldr	r6, [r6, #4]
 800b000:	e7b4      	b.n	800af6c <_malloc_r+0x4c>
 800b002:	4613      	mov	r3, r2
 800b004:	e7cc      	b.n	800afa0 <_malloc_r+0x80>
 800b006:	230c      	movs	r3, #12
 800b008:	603b      	str	r3, [r7, #0]
 800b00a:	4638      	mov	r0, r7
 800b00c:	f000 f99e 	bl	800b34c <__malloc_unlock>
 800b010:	e797      	b.n	800af42 <_malloc_r+0x22>
 800b012:	6025      	str	r5, [r4, #0]
 800b014:	e7dc      	b.n	800afd0 <_malloc_r+0xb0>
 800b016:	605b      	str	r3, [r3, #4]
 800b018:	deff      	udf	#255	; 0xff
 800b01a:	bf00      	nop
 800b01c:	20000804 	.word	0x20000804

0800b020 <_printf_common>:
 800b020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b024:	4616      	mov	r6, r2
 800b026:	4699      	mov	r9, r3
 800b028:	688a      	ldr	r2, [r1, #8]
 800b02a:	690b      	ldr	r3, [r1, #16]
 800b02c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b030:	4293      	cmp	r3, r2
 800b032:	bfb8      	it	lt
 800b034:	4613      	movlt	r3, r2
 800b036:	6033      	str	r3, [r6, #0]
 800b038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b03c:	4607      	mov	r7, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	b10a      	cbz	r2, 800b046 <_printf_common+0x26>
 800b042:	3301      	adds	r3, #1
 800b044:	6033      	str	r3, [r6, #0]
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	0699      	lsls	r1, r3, #26
 800b04a:	bf42      	ittt	mi
 800b04c:	6833      	ldrmi	r3, [r6, #0]
 800b04e:	3302      	addmi	r3, #2
 800b050:	6033      	strmi	r3, [r6, #0]
 800b052:	6825      	ldr	r5, [r4, #0]
 800b054:	f015 0506 	ands.w	r5, r5, #6
 800b058:	d106      	bne.n	800b068 <_printf_common+0x48>
 800b05a:	f104 0a19 	add.w	sl, r4, #25
 800b05e:	68e3      	ldr	r3, [r4, #12]
 800b060:	6832      	ldr	r2, [r6, #0]
 800b062:	1a9b      	subs	r3, r3, r2
 800b064:	42ab      	cmp	r3, r5
 800b066:	dc26      	bgt.n	800b0b6 <_printf_common+0x96>
 800b068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b06c:	1e13      	subs	r3, r2, #0
 800b06e:	6822      	ldr	r2, [r4, #0]
 800b070:	bf18      	it	ne
 800b072:	2301      	movne	r3, #1
 800b074:	0692      	lsls	r2, r2, #26
 800b076:	d42b      	bmi.n	800b0d0 <_printf_common+0xb0>
 800b078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b07c:	4649      	mov	r1, r9
 800b07e:	4638      	mov	r0, r7
 800b080:	47c0      	blx	r8
 800b082:	3001      	adds	r0, #1
 800b084:	d01e      	beq.n	800b0c4 <_printf_common+0xa4>
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	6922      	ldr	r2, [r4, #16]
 800b08a:	f003 0306 	and.w	r3, r3, #6
 800b08e:	2b04      	cmp	r3, #4
 800b090:	bf02      	ittt	eq
 800b092:	68e5      	ldreq	r5, [r4, #12]
 800b094:	6833      	ldreq	r3, [r6, #0]
 800b096:	1aed      	subeq	r5, r5, r3
 800b098:	68a3      	ldr	r3, [r4, #8]
 800b09a:	bf0c      	ite	eq
 800b09c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0a0:	2500      	movne	r5, #0
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	bfc4      	itt	gt
 800b0a6:	1a9b      	subgt	r3, r3, r2
 800b0a8:	18ed      	addgt	r5, r5, r3
 800b0aa:	2600      	movs	r6, #0
 800b0ac:	341a      	adds	r4, #26
 800b0ae:	42b5      	cmp	r5, r6
 800b0b0:	d11a      	bne.n	800b0e8 <_printf_common+0xc8>
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	e008      	b.n	800b0c8 <_printf_common+0xa8>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	4652      	mov	r2, sl
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	4638      	mov	r0, r7
 800b0be:	47c0      	blx	r8
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d103      	bne.n	800b0cc <_printf_common+0xac>
 800b0c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0cc:	3501      	adds	r5, #1
 800b0ce:	e7c6      	b.n	800b05e <_printf_common+0x3e>
 800b0d0:	18e1      	adds	r1, r4, r3
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	2030      	movs	r0, #48	; 0x30
 800b0d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0da:	4422      	add	r2, r4
 800b0dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0e4:	3302      	adds	r3, #2
 800b0e6:	e7c7      	b.n	800b078 <_printf_common+0x58>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	47c0      	blx	r8
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	d0e6      	beq.n	800b0c4 <_printf_common+0xa4>
 800b0f6:	3601      	adds	r6, #1
 800b0f8:	e7d9      	b.n	800b0ae <_printf_common+0x8e>
	...

0800b0fc <_printf_i>:
 800b0fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b100:	7e0f      	ldrb	r7, [r1, #24]
 800b102:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b104:	2f78      	cmp	r7, #120	; 0x78
 800b106:	4691      	mov	r9, r2
 800b108:	4680      	mov	r8, r0
 800b10a:	460c      	mov	r4, r1
 800b10c:	469a      	mov	sl, r3
 800b10e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b112:	d807      	bhi.n	800b124 <_printf_i+0x28>
 800b114:	2f62      	cmp	r7, #98	; 0x62
 800b116:	d80a      	bhi.n	800b12e <_printf_i+0x32>
 800b118:	2f00      	cmp	r7, #0
 800b11a:	f000 80d4 	beq.w	800b2c6 <_printf_i+0x1ca>
 800b11e:	2f58      	cmp	r7, #88	; 0x58
 800b120:	f000 80c0 	beq.w	800b2a4 <_printf_i+0x1a8>
 800b124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b12c:	e03a      	b.n	800b1a4 <_printf_i+0xa8>
 800b12e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b132:	2b15      	cmp	r3, #21
 800b134:	d8f6      	bhi.n	800b124 <_printf_i+0x28>
 800b136:	a101      	add	r1, pc, #4	; (adr r1, 800b13c <_printf_i+0x40>)
 800b138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b13c:	0800b195 	.word	0x0800b195
 800b140:	0800b1a9 	.word	0x0800b1a9
 800b144:	0800b125 	.word	0x0800b125
 800b148:	0800b125 	.word	0x0800b125
 800b14c:	0800b125 	.word	0x0800b125
 800b150:	0800b125 	.word	0x0800b125
 800b154:	0800b1a9 	.word	0x0800b1a9
 800b158:	0800b125 	.word	0x0800b125
 800b15c:	0800b125 	.word	0x0800b125
 800b160:	0800b125 	.word	0x0800b125
 800b164:	0800b125 	.word	0x0800b125
 800b168:	0800b2ad 	.word	0x0800b2ad
 800b16c:	0800b1d5 	.word	0x0800b1d5
 800b170:	0800b267 	.word	0x0800b267
 800b174:	0800b125 	.word	0x0800b125
 800b178:	0800b125 	.word	0x0800b125
 800b17c:	0800b2cf 	.word	0x0800b2cf
 800b180:	0800b125 	.word	0x0800b125
 800b184:	0800b1d5 	.word	0x0800b1d5
 800b188:	0800b125 	.word	0x0800b125
 800b18c:	0800b125 	.word	0x0800b125
 800b190:	0800b26f 	.word	0x0800b26f
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	1d1a      	adds	r2, r3, #4
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	602a      	str	r2, [r5, #0]
 800b19c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e09f      	b.n	800b2e8 <_printf_i+0x1ec>
 800b1a8:	6820      	ldr	r0, [r4, #0]
 800b1aa:	682b      	ldr	r3, [r5, #0]
 800b1ac:	0607      	lsls	r7, r0, #24
 800b1ae:	f103 0104 	add.w	r1, r3, #4
 800b1b2:	6029      	str	r1, [r5, #0]
 800b1b4:	d501      	bpl.n	800b1ba <_printf_i+0xbe>
 800b1b6:	681e      	ldr	r6, [r3, #0]
 800b1b8:	e003      	b.n	800b1c2 <_printf_i+0xc6>
 800b1ba:	0646      	lsls	r6, r0, #25
 800b1bc:	d5fb      	bpl.n	800b1b6 <_printf_i+0xba>
 800b1be:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b1c2:	2e00      	cmp	r6, #0
 800b1c4:	da03      	bge.n	800b1ce <_printf_i+0xd2>
 800b1c6:	232d      	movs	r3, #45	; 0x2d
 800b1c8:	4276      	negs	r6, r6
 800b1ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1ce:	485a      	ldr	r0, [pc, #360]	; (800b338 <_printf_i+0x23c>)
 800b1d0:	230a      	movs	r3, #10
 800b1d2:	e012      	b.n	800b1fa <_printf_i+0xfe>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	6820      	ldr	r0, [r4, #0]
 800b1d8:	1d19      	adds	r1, r3, #4
 800b1da:	6029      	str	r1, [r5, #0]
 800b1dc:	0605      	lsls	r5, r0, #24
 800b1de:	d501      	bpl.n	800b1e4 <_printf_i+0xe8>
 800b1e0:	681e      	ldr	r6, [r3, #0]
 800b1e2:	e002      	b.n	800b1ea <_printf_i+0xee>
 800b1e4:	0641      	lsls	r1, r0, #25
 800b1e6:	d5fb      	bpl.n	800b1e0 <_printf_i+0xe4>
 800b1e8:	881e      	ldrh	r6, [r3, #0]
 800b1ea:	4853      	ldr	r0, [pc, #332]	; (800b338 <_printf_i+0x23c>)
 800b1ec:	2f6f      	cmp	r7, #111	; 0x6f
 800b1ee:	bf0c      	ite	eq
 800b1f0:	2308      	moveq	r3, #8
 800b1f2:	230a      	movne	r3, #10
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1fa:	6865      	ldr	r5, [r4, #4]
 800b1fc:	60a5      	str	r5, [r4, #8]
 800b1fe:	2d00      	cmp	r5, #0
 800b200:	bfa2      	ittt	ge
 800b202:	6821      	ldrge	r1, [r4, #0]
 800b204:	f021 0104 	bicge.w	r1, r1, #4
 800b208:	6021      	strge	r1, [r4, #0]
 800b20a:	b90e      	cbnz	r6, 800b210 <_printf_i+0x114>
 800b20c:	2d00      	cmp	r5, #0
 800b20e:	d04b      	beq.n	800b2a8 <_printf_i+0x1ac>
 800b210:	4615      	mov	r5, r2
 800b212:	fbb6 f1f3 	udiv	r1, r6, r3
 800b216:	fb03 6711 	mls	r7, r3, r1, r6
 800b21a:	5dc7      	ldrb	r7, [r0, r7]
 800b21c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b220:	4637      	mov	r7, r6
 800b222:	42bb      	cmp	r3, r7
 800b224:	460e      	mov	r6, r1
 800b226:	d9f4      	bls.n	800b212 <_printf_i+0x116>
 800b228:	2b08      	cmp	r3, #8
 800b22a:	d10b      	bne.n	800b244 <_printf_i+0x148>
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	07de      	lsls	r6, r3, #31
 800b230:	d508      	bpl.n	800b244 <_printf_i+0x148>
 800b232:	6923      	ldr	r3, [r4, #16]
 800b234:	6861      	ldr	r1, [r4, #4]
 800b236:	4299      	cmp	r1, r3
 800b238:	bfde      	ittt	le
 800b23a:	2330      	movle	r3, #48	; 0x30
 800b23c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b240:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b244:	1b52      	subs	r2, r2, r5
 800b246:	6122      	str	r2, [r4, #16]
 800b248:	f8cd a000 	str.w	sl, [sp]
 800b24c:	464b      	mov	r3, r9
 800b24e:	aa03      	add	r2, sp, #12
 800b250:	4621      	mov	r1, r4
 800b252:	4640      	mov	r0, r8
 800b254:	f7ff fee4 	bl	800b020 <_printf_common>
 800b258:	3001      	adds	r0, #1
 800b25a:	d14a      	bne.n	800b2f2 <_printf_i+0x1f6>
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b260:	b004      	add	sp, #16
 800b262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	f043 0320 	orr.w	r3, r3, #32
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	4833      	ldr	r0, [pc, #204]	; (800b33c <_printf_i+0x240>)
 800b270:	2778      	movs	r7, #120	; 0x78
 800b272:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	6829      	ldr	r1, [r5, #0]
 800b27a:	061f      	lsls	r7, r3, #24
 800b27c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b280:	d402      	bmi.n	800b288 <_printf_i+0x18c>
 800b282:	065f      	lsls	r7, r3, #25
 800b284:	bf48      	it	mi
 800b286:	b2b6      	uxthmi	r6, r6
 800b288:	07df      	lsls	r7, r3, #31
 800b28a:	bf48      	it	mi
 800b28c:	f043 0320 	orrmi.w	r3, r3, #32
 800b290:	6029      	str	r1, [r5, #0]
 800b292:	bf48      	it	mi
 800b294:	6023      	strmi	r3, [r4, #0]
 800b296:	b91e      	cbnz	r6, 800b2a0 <_printf_i+0x1a4>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	f023 0320 	bic.w	r3, r3, #32
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	2310      	movs	r3, #16
 800b2a2:	e7a7      	b.n	800b1f4 <_printf_i+0xf8>
 800b2a4:	4824      	ldr	r0, [pc, #144]	; (800b338 <_printf_i+0x23c>)
 800b2a6:	e7e4      	b.n	800b272 <_printf_i+0x176>
 800b2a8:	4615      	mov	r5, r2
 800b2aa:	e7bd      	b.n	800b228 <_printf_i+0x12c>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	6826      	ldr	r6, [r4, #0]
 800b2b0:	6961      	ldr	r1, [r4, #20]
 800b2b2:	1d18      	adds	r0, r3, #4
 800b2b4:	6028      	str	r0, [r5, #0]
 800b2b6:	0635      	lsls	r5, r6, #24
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	d501      	bpl.n	800b2c0 <_printf_i+0x1c4>
 800b2bc:	6019      	str	r1, [r3, #0]
 800b2be:	e002      	b.n	800b2c6 <_printf_i+0x1ca>
 800b2c0:	0670      	lsls	r0, r6, #25
 800b2c2:	d5fb      	bpl.n	800b2bc <_printf_i+0x1c0>
 800b2c4:	8019      	strh	r1, [r3, #0]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	6123      	str	r3, [r4, #16]
 800b2ca:	4615      	mov	r5, r2
 800b2cc:	e7bc      	b.n	800b248 <_printf_i+0x14c>
 800b2ce:	682b      	ldr	r3, [r5, #0]
 800b2d0:	1d1a      	adds	r2, r3, #4
 800b2d2:	602a      	str	r2, [r5, #0]
 800b2d4:	681d      	ldr	r5, [r3, #0]
 800b2d6:	6862      	ldr	r2, [r4, #4]
 800b2d8:	2100      	movs	r1, #0
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f7f4 ff50 	bl	8000180 <memchr>
 800b2e0:	b108      	cbz	r0, 800b2e6 <_printf_i+0x1ea>
 800b2e2:	1b40      	subs	r0, r0, r5
 800b2e4:	6060      	str	r0, [r4, #4]
 800b2e6:	6863      	ldr	r3, [r4, #4]
 800b2e8:	6123      	str	r3, [r4, #16]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2f0:	e7aa      	b.n	800b248 <_printf_i+0x14c>
 800b2f2:	6923      	ldr	r3, [r4, #16]
 800b2f4:	462a      	mov	r2, r5
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	47d0      	blx	sl
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	d0ad      	beq.n	800b25c <_printf_i+0x160>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	079b      	lsls	r3, r3, #30
 800b304:	d413      	bmi.n	800b32e <_printf_i+0x232>
 800b306:	68e0      	ldr	r0, [r4, #12]
 800b308:	9b03      	ldr	r3, [sp, #12]
 800b30a:	4298      	cmp	r0, r3
 800b30c:	bfb8      	it	lt
 800b30e:	4618      	movlt	r0, r3
 800b310:	e7a6      	b.n	800b260 <_printf_i+0x164>
 800b312:	2301      	movs	r3, #1
 800b314:	4632      	mov	r2, r6
 800b316:	4649      	mov	r1, r9
 800b318:	4640      	mov	r0, r8
 800b31a:	47d0      	blx	sl
 800b31c:	3001      	adds	r0, #1
 800b31e:	d09d      	beq.n	800b25c <_printf_i+0x160>
 800b320:	3501      	adds	r5, #1
 800b322:	68e3      	ldr	r3, [r4, #12]
 800b324:	9903      	ldr	r1, [sp, #12]
 800b326:	1a5b      	subs	r3, r3, r1
 800b328:	42ab      	cmp	r3, r5
 800b32a:	dcf2      	bgt.n	800b312 <_printf_i+0x216>
 800b32c:	e7eb      	b.n	800b306 <_printf_i+0x20a>
 800b32e:	2500      	movs	r5, #0
 800b330:	f104 0619 	add.w	r6, r4, #25
 800b334:	e7f5      	b.n	800b322 <_printf_i+0x226>
 800b336:	bf00      	nop
 800b338:	0800bf19 	.word	0x0800bf19
 800b33c:	0800bf2a 	.word	0x0800bf2a

0800b340 <__malloc_lock>:
 800b340:	4801      	ldr	r0, [pc, #4]	; (800b348 <__malloc_lock+0x8>)
 800b342:	f7ff bc65 	b.w	800ac10 <__retarget_lock_acquire_recursive>
 800b346:	bf00      	nop
 800b348:	20000800 	.word	0x20000800

0800b34c <__malloc_unlock>:
 800b34c:	4801      	ldr	r0, [pc, #4]	; (800b354 <__malloc_unlock+0x8>)
 800b34e:	f7ff bc60 	b.w	800ac12 <__retarget_lock_release_recursive>
 800b352:	bf00      	nop
 800b354:	20000800 	.word	0x20000800

0800b358 <_realloc_r>:
 800b358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b35c:	4680      	mov	r8, r0
 800b35e:	4614      	mov	r4, r2
 800b360:	460e      	mov	r6, r1
 800b362:	b921      	cbnz	r1, 800b36e <_realloc_r+0x16>
 800b364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b368:	4611      	mov	r1, r2
 800b36a:	f7ff bdd9 	b.w	800af20 <_malloc_r>
 800b36e:	b92a      	cbnz	r2, 800b37c <_realloc_r+0x24>
 800b370:	f000 f84c 	bl	800b40c <_free_r>
 800b374:	4625      	mov	r5, r4
 800b376:	4628      	mov	r0, r5
 800b378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b37c:	f000 f890 	bl	800b4a0 <_malloc_usable_size_r>
 800b380:	4284      	cmp	r4, r0
 800b382:	4607      	mov	r7, r0
 800b384:	d802      	bhi.n	800b38c <_realloc_r+0x34>
 800b386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b38a:	d812      	bhi.n	800b3b2 <_realloc_r+0x5a>
 800b38c:	4621      	mov	r1, r4
 800b38e:	4640      	mov	r0, r8
 800b390:	f7ff fdc6 	bl	800af20 <_malloc_r>
 800b394:	4605      	mov	r5, r0
 800b396:	2800      	cmp	r0, #0
 800b398:	d0ed      	beq.n	800b376 <_realloc_r+0x1e>
 800b39a:	42bc      	cmp	r4, r7
 800b39c:	4622      	mov	r2, r4
 800b39e:	4631      	mov	r1, r6
 800b3a0:	bf28      	it	cs
 800b3a2:	463a      	movcs	r2, r7
 800b3a4:	f7ff fc36 	bl	800ac14 <memcpy>
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	f000 f82e 	bl	800b40c <_free_r>
 800b3b0:	e7e1      	b.n	800b376 <_realloc_r+0x1e>
 800b3b2:	4635      	mov	r5, r6
 800b3b4:	e7df      	b.n	800b376 <_realloc_r+0x1e>

0800b3b6 <memmove>:
 800b3b6:	4288      	cmp	r0, r1
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	eb01 0402 	add.w	r4, r1, r2
 800b3be:	d902      	bls.n	800b3c6 <memmove+0x10>
 800b3c0:	4284      	cmp	r4, r0
 800b3c2:	4623      	mov	r3, r4
 800b3c4:	d807      	bhi.n	800b3d6 <memmove+0x20>
 800b3c6:	1e43      	subs	r3, r0, #1
 800b3c8:	42a1      	cmp	r1, r4
 800b3ca:	d008      	beq.n	800b3de <memmove+0x28>
 800b3cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3d4:	e7f8      	b.n	800b3c8 <memmove+0x12>
 800b3d6:	4402      	add	r2, r0
 800b3d8:	4601      	mov	r1, r0
 800b3da:	428a      	cmp	r2, r1
 800b3dc:	d100      	bne.n	800b3e0 <memmove+0x2a>
 800b3de:	bd10      	pop	{r4, pc}
 800b3e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3e8:	e7f7      	b.n	800b3da <memmove+0x24>
	...

0800b3ec <_sbrk_r>:
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	4d06      	ldr	r5, [pc, #24]	; (800b408 <_sbrk_r+0x1c>)
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	4608      	mov	r0, r1
 800b3f6:	602b      	str	r3, [r5, #0]
 800b3f8:	f7f6 faf2 	bl	80019e0 <_sbrk>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d102      	bne.n	800b406 <_sbrk_r+0x1a>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	b103      	cbz	r3, 800b406 <_sbrk_r+0x1a>
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	bd38      	pop	{r3, r4, r5, pc}
 800b408:	2000080c 	.word	0x2000080c

0800b40c <_free_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	4605      	mov	r5, r0
 800b410:	2900      	cmp	r1, #0
 800b412:	d041      	beq.n	800b498 <_free_r+0x8c>
 800b414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b418:	1f0c      	subs	r4, r1, #4
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	bfb8      	it	lt
 800b41e:	18e4      	addlt	r4, r4, r3
 800b420:	f7ff ff8e 	bl	800b340 <__malloc_lock>
 800b424:	4a1d      	ldr	r2, [pc, #116]	; (800b49c <_free_r+0x90>)
 800b426:	6813      	ldr	r3, [r2, #0]
 800b428:	b933      	cbnz	r3, 800b438 <_free_r+0x2c>
 800b42a:	6063      	str	r3, [r4, #4]
 800b42c:	6014      	str	r4, [r2, #0]
 800b42e:	4628      	mov	r0, r5
 800b430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b434:	f7ff bf8a 	b.w	800b34c <__malloc_unlock>
 800b438:	42a3      	cmp	r3, r4
 800b43a:	d908      	bls.n	800b44e <_free_r+0x42>
 800b43c:	6820      	ldr	r0, [r4, #0]
 800b43e:	1821      	adds	r1, r4, r0
 800b440:	428b      	cmp	r3, r1
 800b442:	bf01      	itttt	eq
 800b444:	6819      	ldreq	r1, [r3, #0]
 800b446:	685b      	ldreq	r3, [r3, #4]
 800b448:	1809      	addeq	r1, r1, r0
 800b44a:	6021      	streq	r1, [r4, #0]
 800b44c:	e7ed      	b.n	800b42a <_free_r+0x1e>
 800b44e:	461a      	mov	r2, r3
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	b10b      	cbz	r3, 800b458 <_free_r+0x4c>
 800b454:	42a3      	cmp	r3, r4
 800b456:	d9fa      	bls.n	800b44e <_free_r+0x42>
 800b458:	6811      	ldr	r1, [r2, #0]
 800b45a:	1850      	adds	r0, r2, r1
 800b45c:	42a0      	cmp	r0, r4
 800b45e:	d10b      	bne.n	800b478 <_free_r+0x6c>
 800b460:	6820      	ldr	r0, [r4, #0]
 800b462:	4401      	add	r1, r0
 800b464:	1850      	adds	r0, r2, r1
 800b466:	4283      	cmp	r3, r0
 800b468:	6011      	str	r1, [r2, #0]
 800b46a:	d1e0      	bne.n	800b42e <_free_r+0x22>
 800b46c:	6818      	ldr	r0, [r3, #0]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	6053      	str	r3, [r2, #4]
 800b472:	4408      	add	r0, r1
 800b474:	6010      	str	r0, [r2, #0]
 800b476:	e7da      	b.n	800b42e <_free_r+0x22>
 800b478:	d902      	bls.n	800b480 <_free_r+0x74>
 800b47a:	230c      	movs	r3, #12
 800b47c:	602b      	str	r3, [r5, #0]
 800b47e:	e7d6      	b.n	800b42e <_free_r+0x22>
 800b480:	6820      	ldr	r0, [r4, #0]
 800b482:	1821      	adds	r1, r4, r0
 800b484:	428b      	cmp	r3, r1
 800b486:	bf04      	itt	eq
 800b488:	6819      	ldreq	r1, [r3, #0]
 800b48a:	685b      	ldreq	r3, [r3, #4]
 800b48c:	6063      	str	r3, [r4, #4]
 800b48e:	bf04      	itt	eq
 800b490:	1809      	addeq	r1, r1, r0
 800b492:	6021      	streq	r1, [r4, #0]
 800b494:	6054      	str	r4, [r2, #4]
 800b496:	e7ca      	b.n	800b42e <_free_r+0x22>
 800b498:	bd38      	pop	{r3, r4, r5, pc}
 800b49a:	bf00      	nop
 800b49c:	20000804 	.word	0x20000804

0800b4a0 <_malloc_usable_size_r>:
 800b4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4a4:	1f18      	subs	r0, r3, #4
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	bfbc      	itt	lt
 800b4aa:	580b      	ldrlt	r3, [r1, r0]
 800b4ac:	18c0      	addlt	r0, r0, r3
 800b4ae:	4770      	bx	lr

0800b4b0 <_init>:
 800b4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b2:	bf00      	nop
 800b4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4b6:	bc08      	pop	{r3}
 800b4b8:	469e      	mov	lr, r3
 800b4ba:	4770      	bx	lr

0800b4bc <_fini>:
 800b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4be:	bf00      	nop
 800b4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c2:	bc08      	pop	{r3}
 800b4c4:	469e      	mov	lr, r3
 800b4c6:	4770      	bx	lr
